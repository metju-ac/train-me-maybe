/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// SroTicketsAPIService SroTicketsAPI service
type SroTicketsAPIService service

type ApiCancelSroTicketRequest struct {
	ctx                context.Context
	ApiService         *SroTicketsAPIService
	accountCode        string
	ticketId           int64
	request            *CancelTicketRequest
	xApplicationOrigin *string
	xLang              *string
	xTxToken           *string
}

func (r ApiCancelSroTicketRequest) Request(request CancelTicketRequest) ApiCancelSroTicketRequest {
	r.request = &request
	return r
}

// Application origin - APP - Mobile application (Android / Apple) - AFF - Affiliate application which is managed by third party - CAT - Web application used to sell catering - DEV - Only for development and testing - DOT - Check-in application for ticket sales on a train or bus - NOT - Unknown application type
func (r ApiCancelSroTicketRequest) XApplicationOrigin(xApplicationOrigin string) ApiCancelSroTicketRequest {
	r.xApplicationOrigin = &xApplicationOrigin
	return r
}

// A two-letter language code from [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes). Defines the language into which the response will be translated.  Currently supported languages:  | ISO language name | ISO 639-1 code | |-------------------|----------------| | Czech             | cs             | | German            | de             | | English           | en             | | Spanish           | es             | | French            | fr             | | Hungarian         | hu             | | Russian           | ru             | | Slovak            | sk             | | Ukrainian         | uk             | | Chinese           | zh             |
func (r ApiCancelSroTicketRequest) XLang(xLang string) ApiCancelSroTicketRequest {
	r.xLang = &xLang
	return r
}

// Token (hash) identifier of transaction.
func (r ApiCancelSroTicketRequest) XTxToken(xTxToken string) ApiCancelSroTicketRequest {
	r.xTxToken = &xTxToken
	return r
}

func (r ApiCancelSroTicketRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.CancelSroTicketExecute(r)
}

/*
CancelSroTicket Cancel seat reservation only ticket by ID.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountCode Unique code for the customer's account.  To obtain account code you should go through these two steps:   1. Create new ticket using endpoint `tickets/create`. This endpoint will return `token` in response, which you should use in the step 2.   2. Authenticate user's token using endpoint `users/authenticate`, which will return `accountCode` in response.
	@param ticketId Unique identifier for the ticket.
	@return ApiCancelSroTicketRequest
*/
func (a *SroTicketsAPIService) CancelSroTicket(ctx context.Context, accountCode string, ticketId int64) ApiCancelSroTicketRequest {
	return ApiCancelSroTicketRequest{
		ApiService:  a,
		ctx:         ctx,
		accountCode: accountCode,
		ticketId:    ticketId,
	}
}

// Execute executes the request
//
//	@return SuccessResponse
func (a *SroTicketsAPIService) CancelSroTicketExecute(r ApiCancelSroTicketRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SroTicketsAPIService.CancelSroTicket")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tickets/{accountCode}/RJ_SRO/{ticketId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountCode"+"}", url.PathEscape(parameterValueToString(r.accountCode, "accountCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ticketId"+"}", url.PathEscape(parameterValueToString(r.ticketId, "ticketId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.request == nil {
		return localVarReturnValue, nil, reportError("request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApplicationOrigin != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Application-Origin", r.xApplicationOrigin, "", "")
	}
	if r.xLang != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Lang", r.xLang, "", "")
	}
	if r.xTxToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-TxToken", r.xTxToken, "", "")
	}
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCancelSroTicketByTxTokenRequest struct {
	ctx                context.Context
	ApiService         *SroTicketsAPIService
	xTxToken           *string
	txToken            string
	request            *CancelTicketRequest
	xApplicationOrigin *string
	xLang              *string
}

// Internal ID of the operation - used for check status 204.
func (r ApiCancelSroTicketByTxTokenRequest) XTxToken(xTxToken string) ApiCancelSroTicketByTxTokenRequest {
	r.xTxToken = &xTxToken
	return r
}

func (r ApiCancelSroTicketByTxTokenRequest) Request(request CancelTicketRequest) ApiCancelSroTicketByTxTokenRequest {
	r.request = &request
	return r
}

// Application origin - APP - Mobile application (Android / Apple) - AFF - Affiliate application which is managed by third party - CAT - Web application used to sell catering - DEV - Only for development and testing - DOT - Check-in application for ticket sales on a train or bus - NOT - Unknown application type
func (r ApiCancelSroTicketByTxTokenRequest) XApplicationOrigin(xApplicationOrigin string) ApiCancelSroTicketByTxTokenRequest {
	r.xApplicationOrigin = &xApplicationOrigin
	return r
}

// A two-letter language code from [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes). Defines the language into which the response will be translated.  Currently supported languages:  | ISO language name | ISO 639-1 code | |-------------------|----------------| | Czech             | cs             | | German            | de             | | English           | en             | | Spanish           | es             | | French            | fr             | | Hungarian         | hu             | | Russian           | ru             | | Slovak            | sk             | | Ukrainian         | uk             | | Chinese           | zh             |
func (r ApiCancelSroTicketByTxTokenRequest) XLang(xLang string) ApiCancelSroTicketByTxTokenRequest {
	r.xLang = &xLang
	return r
}

func (r ApiCancelSroTicketByTxTokenRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.CancelSroTicketByTxTokenExecute(r)
}

/*
CancelSroTicketByTxToken Cancel seat reservation only ticket by txToken.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param txToken Internal ID of the original booking operation that will be canceled.
	@return ApiCancelSroTicketByTxTokenRequest
*/
func (a *SroTicketsAPIService) CancelSroTicketByTxToken(ctx context.Context, txToken string) ApiCancelSroTicketByTxTokenRequest {
	return ApiCancelSroTicketByTxTokenRequest{
		ApiService: a,
		ctx:        ctx,
		txToken:    txToken,
	}
}

// Execute executes the request
//
//	@return SuccessResponse
func (a *SroTicketsAPIService) CancelSroTicketByTxTokenExecute(r ApiCancelSroTicketByTxTokenRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SroTicketsAPIService.CancelSroTicketByTxToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tickets/RJ_SRO/{txToken}"
	localVarPath = strings.Replace(localVarPath, "{"+"txToken"+"}", url.PathEscape(parameterValueToString(r.txToken, "txToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTxToken == nil {
		return localVarReturnValue, nil, reportError("xTxToken is required and must be specified")
	}
	if strlen(*r.xTxToken) < 8 {
		return localVarReturnValue, nil, reportError("xTxToken must have at least 8 elements")
	}
	if strlen(*r.xTxToken) > 10 {
		return localVarReturnValue, nil, reportError("xTxToken must have less than 10 elements")
	}
	if strlen(r.txToken) < 8 {
		return localVarReturnValue, nil, reportError("txToken must have at least 8 elements")
	}
	if strlen(r.txToken) > 10 {
		return localVarReturnValue, nil, reportError("txToken must have less than 10 elements")
	}
	if r.request == nil {
		return localVarReturnValue, nil, reportError("request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApplicationOrigin != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Application-Origin", r.xApplicationOrigin, "", "")
	}
	if r.xLang != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Lang", r.xLang, "", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-TxToken", r.xTxToken, "", "")
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateUnregisteredSroTicketsRequest struct {
	ctx                context.Context
	ApiService         *SroTicketsAPIService
	xTxToken           *string
	request            *CreateSroTicketsRequest
	xApplicationOrigin *string
	xLang              *string
	xCurrency          *string
}

// Internal ID of the operation - used for check status 204.
func (r ApiCreateUnregisteredSroTicketsRequest) XTxToken(xTxToken string) ApiCreateUnregisteredSroTicketsRequest {
	r.xTxToken = &xTxToken
	return r
}

// Object with seat reservations that need to be created.
func (r ApiCreateUnregisteredSroTicketsRequest) Request(request CreateSroTicketsRequest) ApiCreateUnregisteredSroTicketsRequest {
	r.request = &request
	return r
}

// Application origin - APP - Mobile application (Android / Apple) - AFF - Affiliate application which is managed by third party - CAT - Web application used to sell catering - DEV - Only for development and testing - DOT - Check-in application for ticket sales on a train or bus - NOT - Unknown application type
func (r ApiCreateUnregisteredSroTicketsRequest) XApplicationOrigin(xApplicationOrigin string) ApiCreateUnregisteredSroTicketsRequest {
	r.xApplicationOrigin = &xApplicationOrigin
	return r
}

// A two-letter language code from [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes). Defines the language into which the response will be translated.  Currently supported languages:  | ISO language name | ISO 639-1 code | |-------------------|----------------| | Czech             | cs             | | German            | de             | | English           | en             | | Spanish           | es             | | French            | fr             | | Hungarian         | hu             | | Russian           | ru             | | Slovak            | sk             | | Ukrainian         | uk             | | Chinese           | zh             |
func (r ApiCreateUnregisteredSroTicketsRequest) XLang(xLang string) ApiCreateUnregisteredSroTicketsRequest {
	r.xLang = &xLang
	return r
}

// A three-letter currency code from [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217). Defines monetary unit to be used in respons.  Currently supported currencies:  | Currency     | ISO 4217 code | |--------------|---------------| | Czech koruna | CZK           | | Euro         | EUR           |
func (r ApiCreateUnregisteredSroTicketsRequest) XCurrency(xCurrency string) ApiCreateUnregisteredSroTicketsRequest {
	r.xCurrency = &xCurrency
	return r
}

// func (r ApiCreateUnregisteredSroTicketsRequest) Execute() (*Object, *http.Response, error) {
// 	return r.ApiService.CreateUnregisteredSroTicketsExecute(r)
// }

/*
CreateUnregisteredSroTickets Create seat reservation.

Creates seat reservation for unregistered user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateUnregisteredSroTicketsRequest
*/
func (a *SroTicketsAPIService) CreateUnregisteredSroTickets(ctx context.Context) ApiCreateUnregisteredSroTicketsRequest {
	return ApiCreateUnregisteredSroTicketsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// // Execute executes the request
// //  @return Object
// func (a *SroTicketsAPIService) CreateUnregisteredSroTicketsExecute(r ApiCreateUnregisteredSroTicketsRequest) (*Object, *http.Response, error) {
// 	var (
// 		localVarHTTPMethod   = http.MethodPost
// 		localVarPostBody     interface{}
// 		formFiles            []formFile
// 		localVarReturnValue  *Object
// 	)

// 	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SroTicketsAPIService.CreateUnregisteredSroTickets")
// 	if err != nil {
// 		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
// 	}

// 	localVarPath := localBasePath + "/tickets/RJ_SRO/unregistered"

// 	localVarHeaderParams := make(map[string]string)
// 	localVarQueryParams := url.Values{}
// 	localVarFormParams := url.Values{}
// 	if r.xTxToken == nil {
// 		return localVarReturnValue, nil, reportError("xTxToken is required and must be specified")
// 	}
// 	if strlen(*r.xTxToken) < 8 {
// 		return localVarReturnValue, nil, reportError("xTxToken must have at least 8 elements")
// 	}
// 	if strlen(*r.xTxToken) > 10 {
// 		return localVarReturnValue, nil, reportError("xTxToken must have less than 10 elements")
// 	}
// 	if r.request == nil {
// 		return localVarReturnValue, nil, reportError("request is required and must be specified")
// 	}

// 	// to determine the Content-Type header
// 	localVarHTTPContentTypes := []string{"application/json"}

// 	// set Content-Type header
// 	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
// 	if localVarHTTPContentType != "" {
// 		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
// 	}

// 	// to determine the Accept header
// 	localVarHTTPHeaderAccepts := []string{"application/json"}

// 	// set Accept header
// 	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
// 	if localVarHTTPHeaderAccept != "" {
// 		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
// 	}
// 	if r.xApplicationOrigin != nil {
// 		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Application-Origin", r.xApplicationOrigin, "", "")
// 	}
// 	if r.xLang != nil {
// 		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Lang", r.xLang, "", "")
// 	}
// 	if r.xCurrency != nil {
// 		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Currency", r.xCurrency, "", "")
// 	}
// 	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-TxToken", r.xTxToken, "", "")
// 	// body params
// 	localVarPostBody = r.request
// 	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
// 	if err != nil {
// 		return localVarReturnValue, nil, err
// 	}

// 	localVarHTTPResponse, err := a.client.callAPI(req)
// 	if err != nil || localVarHTTPResponse == nil {
// 		return localVarReturnValue, localVarHTTPResponse, err
// 	}

// 	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
// 	localVarHTTPResponse.Body.Close()
// 	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
// 	if err != nil {
// 		return localVarReturnValue, localVarHTTPResponse, err
// 	}

// 	if localVarHTTPResponse.StatusCode >= 300 {
// 		newErr := &GenericOpenAPIError{
// 			body:  localVarBody,
// 			error: localVarHTTPResponse.Status,
// 		}
// 		if localVarHTTPResponse.StatusCode == 400 {
// 			var v Object
// 			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
// 			if err != nil {
// 				newErr.error = err.Error()
// 				return localVarReturnValue, localVarHTTPResponse, newErr
// 			}
// 					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
// 					newErr.model = v
// 			return localVarReturnValue, localVarHTTPResponse, newErr
// 		}
// 		if localVarHTTPResponse.StatusCode == 401 {
// 			var v Object
// 			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
// 			if err != nil {
// 				newErr.error = err.Error()
// 				return localVarReturnValue, localVarHTTPResponse, newErr
// 			}
// 					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
// 					newErr.model = v
// 		}
// 		return localVarReturnValue, localVarHTTPResponse, newErr
// 	}

// 	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
// 	if err != nil {
// 		newErr := &GenericOpenAPIError{
// 			body:  localVarBody,
// 			error: err.Error(),
// 		}
// 		return localVarReturnValue, localVarHTTPResponse, newErr
// 	}

// 	return localVarReturnValue, localVarHTTPResponse, nil
// }

type ApiGetBookedSroTicketsRequest struct {
	ctx                context.Context
	ApiService         *SroTicketsAPIService
	txToken            string
	xApplicationOrigin *string
	xLang              *string
}

// Application origin - APP - Mobile application (Android / Apple) - AFF - Affiliate application which is managed by third party - CAT - Web application used to sell catering - DEV - Only for development and testing - DOT - Check-in application for ticket sales on a train or bus - NOT - Unknown application type
func (r ApiGetBookedSroTicketsRequest) XApplicationOrigin(xApplicationOrigin string) ApiGetBookedSroTicketsRequest {
	r.xApplicationOrigin = &xApplicationOrigin
	return r
}

// A two-letter language code from [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes). Defines the language into which the response will be translated.  Currently supported languages:  | ISO language name | ISO 639-1 code | |-------------------|----------------| | Czech             | cs             | | German            | de             | | English           | en             | | Spanish           | es             | | French            | fr             | | Hungarian         | hu             | | Russian           | ru             | | Slovak            | sk             | | Ukrainian         | uk             | | Chinese           | zh             |
func (r ApiGetBookedSroTicketsRequest) XLang(xLang string) ApiGetBookedSroTicketsRequest {
	r.xLang = &xLang
	return r
}

func (r ApiGetBookedSroTicketsRequest) Execute() ([]SroTicketBookingResponse, *http.Response, error) {
	return r.ApiService.GetBookedSroTicketsExecute(r)
}

/*
GetBookedSroTickets Get seat reservation by softbooking operation ID.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param txToken Internal ID of the soft booking operation that will be canceled.
	@return ApiGetBookedSroTicketsRequest
*/
func (a *SroTicketsAPIService) GetBookedSroTickets(ctx context.Context, txToken string) ApiGetBookedSroTicketsRequest {
	return ApiGetBookedSroTicketsRequest{
		ApiService: a,
		ctx:        ctx,
		txToken:    txToken,
	}
}

// Execute executes the request
//
//	@return []SroTicketBookingResponse
func (a *SroTicketsAPIService) GetBookedSroTicketsExecute(r ApiGetBookedSroTicketsRequest) ([]SroTicketBookingResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []SroTicketBookingResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SroTicketsAPIService.GetBookedSroTickets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tickets/RJ_SRO/{txToken}"
	localVarPath = strings.Replace(localVarPath, "{"+"txToken"+"}", url.PathEscape(parameterValueToString(r.txToken, "txToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.txToken) < 8 {
		return localVarReturnValue, nil, reportError("txToken must have at least 8 elements")
	}
	if strlen(r.txToken) > 10 {
		return localVarReturnValue, nil, reportError("txToken must have less than 10 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApplicationOrigin != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Application-Origin", r.xApplicationOrigin, "", "")
	}
	if r.xLang != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Lang", r.xLang, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSroTicketByIdRequest struct {
	ctx                context.Context
	ApiService         *SroTicketsAPIService
	accountCode        string
	ticketId           int64
	xApplicationOrigin *string
	xLang              *string
}

// Application origin - APP - Mobile application (Android / Apple) - AFF - Affiliate application which is managed by third party - CAT - Web application used to sell catering - DEV - Only for development and testing - DOT - Check-in application for ticket sales on a train or bus - NOT - Unknown application type
func (r ApiGetSroTicketByIdRequest) XApplicationOrigin(xApplicationOrigin string) ApiGetSroTicketByIdRequest {
	r.xApplicationOrigin = &xApplicationOrigin
	return r
}

// A two-letter language code from [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes). Defines the language into which the response will be translated.  Currently supported languages:  | ISO language name | ISO 639-1 code | |-------------------|----------------| | Czech             | cs             | | German            | de             | | English           | en             | | Spanish           | es             | | French            | fr             | | Hungarian         | hu             | | Russian           | ru             | | Slovak            | sk             | | Ukrainian         | uk             | | Chinese           | zh             |
func (r ApiGetSroTicketByIdRequest) XLang(xLang string) ApiGetSroTicketByIdRequest {
	r.xLang = &xLang
	return r
}

func (r ApiGetSroTicketByIdRequest) Execute() (*SroTicket, *http.Response, error) {
	return r.ApiService.GetSroTicketByIdExecute(r)
}

/*
GetSroTicketById Get seat reservation by ID.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountCode Unique code for the customer's account.  To obtain account code you should go through these two steps:   1. Create new ticket using endpoint `tickets/create`. This endpoint will return `token` in response, which you should use in the step 2.   2. Authenticate user's token using endpoint `users/authenticate`, which will return `accountCode` in response.
	@param ticketId Unique identifier for the ticket.
	@return ApiGetSroTicketByIdRequest
*/
func (a *SroTicketsAPIService) GetSroTicketById(ctx context.Context, accountCode string, ticketId int64) ApiGetSroTicketByIdRequest {
	return ApiGetSroTicketByIdRequest{
		ApiService:  a,
		ctx:         ctx,
		accountCode: accountCode,
		ticketId:    ticketId,
	}
}

// Execute executes the request
//
//	@return SroTicket
func (a *SroTicketsAPIService) GetSroTicketByIdExecute(r ApiGetSroTicketByIdRequest) (*SroTicket, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SroTicket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SroTicketsAPIService.GetSroTicketById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tickets/RJ_SRO/{accountCode}/{ticketId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountCode"+"}", url.PathEscape(parameterValueToString(r.accountCode, "accountCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ticketId"+"}", url.PathEscape(parameterValueToString(r.ticketId, "ticketId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApplicationOrigin != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Application-Origin", r.xApplicationOrigin, "", "")
	}
	if r.xLang != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Lang", r.xLang, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
