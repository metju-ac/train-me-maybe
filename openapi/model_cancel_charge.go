/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CancelCharge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancelCharge{}

// CancelCharge Amount of money charged for reservation cancel.
type CancelCharge struct {
	// Cancel charge description.
	Message *string `json:"message,omitempty"`
	// Amount of money in chosen currency taken from ticket/addon/... which will not be refunded.
	Amount   float32   `json:"amount"`
	Currency *Currency `json:"currency,omitempty"`
	// Number of percents of original price that will be withheld for cancel.
	Percent *int64 `json:"percent,omitempty"`
}

type _CancelCharge CancelCharge

// NewCancelCharge instantiates a new CancelCharge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelCharge(amount float32) *CancelCharge {
	this := CancelCharge{}
	this.Amount = amount
	var currency Currency = EUR
	this.Currency = &currency
	return &this
}

// NewCancelChargeWithDefaults instantiates a new CancelCharge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelChargeWithDefaults() *CancelCharge {
	this := CancelCharge{}
	var currency Currency = EUR
	this.Currency = &currency
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *CancelCharge) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelCharge) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *CancelCharge) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *CancelCharge) SetMessage(v string) {
	o.Message = &v
}

// GetAmount returns the Amount field value
func (o *CancelCharge) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *CancelCharge) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *CancelCharge) SetAmount(v float32) {
	o.Amount = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CancelCharge) GetCurrency() Currency {
	if o == nil || IsNil(o.Currency) {
		var ret Currency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelCharge) GetCurrencyOk() (*Currency, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CancelCharge) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given Currency and assigns it to the Currency field.
func (o *CancelCharge) SetCurrency(v Currency) {
	o.Currency = &v
}

// GetPercent returns the Percent field value if set, zero value otherwise.
func (o *CancelCharge) GetPercent() int64 {
	if o == nil || IsNil(o.Percent) {
		var ret int64
		return ret
	}
	return *o.Percent
}

// GetPercentOk returns a tuple with the Percent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelCharge) GetPercentOk() (*int64, bool) {
	if o == nil || IsNil(o.Percent) {
		return nil, false
	}
	return o.Percent, true
}

// HasPercent returns a boolean if a field has been set.
func (o *CancelCharge) HasPercent() bool {
	if o != nil && !IsNil(o.Percent) {
		return true
	}

	return false
}

// SetPercent gets a reference to the given int64 and assigns it to the Percent field.
func (o *CancelCharge) SetPercent(v int64) {
	o.Percent = &v
}

func (o CancelCharge) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancelCharge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	toSerialize["amount"] = o.Amount
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Percent) {
		toSerialize["percent"] = o.Percent
	}
	return toSerialize, nil
}

func (o *CancelCharge) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCancelCharge := _CancelCharge{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCancelCharge)

	if err != nil {
		return err
	}

	*o = CancelCharge(varCancelCharge)

	return err
}

type NullableCancelCharge struct {
	value *CancelCharge
	isSet bool
}

func (v NullableCancelCharge) Get() *CancelCharge {
	return v.value
}

func (v *NullableCancelCharge) Set(val *CancelCharge) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelCharge) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelCharge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelCharge(val *CancelCharge) *NullableCancelCharge {
	return &NullableCancelCharge{value: val, isSet: true}
}

func (v NullableCancelCharge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelCharge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
