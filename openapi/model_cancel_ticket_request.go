/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers. 

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CancelTicketRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancelTicketRequest{}

// CancelTicketRequest struct for CancelTicketRequest
type CancelTicketRequest struct {
	// Hash (MD5) of cancellation terms, agreed on by the customer
	ControlHash string `json:"controlHash"`
	// TRUE if refund money after ticket cancel should return to original source, otherwise FALSE
	RefundToOriginalSource *bool `json:"refundToOriginalSource,omitempty"`
}

type _CancelTicketRequest CancelTicketRequest

// NewCancelTicketRequest instantiates a new CancelTicketRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelTicketRequest(controlHash string) *CancelTicketRequest {
	this := CancelTicketRequest{}
	this.ControlHash = controlHash
	return &this
}

// NewCancelTicketRequestWithDefaults instantiates a new CancelTicketRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelTicketRequestWithDefaults() *CancelTicketRequest {
	this := CancelTicketRequest{}
	return &this
}

// GetControlHash returns the ControlHash field value
func (o *CancelTicketRequest) GetControlHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ControlHash
}

// GetControlHashOk returns a tuple with the ControlHash field value
// and a boolean to check if the value has been set.
func (o *CancelTicketRequest) GetControlHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ControlHash, true
}

// SetControlHash sets field value
func (o *CancelTicketRequest) SetControlHash(v string) {
	o.ControlHash = v
}

// GetRefundToOriginalSource returns the RefundToOriginalSource field value if set, zero value otherwise.
func (o *CancelTicketRequest) GetRefundToOriginalSource() bool {
	if o == nil || IsNil(o.RefundToOriginalSource) {
		var ret bool
		return ret
	}
	return *o.RefundToOriginalSource
}

// GetRefundToOriginalSourceOk returns a tuple with the RefundToOriginalSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelTicketRequest) GetRefundToOriginalSourceOk() (*bool, bool) {
	if o == nil || IsNil(o.RefundToOriginalSource) {
		return nil, false
	}
	return o.RefundToOriginalSource, true
}

// HasRefundToOriginalSource returns a boolean if a field has been set.
func (o *CancelTicketRequest) HasRefundToOriginalSource() bool {
	if o != nil && !IsNil(o.RefundToOriginalSource) {
		return true
	}

	return false
}

// SetRefundToOriginalSource gets a reference to the given bool and assigns it to the RefundToOriginalSource field.
func (o *CancelTicketRequest) SetRefundToOriginalSource(v bool) {
	o.RefundToOriginalSource = &v
}

func (o CancelTicketRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancelTicketRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["controlHash"] = o.ControlHash
	if !IsNil(o.RefundToOriginalSource) {
		toSerialize["refundToOriginalSource"] = o.RefundToOriginalSource
	}
	return toSerialize, nil
}

func (o *CancelTicketRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"controlHash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCancelTicketRequest := _CancelTicketRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCancelTicketRequest)

	if err != nil {
		return err
	}

	*o = CancelTicketRequest(varCancelTicketRequest)

	return err
}

type NullableCancelTicketRequest struct {
	value *CancelTicketRequest
	isSet bool
}

func (v NullableCancelTicketRequest) Get() *CancelTicketRequest {
	return v.value
}

func (v *NullableCancelTicketRequest) Set(val *CancelTicketRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelTicketRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelTicketRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelTicketRequest(val *CancelTicketRequest) *NullableCancelTicketRequest {
	return &NullableCancelTicketRequest{value: val, isSet: true}
}

func (v NullableCancelTicketRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelTicketRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


