/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers. 

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CodeDiscount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CodeDiscount{}

// CodeDiscount Flat rate discount
type CodeDiscount struct {
	// Flat rate discount ID
	Id int64 `json:"id"`
	// Five-digit discount code
	Code string `json:"code"`
	// Flat rate discount sum in ticket currency
	Discount float32 `json:"discount"`
}

type _CodeDiscount CodeDiscount

// NewCodeDiscount instantiates a new CodeDiscount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodeDiscount(id int64, code string, discount float32) *CodeDiscount {
	this := CodeDiscount{}
	this.Id = id
	this.Code = code
	this.Discount = discount
	return &this
}

// NewCodeDiscountWithDefaults instantiates a new CodeDiscount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeDiscountWithDefaults() *CodeDiscount {
	this := CodeDiscount{}
	return &this
}

// GetId returns the Id field value
func (o *CodeDiscount) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CodeDiscount) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CodeDiscount) SetId(v int64) {
	o.Id = v
}

// GetCode returns the Code field value
func (o *CodeDiscount) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *CodeDiscount) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *CodeDiscount) SetCode(v string) {
	o.Code = v
}

// GetDiscount returns the Discount field value
func (o *CodeDiscount) GetDiscount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Discount
}

// GetDiscountOk returns a tuple with the Discount field value
// and a boolean to check if the value has been set.
func (o *CodeDiscount) GetDiscountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Discount, true
}

// SetDiscount sets field value
func (o *CodeDiscount) SetDiscount(v float32) {
	o.Discount = v
}

func (o CodeDiscount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CodeDiscount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["code"] = o.Code
	toSerialize["discount"] = o.Discount
	return toSerialize, nil
}

func (o *CodeDiscount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"code",
		"discount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCodeDiscount := _CodeDiscount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCodeDiscount)

	if err != nil {
		return err
	}

	*o = CodeDiscount(varCodeDiscount)

	return err
}

type NullableCodeDiscount struct {
	value *CodeDiscount
	isSet bool
}

func (v NullableCodeDiscount) Get() *CodeDiscount {
	return v.value
}

func (v *NullableCodeDiscount) Set(val *CodeDiscount) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeDiscount) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeDiscount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeDiscount(val *CodeDiscount) *NullableCodeDiscount {
	return &NullableCodeDiscount{value: val, isSet: true}
}

func (v NullableCodeDiscount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeDiscount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


