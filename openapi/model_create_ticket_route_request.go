/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateTicketRouteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTicketRouteRequest{}

// CreateTicketRouteRequest struct for CreateTicketRouteRequest
type CreateTicketRouteRequest struct {
	// route id (section0.id,section1.id, ... sectionx.id)
	RouteId   string `json:"routeId"`
	SeatClass string `json:"seatClass"`
	// Pricing ID - used for confirmation that price, services or conditions werent changed
	PriceSource string                       `json:"priceSource"`
	ActionPrice *ActionPrice                 `json:"actionPrice,omitempty"`
	Sections    []CreateTicketSectionRequest `json:"sections"`
}

type _CreateTicketRouteRequest CreateTicketRouteRequest

// NewCreateTicketRouteRequest instantiates a new CreateTicketRouteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTicketRouteRequest(routeId string, seatClass string, priceSource string, sections []CreateTicketSectionRequest) *CreateTicketRouteRequest {
	this := CreateTicketRouteRequest{}
	this.RouteId = routeId
	this.SeatClass = seatClass
	this.PriceSource = priceSource
	this.Sections = sections
	return &this
}

// NewCreateTicketRouteRequestWithDefaults instantiates a new CreateTicketRouteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTicketRouteRequestWithDefaults() *CreateTicketRouteRequest {
	this := CreateTicketRouteRequest{}
	return &this
}

// GetRouteId returns the RouteId field value
func (o *CreateTicketRouteRequest) GetRouteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RouteId
}

// GetRouteIdOk returns a tuple with the RouteId field value
// and a boolean to check if the value has been set.
func (o *CreateTicketRouteRequest) GetRouteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RouteId, true
}

// SetRouteId sets field value
func (o *CreateTicketRouteRequest) SetRouteId(v string) {
	o.RouteId = v
}

// GetSeatClass returns the SeatClass field value
func (o *CreateTicketRouteRequest) GetSeatClass() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SeatClass
}

// GetSeatClassOk returns a tuple with the SeatClass field value
// and a boolean to check if the value has been set.
func (o *CreateTicketRouteRequest) GetSeatClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeatClass, true
}

// SetSeatClass sets field value
func (o *CreateTicketRouteRequest) SetSeatClass(v string) {
	o.SeatClass = v
}

// GetPriceSource returns the PriceSource field value
func (o *CreateTicketRouteRequest) GetPriceSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PriceSource
}

// GetPriceSourceOk returns a tuple with the PriceSource field value
// and a boolean to check if the value has been set.
func (o *CreateTicketRouteRequest) GetPriceSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceSource, true
}

// SetPriceSource sets field value
func (o *CreateTicketRouteRequest) SetPriceSource(v string) {
	o.PriceSource = v
}

// GetActionPrice returns the ActionPrice field value if set, zero value otherwise.
func (o *CreateTicketRouteRequest) GetActionPrice() ActionPrice {
	if o == nil || IsNil(o.ActionPrice) {
		var ret ActionPrice
		return ret
	}
	return *o.ActionPrice
}

// GetActionPriceOk returns a tuple with the ActionPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTicketRouteRequest) GetActionPriceOk() (*ActionPrice, bool) {
	if o == nil || IsNil(o.ActionPrice) {
		return nil, false
	}
	return o.ActionPrice, true
}

// HasActionPrice returns a boolean if a field has been set.
func (o *CreateTicketRouteRequest) HasActionPrice() bool {
	if o != nil && !IsNil(o.ActionPrice) {
		return true
	}

	return false
}

// SetActionPrice gets a reference to the given ActionPrice and assigns it to the ActionPrice field.
func (o *CreateTicketRouteRequest) SetActionPrice(v ActionPrice) {
	o.ActionPrice = &v
}

// GetSections returns the Sections field value
func (o *CreateTicketRouteRequest) GetSections() []CreateTicketSectionRequest {
	if o == nil {
		var ret []CreateTicketSectionRequest
		return ret
	}

	return o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value
// and a boolean to check if the value has been set.
func (o *CreateTicketRouteRequest) GetSectionsOk() ([]CreateTicketSectionRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sections, true
}

// SetSections sets field value
func (o *CreateTicketRouteRequest) SetSections(v []CreateTicketSectionRequest) {
	o.Sections = v
}

func (o CreateTicketRouteRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTicketRouteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["routeId"] = o.RouteId
	toSerialize["seatClass"] = o.SeatClass
	toSerialize["priceSource"] = o.PriceSource
	if !IsNil(o.ActionPrice) {
		toSerialize["actionPrice"] = o.ActionPrice
	}
	toSerialize["sections"] = o.Sections
	return toSerialize, nil
}

func (o *CreateTicketRouteRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"routeId",
		"seatClass",
		"priceSource",
		"sections",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateTicketRouteRequest := _CreateTicketRouteRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateTicketRouteRequest)

	if err != nil {
		return err
	}

	*o = CreateTicketRouteRequest(varCreateTicketRouteRequest)

	return err
}

type NullableCreateTicketRouteRequest struct {
	value *CreateTicketRouteRequest
	isSet bool
}

func (v NullableCreateTicketRouteRequest) Get() *CreateTicketRouteRequest {
	return v.value
}

func (v *NullableCreateTicketRouteRequest) Set(val *CreateTicketRouteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTicketRouteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTicketRouteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTicketRouteRequest(val *CreateTicketRouteRequest) *NullableCreateTicketRouteRequest {
	return &NullableCreateTicketRouteRequest{value: val, isSet: true}
}

func (v NullableCreateTicketRouteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTicketRouteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
