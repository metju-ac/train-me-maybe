/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Line type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Line{}

// Line Detailed data about line connection.
type Line struct {
	// Unique section identifier.
	ConnectionId int64 `json:"connectionId,omitempty"`
	// Unique section identifier.
	Id int64 `json:"id,omitempty"`
	// Line's connection code.
	Code *string `json:"code,omitempty"`
	// Line's departure city.
	From string `json:"from"`
	// Line's arrival city.
	To string `json:"to"`
	// Line group code.
	LineGroupCode *string `json:"lineGroupCode,omitempty"`
	// Line number.
	LineNumber *int64 `json:"lineNumber,omitempty"`
}

type _Line Line

// NewLine instantiates a new Line object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLine(connectionId int64, from string, to string) *Line {
	this := Line{}
	this.ConnectionId = connectionId
	this.From = from
	this.To = to
	return &this
}

// NewLineWithDefaults instantiates a new Line object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLineWithDefaults() *Line {
	this := Line{}
	return &this
}

// GetConnectionId returns the ConnectionId field value
func (o *Line) GetConnectionId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value
// and a boolean to check if the value has been set.
func (o *Line) GetConnectionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionId, true
}

// SetConnectionId sets field value
func (o *Line) SetConnectionId(v int64) {
	o.ConnectionId = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Line) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Line) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Line) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Line) SetCode(v string) {
	o.Code = &v
}

// GetFrom returns the From field value
func (o *Line) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *Line) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *Line) SetFrom(v string) {
	o.From = v
}

// GetTo returns the To field value
func (o *Line) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *Line) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *Line) SetTo(v string) {
	o.To = v
}

// GetLineGroupCode returns the LineGroupCode field value if set, zero value otherwise.
func (o *Line) GetLineGroupCode() string {
	if o == nil || IsNil(o.LineGroupCode) {
		var ret string
		return ret
	}
	return *o.LineGroupCode
}

// GetLineGroupCodeOk returns a tuple with the LineGroupCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Line) GetLineGroupCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LineGroupCode) {
		return nil, false
	}
	return o.LineGroupCode, true
}

// HasLineGroupCode returns a boolean if a field has been set.
func (o *Line) HasLineGroupCode() bool {
	if o != nil && !IsNil(o.LineGroupCode) {
		return true
	}

	return false
}

// SetLineGroupCode gets a reference to the given string and assigns it to the LineGroupCode field.
func (o *Line) SetLineGroupCode(v string) {
	o.LineGroupCode = &v
}

// GetLineNumber returns the LineNumber field value if set, zero value otherwise.
func (o *Line) GetLineNumber() int64 {
	if o == nil || IsNil(o.LineNumber) {
		var ret int64
		return ret
	}
	return *o.LineNumber
}

// GetLineNumberOk returns a tuple with the LineNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Line) GetLineNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.LineNumber) {
		return nil, false
	}
	return o.LineNumber, true
}

// HasLineNumber returns a boolean if a field has been set.
func (o *Line) HasLineNumber() bool {
	if o != nil && !IsNil(o.LineNumber) {
		return true
	}

	return false
}

// SetLineNumber gets a reference to the given int64 and assigns it to the LineNumber field.
func (o *Line) SetLineNumber(v int64) {
	o.LineNumber = &v
}

func (o Line) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Line) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connectionId"] = o.ConnectionId
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	toSerialize["from"] = o.From
	toSerialize["to"] = o.To
	if !IsNil(o.LineGroupCode) {
		toSerialize["lineGroupCode"] = o.LineGroupCode
	}
	if !IsNil(o.LineNumber) {
		toSerialize["lineNumber"] = o.LineNumber
	}
	return toSerialize, nil
}

func (o *Line) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"from",
		"to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLine := _Line{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLine)

	if err != nil {
		return err
	}

	*o = Line(varLine)

	return err
}

type NullableLine struct {
	value *Line
	isSet bool
}

func (v NullableLine) Get() *Line {
	return v.value
}

func (v *NullableLine) Set(val *Line) {
	v.value = val
	v.isSet = true
}

func (v NullableLine) IsSet() bool {
	return v.isSet
}

func (v *NullableLine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLine(val *Line) *NullableLine {
	return &NullableLine{value: val, isSet: true}
}

func (v NullableLine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
