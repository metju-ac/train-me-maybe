/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers. 

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OrderedAddon type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderedAddon{}

// OrderedAddon struct for OrderedAddon
type OrderedAddon struct {
	Id int64 `json:"id"`
	Name string `json:"name"`
	Description string `json:"description"`
	IconUrl string `json:"iconUrl"`
	InfoUrl *string `json:"infoUrl,omitempty"`
	InfoUrlLabel *string `json:"infoUrlLabel,omitempty"`
	Price float32 `json:"price"`
	Currency Currency `json:"currency"`
	Conditions PriceConditions `json:"conditions"`
}

type _OrderedAddon OrderedAddon

// NewOrderedAddon instantiates a new OrderedAddon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderedAddon(id int64, name string, description string, iconUrl string, price float32, currency Currency, conditions PriceConditions) *OrderedAddon {
	this := OrderedAddon{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.IconUrl = iconUrl
	this.Price = price
	this.Currency = currency
	this.Conditions = conditions
	return &this
}

// NewOrderedAddonWithDefaults instantiates a new OrderedAddon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderedAddonWithDefaults() *OrderedAddon {
	this := OrderedAddon{}
	var currency Currency = EUR
	this.Currency = currency
	return &this
}

// GetId returns the Id field value
func (o *OrderedAddon) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OrderedAddon) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OrderedAddon) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *OrderedAddon) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OrderedAddon) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OrderedAddon) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *OrderedAddon) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *OrderedAddon) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *OrderedAddon) SetDescription(v string) {
	o.Description = v
}

// GetIconUrl returns the IconUrl field value
func (o *OrderedAddon) GetIconUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value
// and a boolean to check if the value has been set.
func (o *OrderedAddon) GetIconUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IconUrl, true
}

// SetIconUrl sets field value
func (o *OrderedAddon) SetIconUrl(v string) {
	o.IconUrl = v
}

// GetInfoUrl returns the InfoUrl field value if set, zero value otherwise.
func (o *OrderedAddon) GetInfoUrl() string {
	if o == nil || IsNil(o.InfoUrl) {
		var ret string
		return ret
	}
	return *o.InfoUrl
}

// GetInfoUrlOk returns a tuple with the InfoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderedAddon) GetInfoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.InfoUrl) {
		return nil, false
	}
	return o.InfoUrl, true
}

// HasInfoUrl returns a boolean if a field has been set.
func (o *OrderedAddon) HasInfoUrl() bool {
	if o != nil && !IsNil(o.InfoUrl) {
		return true
	}

	return false
}

// SetInfoUrl gets a reference to the given string and assigns it to the InfoUrl field.
func (o *OrderedAddon) SetInfoUrl(v string) {
	o.InfoUrl = &v
}

// GetInfoUrlLabel returns the InfoUrlLabel field value if set, zero value otherwise.
func (o *OrderedAddon) GetInfoUrlLabel() string {
	if o == nil || IsNil(o.InfoUrlLabel) {
		var ret string
		return ret
	}
	return *o.InfoUrlLabel
}

// GetInfoUrlLabelOk returns a tuple with the InfoUrlLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderedAddon) GetInfoUrlLabelOk() (*string, bool) {
	if o == nil || IsNil(o.InfoUrlLabel) {
		return nil, false
	}
	return o.InfoUrlLabel, true
}

// HasInfoUrlLabel returns a boolean if a field has been set.
func (o *OrderedAddon) HasInfoUrlLabel() bool {
	if o != nil && !IsNil(o.InfoUrlLabel) {
		return true
	}

	return false
}

// SetInfoUrlLabel gets a reference to the given string and assigns it to the InfoUrlLabel field.
func (o *OrderedAddon) SetInfoUrlLabel(v string) {
	o.InfoUrlLabel = &v
}

// GetPrice returns the Price field value
func (o *OrderedAddon) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *OrderedAddon) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *OrderedAddon) SetPrice(v float32) {
	o.Price = v
}

// GetCurrency returns the Currency field value
func (o *OrderedAddon) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *OrderedAddon) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *OrderedAddon) SetCurrency(v Currency) {
	o.Currency = v
}

// GetConditions returns the Conditions field value
func (o *OrderedAddon) GetConditions() PriceConditions {
	if o == nil {
		var ret PriceConditions
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *OrderedAddon) GetConditionsOk() (*PriceConditions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Conditions, true
}

// SetConditions sets field value
func (o *OrderedAddon) SetConditions(v PriceConditions) {
	o.Conditions = v
}

func (o OrderedAddon) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderedAddon) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["iconUrl"] = o.IconUrl
	if !IsNil(o.InfoUrl) {
		toSerialize["infoUrl"] = o.InfoUrl
	}
	if !IsNil(o.InfoUrlLabel) {
		toSerialize["infoUrlLabel"] = o.InfoUrlLabel
	}
	toSerialize["price"] = o.Price
	toSerialize["currency"] = o.Currency
	toSerialize["conditions"] = o.Conditions
	return toSerialize, nil
}

func (o *OrderedAddon) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"description",
		"iconUrl",
		"price",
		"currency",
		"conditions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderedAddon := _OrderedAddon{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrderedAddon)

	if err != nil {
		return err
	}

	*o = OrderedAddon(varOrderedAddon)

	return err
}

type NullableOrderedAddon struct {
	value *OrderedAddon
	isSet bool
}

func (v NullableOrderedAddon) Get() *OrderedAddon {
	return v.value
}

func (v *NullableOrderedAddon) Set(val *OrderedAddon) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderedAddon) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderedAddon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderedAddon(val *OrderedAddon) *NullableOrderedAddon {
	return &NullableOrderedAddon{value: val, isSet: true}
}

func (v NullableOrderedAddon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderedAddon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


