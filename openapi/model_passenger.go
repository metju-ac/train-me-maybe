/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers. 

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Passenger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Passenger{}

// Passenger struct for Passenger
type Passenger struct {
	Id *int64 `json:"id,omitempty"`
	// First name
	FirstName *string `json:"firstName,omitempty"`
	// Surname
	Surname *string `json:"surname,omitempty"`
	Phone *string `json:"phone,omitempty"`
	// Email are always required after first passenger if not pre-filled in user account (or customer isnt logged in)
	Email *string `json:"email,omitempty"`
	DateOfBirth *string `json:"dateOfBirth,omitempty"`
	Tariff string `json:"tariff"`
	// Basic price (ticket purchase) for tariff set on ticket with ticket currency (doesnt count with discounts)
	Amount *float32 `json:"amount,omitempty"`
	// Final amount for passenger which will be refunded if canceled.
	MoneyBack *float32 `json:"moneyBack,omitempty"`
}

type _Passenger Passenger

// NewPassenger instantiates a new Passenger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPassenger(tariff string) *Passenger {
	this := Passenger{}
	this.Tariff = tariff
	return &this
}

// NewPassengerWithDefaults instantiates a new Passenger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPassengerWithDefaults() *Passenger {
	this := Passenger{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Passenger) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Passenger) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Passenger) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Passenger) SetId(v int64) {
	o.Id = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *Passenger) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Passenger) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *Passenger) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *Passenger) SetFirstName(v string) {
	o.FirstName = &v
}

// GetSurname returns the Surname field value if set, zero value otherwise.
func (o *Passenger) GetSurname() string {
	if o == nil || IsNil(o.Surname) {
		var ret string
		return ret
	}
	return *o.Surname
}

// GetSurnameOk returns a tuple with the Surname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Passenger) GetSurnameOk() (*string, bool) {
	if o == nil || IsNil(o.Surname) {
		return nil, false
	}
	return o.Surname, true
}

// HasSurname returns a boolean if a field has been set.
func (o *Passenger) HasSurname() bool {
	if o != nil && !IsNil(o.Surname) {
		return true
	}

	return false
}

// SetSurname gets a reference to the given string and assigns it to the Surname field.
func (o *Passenger) SetSurname(v string) {
	o.Surname = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *Passenger) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Passenger) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *Passenger) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *Passenger) SetPhone(v string) {
	o.Phone = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Passenger) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Passenger) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Passenger) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Passenger) SetEmail(v string) {
	o.Email = &v
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *Passenger) GetDateOfBirth() string {
	if o == nil || IsNil(o.DateOfBirth) {
		var ret string
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Passenger) GetDateOfBirthOk() (*string, bool) {
	if o == nil || IsNil(o.DateOfBirth) {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *Passenger) HasDateOfBirth() bool {
	if o != nil && !IsNil(o.DateOfBirth) {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given string and assigns it to the DateOfBirth field.
func (o *Passenger) SetDateOfBirth(v string) {
	o.DateOfBirth = &v
}

// GetTariff returns the Tariff field value
func (o *Passenger) GetTariff() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tariff
}

// GetTariffOk returns a tuple with the Tariff field value
// and a boolean to check if the value has been set.
func (o *Passenger) GetTariffOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tariff, true
}

// SetTariff sets field value
func (o *Passenger) SetTariff(v string) {
	o.Tariff = v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Passenger) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Passenger) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Passenger) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *Passenger) SetAmount(v float32) {
	o.Amount = &v
}

// GetMoneyBack returns the MoneyBack field value if set, zero value otherwise.
func (o *Passenger) GetMoneyBack() float32 {
	if o == nil || IsNil(o.MoneyBack) {
		var ret float32
		return ret
	}
	return *o.MoneyBack
}

// GetMoneyBackOk returns a tuple with the MoneyBack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Passenger) GetMoneyBackOk() (*float32, bool) {
	if o == nil || IsNil(o.MoneyBack) {
		return nil, false
	}
	return o.MoneyBack, true
}

// HasMoneyBack returns a boolean if a field has been set.
func (o *Passenger) HasMoneyBack() bool {
	if o != nil && !IsNil(o.MoneyBack) {
		return true
	}

	return false
}

// SetMoneyBack gets a reference to the given float32 and assigns it to the MoneyBack field.
func (o *Passenger) SetMoneyBack(v float32) {
	o.MoneyBack = &v
}

func (o Passenger) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Passenger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.Surname) {
		toSerialize["surname"] = o.Surname
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.DateOfBirth) {
		toSerialize["dateOfBirth"] = o.DateOfBirth
	}
	toSerialize["tariff"] = o.Tariff
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.MoneyBack) {
		toSerialize["moneyBack"] = o.MoneyBack
	}
	return toSerialize, nil
}

func (o *Passenger) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tariff",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPassenger := _Passenger{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPassenger)

	if err != nil {
		return err
	}

	*o = Passenger(varPassenger)

	return err
}

type NullablePassenger struct {
	value *Passenger
	isSet bool
}

func (v NullablePassenger) Get() *Passenger {
	return v.value
}

func (v *NullablePassenger) Set(val *Passenger) {
	v.value = val
	v.isSet = true
}

func (v NullablePassenger) IsSet() bool {
	return v.isSet
}

func (v *NullablePassenger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePassenger(val *Passenger) *NullablePassenger {
	return &NullablePassenger{value: val, isSet: true}
}

func (v NullablePassenger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePassenger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


