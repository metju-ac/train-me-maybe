/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PassengersDataRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PassengersDataRequest{}

// PassengersDataRequest struct for PassengersDataRequest
type PassengersDataRequest struct {
	Sections  []SimpleSection `json:"sections"`
	Tariffs   []string        `json:"tariffs"`
	SeatClass string          `json:"seatClass"`
	// Pricing ID - used for confirmation that price, services or conditions werent changed
	PriceSource string `json:"priceSource"`
}

type _PassengersDataRequest PassengersDataRequest

// NewPassengersDataRequest instantiates a new PassengersDataRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPassengersDataRequest(sections []SimpleSection, tariffs []string, seatClass string, priceSource string) *PassengersDataRequest {
	this := PassengersDataRequest{}
	this.Sections = sections
	this.Tariffs = tariffs
	this.SeatClass = seatClass
	this.PriceSource = priceSource
	return &this
}

// NewPassengersDataRequestWithDefaults instantiates a new PassengersDataRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPassengersDataRequestWithDefaults() *PassengersDataRequest {
	this := PassengersDataRequest{}
	return &this
}

// GetSections returns the Sections field value
func (o *PassengersDataRequest) GetSections() []SimpleSection {
	if o == nil {
		var ret []SimpleSection
		return ret
	}

	return o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value
// and a boolean to check if the value has been set.
func (o *PassengersDataRequest) GetSectionsOk() ([]SimpleSection, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sections, true
}

// SetSections sets field value
func (o *PassengersDataRequest) SetSections(v []SimpleSection) {
	o.Sections = v
}

// GetTariffs returns the Tariffs field value
func (o *PassengersDataRequest) GetTariffs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tariffs
}

// GetTariffsOk returns a tuple with the Tariffs field value
// and a boolean to check if the value has been set.
func (o *PassengersDataRequest) GetTariffsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tariffs, true
}

// SetTariffs sets field value
func (o *PassengersDataRequest) SetTariffs(v []string) {
	o.Tariffs = v
}

// GetSeatClass returns the SeatClass field value
func (o *PassengersDataRequest) GetSeatClass() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SeatClass
}

// GetSeatClassOk returns a tuple with the SeatClass field value
// and a boolean to check if the value has been set.
func (o *PassengersDataRequest) GetSeatClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeatClass, true
}

// SetSeatClass sets field value
func (o *PassengersDataRequest) SetSeatClass(v string) {
	o.SeatClass = v
}

// GetPriceSource returns the PriceSource field value
func (o *PassengersDataRequest) GetPriceSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PriceSource
}

// GetPriceSourceOk returns a tuple with the PriceSource field value
// and a boolean to check if the value has been set.
func (o *PassengersDataRequest) GetPriceSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceSource, true
}

// SetPriceSource sets field value
func (o *PassengersDataRequest) SetPriceSource(v string) {
	o.PriceSource = v
}

func (o PassengersDataRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PassengersDataRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sections"] = o.Sections
	toSerialize["tariffs"] = o.Tariffs
	toSerialize["seatClass"] = o.SeatClass
	toSerialize["priceSource"] = o.PriceSource
	return toSerialize, nil
}

func (o *PassengersDataRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sections",
		"tariffs",
		"seatClass",
		"priceSource",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPassengersDataRequest := _PassengersDataRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPassengersDataRequest)

	if err != nil {
		return err
	}

	*o = PassengersDataRequest(varPassengersDataRequest)

	return err
}

type NullablePassengersDataRequest struct {
	value *PassengersDataRequest
	isSet bool
}

func (v NullablePassengersDataRequest) Get() *PassengersDataRequest {
	return v.value
}

func (v *NullablePassengersDataRequest) Set(val *PassengersDataRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePassengersDataRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePassengersDataRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePassengersDataRequest(val *PassengersDataRequest) *NullablePassengersDataRequest {
	return &NullablePassengersDataRequest{value: val, isSet: true}
}

func (v NullablePassengersDataRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePassengersDataRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
