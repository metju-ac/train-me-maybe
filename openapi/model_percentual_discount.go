/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PercentualDiscount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PercentualDiscount{}

// PercentualDiscount Percentual discount
type PercentualDiscount struct {
	Id int64 `json:"id"`
	// Size of a percentual discount
	Percentage int64 `json:"percentage"`
	// Discount sum in account currency
	Amount float32 `json:"amount"`
	// Maximal number of passengers
	Passengers int64 `json:"passengers"`
	// Default departure country/city/station translations
	FromLocation *string `json:"fromLocation,omitempty"`
	// Default arrival country/city/station translations
	ToLocation *string    `json:"toLocation,omitempty"`
	DateFrom   *time.Time `json:"dateFrom,omitempty"`
	DateTo     *time.Time `json:"dateTo,omitempty"`
}

type _PercentualDiscount PercentualDiscount

// NewPercentualDiscount instantiates a new PercentualDiscount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPercentualDiscount(id int64, percentage int64, amount float32, passengers int64) *PercentualDiscount {
	this := PercentualDiscount{}
	this.Id = id
	this.Percentage = percentage
	this.Amount = amount
	this.Passengers = passengers
	return &this
}

// NewPercentualDiscountWithDefaults instantiates a new PercentualDiscount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPercentualDiscountWithDefaults() *PercentualDiscount {
	this := PercentualDiscount{}
	return &this
}

// GetId returns the Id field value
func (o *PercentualDiscount) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PercentualDiscount) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PercentualDiscount) SetId(v int64) {
	o.Id = v
}

// GetPercentage returns the Percentage field value
func (o *PercentualDiscount) GetPercentage() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value
// and a boolean to check if the value has been set.
func (o *PercentualDiscount) GetPercentageOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percentage, true
}

// SetPercentage sets field value
func (o *PercentualDiscount) SetPercentage(v int64) {
	o.Percentage = v
}

// GetAmount returns the Amount field value
func (o *PercentualDiscount) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PercentualDiscount) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PercentualDiscount) SetAmount(v float32) {
	o.Amount = v
}

// GetPassengers returns the Passengers field value
func (o *PercentualDiscount) GetPassengers() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Passengers
}

// GetPassengersOk returns a tuple with the Passengers field value
// and a boolean to check if the value has been set.
func (o *PercentualDiscount) GetPassengersOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Passengers, true
}

// SetPassengers sets field value
func (o *PercentualDiscount) SetPassengers(v int64) {
	o.Passengers = v
}

// GetFromLocation returns the FromLocation field value if set, zero value otherwise.
func (o *PercentualDiscount) GetFromLocation() string {
	if o == nil || IsNil(o.FromLocation) {
		var ret string
		return ret
	}
	return *o.FromLocation
}

// GetFromLocationOk returns a tuple with the FromLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PercentualDiscount) GetFromLocationOk() (*string, bool) {
	if o == nil || IsNil(o.FromLocation) {
		return nil, false
	}
	return o.FromLocation, true
}

// HasFromLocation returns a boolean if a field has been set.
func (o *PercentualDiscount) HasFromLocation() bool {
	if o != nil && !IsNil(o.FromLocation) {
		return true
	}

	return false
}

// SetFromLocation gets a reference to the given string and assigns it to the FromLocation field.
func (o *PercentualDiscount) SetFromLocation(v string) {
	o.FromLocation = &v
}

// GetToLocation returns the ToLocation field value if set, zero value otherwise.
func (o *PercentualDiscount) GetToLocation() string {
	if o == nil || IsNil(o.ToLocation) {
		var ret string
		return ret
	}
	return *o.ToLocation
}

// GetToLocationOk returns a tuple with the ToLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PercentualDiscount) GetToLocationOk() (*string, bool) {
	if o == nil || IsNil(o.ToLocation) {
		return nil, false
	}
	return o.ToLocation, true
}

// HasToLocation returns a boolean if a field has been set.
func (o *PercentualDiscount) HasToLocation() bool {
	if o != nil && !IsNil(o.ToLocation) {
		return true
	}

	return false
}

// SetToLocation gets a reference to the given string and assigns it to the ToLocation field.
func (o *PercentualDiscount) SetToLocation(v string) {
	o.ToLocation = &v
}

// GetDateFrom returns the DateFrom field value if set, zero value otherwise.
func (o *PercentualDiscount) GetDateFrom() time.Time {
	if o == nil || IsNil(o.DateFrom) {
		var ret time.Time
		return ret
	}
	return *o.DateFrom
}

// GetDateFromOk returns a tuple with the DateFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PercentualDiscount) GetDateFromOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateFrom) {
		return nil, false
	}
	return o.DateFrom, true
}

// HasDateFrom returns a boolean if a field has been set.
func (o *PercentualDiscount) HasDateFrom() bool {
	if o != nil && !IsNil(o.DateFrom) {
		return true
	}

	return false
}

// SetDateFrom gets a reference to the given time.Time and assigns it to the DateFrom field.
func (o *PercentualDiscount) SetDateFrom(v time.Time) {
	o.DateFrom = &v
}

// GetDateTo returns the DateTo field value if set, zero value otherwise.
func (o *PercentualDiscount) GetDateTo() time.Time {
	if o == nil || IsNil(o.DateTo) {
		var ret time.Time
		return ret
	}
	return *o.DateTo
}

// GetDateToOk returns a tuple with the DateTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PercentualDiscount) GetDateToOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateTo) {
		return nil, false
	}
	return o.DateTo, true
}

// HasDateTo returns a boolean if a field has been set.
func (o *PercentualDiscount) HasDateTo() bool {
	if o != nil && !IsNil(o.DateTo) {
		return true
	}

	return false
}

// SetDateTo gets a reference to the given time.Time and assigns it to the DateTo field.
func (o *PercentualDiscount) SetDateTo(v time.Time) {
	o.DateTo = &v
}

func (o PercentualDiscount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PercentualDiscount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["percentage"] = o.Percentage
	toSerialize["amount"] = o.Amount
	toSerialize["passengers"] = o.Passengers
	if !IsNil(o.FromLocation) {
		toSerialize["fromLocation"] = o.FromLocation
	}
	if !IsNil(o.ToLocation) {
		toSerialize["toLocation"] = o.ToLocation
	}
	if !IsNil(o.DateFrom) {
		toSerialize["dateFrom"] = o.DateFrom
	}
	if !IsNil(o.DateTo) {
		toSerialize["dateTo"] = o.DateTo
	}
	return toSerialize, nil
}

func (o *PercentualDiscount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"percentage",
		"amount",
		"passengers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPercentualDiscount := _PercentualDiscount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPercentualDiscount)

	if err != nil {
		return err
	}

	*o = PercentualDiscount(varPercentualDiscount)

	return err
}

type NullablePercentualDiscount struct {
	value *PercentualDiscount
	isSet bool
}

func (v NullablePercentualDiscount) Get() *PercentualDiscount {
	return v.value
}

func (v *NullablePercentualDiscount) Set(val *PercentualDiscount) {
	v.value = val
	v.isSet = true
}

func (v NullablePercentualDiscount) IsSet() bool {
	return v.isSet
}

func (v *NullablePercentualDiscount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePercentualDiscount(val *PercentualDiscount) *NullablePercentualDiscount {
	return &NullablePercentualDiscount{value: val, isSet: true}
}

func (v NullablePercentualDiscount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePercentualDiscount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
