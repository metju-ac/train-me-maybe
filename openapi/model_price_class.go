/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PriceClass type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceClass{}

// PriceClass struct for PriceClass
type PriceClass struct {
	// Seat class key.
	SeatClassKey string          `json:"seatClassKey"`
	Conditions   PriceConditions `json:"conditions"`
	// Service icons for wifi, steward, etc.
	Services       []string `json:"services"`
	FreeSeatsCount int64    `json:"freeSeatsCount"`
	Price          float32  `json:"price"`
	CreditPrice    float32  `json:"creditPrice"`
	// Pricing ID - used for price, services or terms confirmation after route search.
	PriceSource string `json:"priceSource"`
	// Customer notifications
	CustomerNotifications []string             `json:"customerNotifications"`
	ActionPrice           *ActionPrice         `json:"actionPrice,omitempty"`
	Tariffs               []string             `json:"tariffs"`
	TariffNotifications   *TariffNotifications `json:"tariffNotifications,omitempty"`
	// `true` if there are free seats in class available for reservation, otherwise `false`.
	Bookable bool `json:"bookable"`
}

type _PriceClass PriceClass

// NewPriceClass instantiates a new PriceClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceClass(seatClassKey string, conditions PriceConditions, services []string, freeSeatsCount int64, price float32, creditPrice float32, priceSource string, customerNotifications []string, tariffs []string, bookable bool) *PriceClass {
	this := PriceClass{}
	this.SeatClassKey = seatClassKey
	this.Conditions = conditions
	this.Services = services
	this.FreeSeatsCount = freeSeatsCount
	this.Price = price
	this.CreditPrice = creditPrice
	this.PriceSource = priceSource
	this.CustomerNotifications = customerNotifications
	this.Tariffs = tariffs
	this.Bookable = bookable
	return &this
}

// NewPriceClassWithDefaults instantiates a new PriceClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceClassWithDefaults() *PriceClass {
	this := PriceClass{}
	return &this
}

// GetSeatClassKey returns the SeatClassKey field value
func (o *PriceClass) GetSeatClassKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SeatClassKey
}

// GetSeatClassKeyOk returns a tuple with the SeatClassKey field value
// and a boolean to check if the value has been set.
func (o *PriceClass) GetSeatClassKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeatClassKey, true
}

// SetSeatClassKey sets field value
func (o *PriceClass) SetSeatClassKey(v string) {
	o.SeatClassKey = v
}

// GetConditions returns the Conditions field value
func (o *PriceClass) GetConditions() PriceConditions {
	if o == nil {
		var ret PriceConditions
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *PriceClass) GetConditionsOk() (*PriceConditions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Conditions, true
}

// SetConditions sets field value
func (o *PriceClass) SetConditions(v PriceConditions) {
	o.Conditions = v
}

// GetServices returns the Services field value
func (o *PriceClass) GetServices() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Services
}

// GetServicesOk returns a tuple with the Services field value
// and a boolean to check if the value has been set.
func (o *PriceClass) GetServicesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Services, true
}

// SetServices sets field value
func (o *PriceClass) SetServices(v []string) {
	o.Services = v
}

// GetFreeSeatsCount returns the FreeSeatsCount field value
func (o *PriceClass) GetFreeSeatsCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FreeSeatsCount
}

// GetFreeSeatsCountOk returns a tuple with the FreeSeatsCount field value
// and a boolean to check if the value has been set.
func (o *PriceClass) GetFreeSeatsCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FreeSeatsCount, true
}

// SetFreeSeatsCount sets field value
func (o *PriceClass) SetFreeSeatsCount(v int64) {
	o.FreeSeatsCount = v
}

// GetPrice returns the Price field value
func (o *PriceClass) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *PriceClass) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *PriceClass) SetPrice(v float32) {
	o.Price = v
}

// GetCreditPrice returns the CreditPrice field value
func (o *PriceClass) GetCreditPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CreditPrice
}

// GetCreditPriceOk returns a tuple with the CreditPrice field value
// and a boolean to check if the value has been set.
func (o *PriceClass) GetCreditPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditPrice, true
}

// SetCreditPrice sets field value
func (o *PriceClass) SetCreditPrice(v float32) {
	o.CreditPrice = v
}

// GetPriceSource returns the PriceSource field value
func (o *PriceClass) GetPriceSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PriceSource
}

// GetPriceSourceOk returns a tuple with the PriceSource field value
// and a boolean to check if the value has been set.
func (o *PriceClass) GetPriceSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceSource, true
}

// SetPriceSource sets field value
func (o *PriceClass) SetPriceSource(v string) {
	o.PriceSource = v
}

// GetCustomerNotifications returns the CustomerNotifications field value
func (o *PriceClass) GetCustomerNotifications() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CustomerNotifications
}

// GetCustomerNotificationsOk returns a tuple with the CustomerNotifications field value
// and a boolean to check if the value has been set.
func (o *PriceClass) GetCustomerNotificationsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomerNotifications, true
}

// SetCustomerNotifications sets field value
func (o *PriceClass) SetCustomerNotifications(v []string) {
	o.CustomerNotifications = v
}

// GetActionPrice returns the ActionPrice field value if set, zero value otherwise.
func (o *PriceClass) GetActionPrice() ActionPrice {
	if o == nil || IsNil(o.ActionPrice) {
		var ret ActionPrice
		return ret
	}
	return *o.ActionPrice
}

// GetActionPriceOk returns a tuple with the ActionPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceClass) GetActionPriceOk() (*ActionPrice, bool) {
	if o == nil || IsNil(o.ActionPrice) {
		return nil, false
	}
	return o.ActionPrice, true
}

// HasActionPrice returns a boolean if a field has been set.
func (o *PriceClass) HasActionPrice() bool {
	if o != nil && !IsNil(o.ActionPrice) {
		return true
	}

	return false
}

// SetActionPrice gets a reference to the given ActionPrice and assigns it to the ActionPrice field.
func (o *PriceClass) SetActionPrice(v ActionPrice) {
	o.ActionPrice = &v
}

// GetTariffs returns the Tariffs field value
func (o *PriceClass) GetTariffs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tariffs
}

// GetTariffsOk returns a tuple with the Tariffs field value
// and a boolean to check if the value has been set.
func (o *PriceClass) GetTariffsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tariffs, true
}

// SetTariffs sets field value
func (o *PriceClass) SetTariffs(v []string) {
	o.Tariffs = v
}

// GetTariffNotifications returns the TariffNotifications field value if set, zero value otherwise.
func (o *PriceClass) GetTariffNotifications() TariffNotifications {
	if o == nil || IsNil(o.TariffNotifications) {
		var ret TariffNotifications
		return ret
	}
	return *o.TariffNotifications
}

// GetTariffNotificationsOk returns a tuple with the TariffNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceClass) GetTariffNotificationsOk() (*TariffNotifications, bool) {
	if o == nil || IsNil(o.TariffNotifications) {
		return nil, false
	}
	return o.TariffNotifications, true
}

// HasTariffNotifications returns a boolean if a field has been set.
func (o *PriceClass) HasTariffNotifications() bool {
	if o != nil && !IsNil(o.TariffNotifications) {
		return true
	}

	return false
}

// SetTariffNotifications gets a reference to the given TariffNotifications and assigns it to the TariffNotifications field.
func (o *PriceClass) SetTariffNotifications(v TariffNotifications) {
	o.TariffNotifications = &v
}

// GetBookable returns the Bookable field value
func (o *PriceClass) GetBookable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Bookable
}

// GetBookableOk returns a tuple with the Bookable field value
// and a boolean to check if the value has been set.
func (o *PriceClass) GetBookableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bookable, true
}

// SetBookable sets field value
func (o *PriceClass) SetBookable(v bool) {
	o.Bookable = v
}

func (o PriceClass) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceClass) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["seatClassKey"] = o.SeatClassKey
	toSerialize["conditions"] = o.Conditions
	toSerialize["services"] = o.Services
	toSerialize["freeSeatsCount"] = o.FreeSeatsCount
	toSerialize["price"] = o.Price
	toSerialize["creditPrice"] = o.CreditPrice
	toSerialize["priceSource"] = o.PriceSource
	toSerialize["customerNotifications"] = o.CustomerNotifications
	if !IsNil(o.ActionPrice) {
		toSerialize["actionPrice"] = o.ActionPrice
	}
	toSerialize["tariffs"] = o.Tariffs
	if !IsNil(o.TariffNotifications) {
		toSerialize["tariffNotifications"] = o.TariffNotifications
	}
	toSerialize["bookable"] = o.Bookable
	return toSerialize, nil
}

func (o *PriceClass) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"seatClassKey",
		"conditions",
		"services",
		"freeSeatsCount",
		"price",
		"creditPrice",
		"priceSource",
		"customerNotifications",
		"tariffs",
		"bookable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPriceClass := _PriceClass{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPriceClass)

	if err != nil {
		return err
	}

	*o = PriceClass(varPriceClass)

	return err
}

type NullablePriceClass struct {
	value *PriceClass
	isSet bool
}

func (v NullablePriceClass) Get() *PriceClass {
	return v.value
}

func (v *NullablePriceClass) Set(val *PriceClass) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceClass) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceClass(val *PriceClass) *NullablePriceClass {
	return &NullablePriceClass{value: val, isSet: true}
}

func (v NullablePriceClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
