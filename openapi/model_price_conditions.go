/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PriceConditions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceConditions{}

// PriceConditions Reservation cancel conditions.
type PriceConditions struct {
	// Control MD5 hash transformed from conditions content (used for current terms visibility check).
	Code         string                      `json:"code"`
	Descriptions PriceConditionsDescriptions `json:"descriptions"`
	// States that if its possible to refund money to original money source
	RefundToOriginalSourcePossible *bool `json:"refundToOriginalSourcePossible,omitempty"`
	// Sum of all cancel charges in chosen currency.
	CancelCharge  *float32       `json:"cancelCharge,omitempty"`
	CancelCharges []CancelCharge `json:"cancelCharges,omitempty"`
}

type _PriceConditions PriceConditions

// NewPriceConditions instantiates a new PriceConditions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceConditions(code string, descriptions PriceConditionsDescriptions) *PriceConditions {
	this := PriceConditions{}
	this.Code = code
	this.Descriptions = descriptions
	return &this
}

// NewPriceConditionsWithDefaults instantiates a new PriceConditions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceConditionsWithDefaults() *PriceConditions {
	this := PriceConditions{}
	return &this
}

// GetCode returns the Code field value
func (o *PriceConditions) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *PriceConditions) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *PriceConditions) SetCode(v string) {
	o.Code = v
}

// GetDescriptions returns the Descriptions field value
func (o *PriceConditions) GetDescriptions() PriceConditionsDescriptions {
	if o == nil {
		var ret PriceConditionsDescriptions
		return ret
	}

	return o.Descriptions
}

// GetDescriptionsOk returns a tuple with the Descriptions field value
// and a boolean to check if the value has been set.
func (o *PriceConditions) GetDescriptionsOk() (*PriceConditionsDescriptions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Descriptions, true
}

// SetDescriptions sets field value
func (o *PriceConditions) SetDescriptions(v PriceConditionsDescriptions) {
	o.Descriptions = v
}

// GetRefundToOriginalSourcePossible returns the RefundToOriginalSourcePossible field value if set, zero value otherwise.
func (o *PriceConditions) GetRefundToOriginalSourcePossible() bool {
	if o == nil || IsNil(o.RefundToOriginalSourcePossible) {
		var ret bool
		return ret
	}
	return *o.RefundToOriginalSourcePossible
}

// GetRefundToOriginalSourcePossibleOk returns a tuple with the RefundToOriginalSourcePossible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceConditions) GetRefundToOriginalSourcePossibleOk() (*bool, bool) {
	if o == nil || IsNil(o.RefundToOriginalSourcePossible) {
		return nil, false
	}
	return o.RefundToOriginalSourcePossible, true
}

// HasRefundToOriginalSourcePossible returns a boolean if a field has been set.
func (o *PriceConditions) HasRefundToOriginalSourcePossible() bool {
	if o != nil && !IsNil(o.RefundToOriginalSourcePossible) {
		return true
	}

	return false
}

// SetRefundToOriginalSourcePossible gets a reference to the given bool and assigns it to the RefundToOriginalSourcePossible field.
func (o *PriceConditions) SetRefundToOriginalSourcePossible(v bool) {
	o.RefundToOriginalSourcePossible = &v
}

// GetCancelCharge returns the CancelCharge field value if set, zero value otherwise.
func (o *PriceConditions) GetCancelCharge() float32 {
	if o == nil || IsNil(o.CancelCharge) {
		var ret float32
		return ret
	}
	return *o.CancelCharge
}

// GetCancelChargeOk returns a tuple with the CancelCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceConditions) GetCancelChargeOk() (*float32, bool) {
	if o == nil || IsNil(o.CancelCharge) {
		return nil, false
	}
	return o.CancelCharge, true
}

// HasCancelCharge returns a boolean if a field has been set.
func (o *PriceConditions) HasCancelCharge() bool {
	if o != nil && !IsNil(o.CancelCharge) {
		return true
	}

	return false
}

// SetCancelCharge gets a reference to the given float32 and assigns it to the CancelCharge field.
func (o *PriceConditions) SetCancelCharge(v float32) {
	o.CancelCharge = &v
}

// GetCancelCharges returns the CancelCharges field value if set, zero value otherwise.
func (o *PriceConditions) GetCancelCharges() []CancelCharge {
	if o == nil || IsNil(o.CancelCharges) {
		var ret []CancelCharge
		return ret
	}
	return o.CancelCharges
}

// GetCancelChargesOk returns a tuple with the CancelCharges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceConditions) GetCancelChargesOk() ([]CancelCharge, bool) {
	if o == nil || IsNil(o.CancelCharges) {
		return nil, false
	}
	return o.CancelCharges, true
}

// HasCancelCharges returns a boolean if a field has been set.
func (o *PriceConditions) HasCancelCharges() bool {
	if o != nil && !IsNil(o.CancelCharges) {
		return true
	}

	return false
}

// SetCancelCharges gets a reference to the given []CancelCharge and assigns it to the CancelCharges field.
func (o *PriceConditions) SetCancelCharges(v []CancelCharge) {
	o.CancelCharges = v
}

func (o PriceConditions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceConditions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["descriptions"] = o.Descriptions
	if !IsNil(o.RefundToOriginalSourcePossible) {
		toSerialize["refundToOriginalSourcePossible"] = o.RefundToOriginalSourcePossible
	}
	if !IsNil(o.CancelCharge) {
		toSerialize["cancelCharge"] = o.CancelCharge
	}
	if !IsNil(o.CancelCharges) {
		toSerialize["cancelCharges"] = o.CancelCharges
	}
	return toSerialize, nil
}

func (o *PriceConditions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"descriptions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPriceConditions := _PriceConditions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPriceConditions)

	if err != nil {
		return err
	}

	*o = PriceConditions(varPriceConditions)

	return err
}

type NullablePriceConditions struct {
	value *PriceConditions
	isSet bool
}

func (v NullablePriceConditions) Get() *PriceConditions {
	return v.value
}

func (v *NullablePriceConditions) Set(val *PriceConditions) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceConditions) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceConditions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceConditions(val *PriceConditions) *NullablePriceConditions {
	return &NullablePriceConditions{value: val, isSet: true}
}

func (v NullablePriceConditions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceConditions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
