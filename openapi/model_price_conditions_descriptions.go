/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PriceConditionsDescriptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceConditionsDescriptions{}

// PriceConditionsDescriptions Text description of cancel conditions.
type PriceConditionsDescriptions struct {
	// Cancel charge
	Cancel *string `json:"cancel,omitempty"`
	// Cancel schort
	CancelShort *string `json:"cancelShort,omitempty"`
	// Rebook
	Rebook *string `json:"rebook,omitempty"`
	// Rebook Short
	RebookShort *string `json:"rebookShort,omitempty"`
	// Payment expiration
	Expiration *string `json:"expiration,omitempty"`
}

// NewPriceConditionsDescriptions instantiates a new PriceConditionsDescriptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceConditionsDescriptions() *PriceConditionsDescriptions {
	this := PriceConditionsDescriptions{}
	return &this
}

// NewPriceConditionsDescriptionsWithDefaults instantiates a new PriceConditionsDescriptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceConditionsDescriptionsWithDefaults() *PriceConditionsDescriptions {
	this := PriceConditionsDescriptions{}
	return &this
}

// GetCancel returns the Cancel field value if set, zero value otherwise.
func (o *PriceConditionsDescriptions) GetCancel() string {
	if o == nil || IsNil(o.Cancel) {
		var ret string
		return ret
	}
	return *o.Cancel
}

// GetCancelOk returns a tuple with the Cancel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceConditionsDescriptions) GetCancelOk() (*string, bool) {
	if o == nil || IsNil(o.Cancel) {
		return nil, false
	}
	return o.Cancel, true
}

// HasCancel returns a boolean if a field has been set.
func (o *PriceConditionsDescriptions) HasCancel() bool {
	if o != nil && !IsNil(o.Cancel) {
		return true
	}

	return false
}

// SetCancel gets a reference to the given string and assigns it to the Cancel field.
func (o *PriceConditionsDescriptions) SetCancel(v string) {
	o.Cancel = &v
}

// GetRebook returns the Rebook field value if set, zero value otherwise.
func (o *PriceConditionsDescriptions) GetRebook() string {
	if o == nil || IsNil(o.Rebook) {
		var ret string
		return ret
	}
	return *o.Rebook
}

// GetRebookOk returns a tuple with the Rebook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceConditionsDescriptions) GetRebookOk() (*string, bool) {
	if o == nil || IsNil(o.Rebook) {
		return nil, false
	}
	return o.Rebook, true
}

// HasRebook returns a boolean if a field has been set.
func (o *PriceConditionsDescriptions) HasRebook() bool {
	if o != nil && !IsNil(o.Rebook) {
		return true
	}

	return false
}

// SetRebook gets a reference to the given string and assigns it to the Rebook field.
func (o *PriceConditionsDescriptions) SetRebook(v string) {
	o.Rebook = &v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *PriceConditionsDescriptions) GetExpiration() string {
	if o == nil || IsNil(o.Expiration) {
		var ret string
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceConditionsDescriptions) GetExpirationOk() (*string, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *PriceConditionsDescriptions) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given string and assigns it to the Expiration field.
func (o *PriceConditionsDescriptions) SetExpiration(v string) {
	o.Expiration = &v
}

func (o PriceConditionsDescriptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceConditionsDescriptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cancel) {
		toSerialize["cancel"] = o.Cancel
	}
	if !IsNil(o.Rebook) {
		toSerialize["rebook"] = o.Rebook
	}
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	return toSerialize, nil
}

type NullablePriceConditionsDescriptions struct {
	value *PriceConditionsDescriptions
	isSet bool
}

func (v NullablePriceConditionsDescriptions) Get() *PriceConditionsDescriptions {
	return v.value
}

func (v *NullablePriceConditionsDescriptions) Set(val *PriceConditionsDescriptions) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceConditionsDescriptions) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceConditionsDescriptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceConditionsDescriptions(val *PriceConditionsDescriptions) *NullablePriceConditionsDescriptions {
	return &NullablePriceConditionsDescriptions{value: val, isSet: true}
}

func (v NullablePriceConditionsDescriptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceConditionsDescriptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
