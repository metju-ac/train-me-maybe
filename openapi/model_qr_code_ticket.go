/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the QrCodeTicket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QrCodeTicket{}

// QrCodeTicket struct for QrCodeTicket
type QrCodeTicket struct {
	// Version of QR code
	QrCodeVersion    *int64            `json:"qrCodeVersion,omitempty"`
	QrCodeTicketType *QrCodeTicketType `json:"qrCodeTicketType,omitempty"`
	// If there is used discount there is as well ticket ID which is linked to it.
	TicketId *int64 `json:"ticketId,omitempty"`
}

// NewQrCodeTicket instantiates a new QrCodeTicket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQrCodeTicket() *QrCodeTicket {
	this := QrCodeTicket{}
	return &this
}

// NewQrCodeTicketWithDefaults instantiates a new QrCodeTicket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQrCodeTicketWithDefaults() *QrCodeTicket {
	this := QrCodeTicket{}
	return &this
}

// GetQrCodeVersion returns the QrCodeVersion field value if set, zero value otherwise.
func (o *QrCodeTicket) GetQrCodeVersion() int64 {
	if o == nil || IsNil(o.QrCodeVersion) {
		var ret int64
		return ret
	}
	return *o.QrCodeVersion
}

// GetQrCodeVersionOk returns a tuple with the QrCodeVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QrCodeTicket) GetQrCodeVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.QrCodeVersion) {
		return nil, false
	}
	return o.QrCodeVersion, true
}

// HasQrCodeVersion returns a boolean if a field has been set.
func (o *QrCodeTicket) HasQrCodeVersion() bool {
	if o != nil && !IsNil(o.QrCodeVersion) {
		return true
	}

	return false
}

// SetQrCodeVersion gets a reference to the given int64 and assigns it to the QrCodeVersion field.
func (o *QrCodeTicket) SetQrCodeVersion(v int64) {
	o.QrCodeVersion = &v
}

// GetQrCodeTicketType returns the QrCodeTicketType field value if set, zero value otherwise.
func (o *QrCodeTicket) GetQrCodeTicketType() QrCodeTicketType {
	if o == nil || IsNil(o.QrCodeTicketType) {
		var ret QrCodeTicketType
		return ret
	}
	return *o.QrCodeTicketType
}

// GetQrCodeTicketTypeOk returns a tuple with the QrCodeTicketType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QrCodeTicket) GetQrCodeTicketTypeOk() (*QrCodeTicketType, bool) {
	if o == nil || IsNil(o.QrCodeTicketType) {
		return nil, false
	}
	return o.QrCodeTicketType, true
}

// HasQrCodeTicketType returns a boolean if a field has been set.
func (o *QrCodeTicket) HasQrCodeTicketType() bool {
	if o != nil && !IsNil(o.QrCodeTicketType) {
		return true
	}

	return false
}

// SetQrCodeTicketType gets a reference to the given QrCodeTicketType and assigns it to the QrCodeTicketType field.
func (o *QrCodeTicket) SetQrCodeTicketType(v QrCodeTicketType) {
	o.QrCodeTicketType = &v
}

// GetTicketId returns the TicketId field value if set, zero value otherwise.
func (o *QrCodeTicket) GetTicketId() int64 {
	if o == nil || IsNil(o.TicketId) {
		var ret int64
		return ret
	}
	return *o.TicketId
}

// GetTicketIdOk returns a tuple with the TicketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QrCodeTicket) GetTicketIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TicketId) {
		return nil, false
	}
	return o.TicketId, true
}

// HasTicketId returns a boolean if a field has been set.
func (o *QrCodeTicket) HasTicketId() bool {
	if o != nil && !IsNil(o.TicketId) {
		return true
	}

	return false
}

// SetTicketId gets a reference to the given int64 and assigns it to the TicketId field.
func (o *QrCodeTicket) SetTicketId(v int64) {
	o.TicketId = &v
}

func (o QrCodeTicket) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QrCodeTicket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.QrCodeVersion) {
		toSerialize["qrCodeVersion"] = o.QrCodeVersion
	}
	if !IsNil(o.QrCodeTicketType) {
		toSerialize["qrCodeTicketType"] = o.QrCodeTicketType
	}
	if !IsNil(o.TicketId) {
		toSerialize["ticketId"] = o.TicketId
	}
	return toSerialize, nil
}

type NullableQrCodeTicket struct {
	value *QrCodeTicket
	isSet bool
}

func (v NullableQrCodeTicket) Get() *QrCodeTicket {
	return v.value
}

func (v *NullableQrCodeTicket) Set(val *QrCodeTicket) {
	v.value = val
	v.isSet = true
}

func (v NullableQrCodeTicket) IsSet() bool {
	return v.isSet
}

func (v *NullableQrCodeTicket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQrCodeTicket(val *QrCodeTicket) *NullableQrCodeTicket {
	return &NullableQrCodeTicket{value: val, isSet: true}
}

func (v NullableQrCodeTicket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQrCodeTicket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
