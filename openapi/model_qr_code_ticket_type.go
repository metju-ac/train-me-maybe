/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers. 

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// QrCodeTicketType Ticket type of QR code
type QrCodeTicketType string

// List of QrCodeTicketType
const (
	SEAT QrCodeTicketType = "RJ_SEAT"
	TIME QrCodeTicketType = "RJ_TIME"
)

// All allowed values of QrCodeTicketType enum
var AllowedQrCodeTicketTypeEnumValues = []QrCodeTicketType{
	"RJ_SEAT",
	"RJ_TIME",
}

func (v *QrCodeTicketType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QrCodeTicketType(value)
	for _, existing := range AllowedQrCodeTicketTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QrCodeTicketType", value)
}

// NewQrCodeTicketTypeFromValue returns a pointer to a valid QrCodeTicketType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQrCodeTicketTypeFromValue(v string) (*QrCodeTicketType, error) {
	ev := QrCodeTicketType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QrCodeTicketType: valid values are %v", v, AllowedQrCodeTicketTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QrCodeTicketType) IsValid() bool {
	for _, existing := range AllowedQrCodeTicketTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QrCodeTicketType value
func (v QrCodeTicketType) Ptr() *QrCodeTicketType {
	return &v
}

type NullableQrCodeTicketType struct {
	value *QrCodeTicketType
	isSet bool
}

func (v NullableQrCodeTicketType) Get() *QrCodeTicketType {
	return v.value
}

func (v *NullableQrCodeTicketType) Set(val *QrCodeTicketType) {
	v.value = val
	v.isSet = true
}

func (v NullableQrCodeTicketType) IsSet() bool {
	return v.isSet
}

func (v *NullableQrCodeTicketType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQrCodeTicketType(val *QrCodeTicketType) *NullableQrCodeTicketType {
	return &NullableQrCodeTicketType{value: val, isSet: true}
}

func (v NullableQrCodeTicketType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQrCodeTicketType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

