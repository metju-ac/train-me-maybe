/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Route type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Route{}

// Route struct for Route
type Route struct {
	// Unique identifier of a route. Consists of unique sections identifiers separated by commas.
	Id string `json:"id"`
	// Main section of the route. Only for this section can customer select seat class or vehicle standard.
	MainSectionId        int64     `json:"mainSectionId"`
	DepartureStationId   int64     `json:"departureStationId"`
	DepartureStationName *string   `json:"departureStationName,omitempty"`
	DepartureCityId      int64     `json:"departureCityId"`
	DepartureCityName    *string   `json:"departureCityName,omitempty"`
	DepartureTime        time.Time `json:"departureTime"`
	ArrivalStationId     int64     `json:"arrivalStationId"`
	ArrivalStationName   *string   `json:"arrivalStationName,omitempty"`
	ArrivalCityId        int64     `json:"arrivalCityId"`
	ArrivalCityName      *string   `json:"arrivalCityName,omitempty"`
	ArrivalTime          time.Time `json:"arrivalTime"`
	// Number of available free seats through all sections.
	FreeSeatsCount  int32         `json:"freeSeatsCount"`
	PriceFrom       *float32      `json:"priceFrom,omitempty"`
	PriceTo         *float32      `json:"priceTo,omitempty"`
	CreditPriceFrom *float32      `json:"creditPriceFrom,omitempty"`
	CreditPriceTo   *float32      `json:"creditPriceTo,omitempty"`
	VehicleTypes    []VehicleType `json:"vehicleTypes,omitempty"`
	PriceClasses    []PriceClass  `json:"priceClasses,omitempty"`
	Surcharge       *Surcharge    `json:"surcharge,omitempty"`
	Sections        []Section     `json:"sections"`
	// Notice of any extraordinarily events on route / traffic limitation
	Notices       *bool          `json:"notices,omitempty"`
	TransfersInfo *TransfersInfo `json:"transfersInfo,omitempty"`
	// TRUE => national, FALSE => international
	NationalTrip *bool `json:"nationalTrip,omitempty"`
	// TRUE if at least one class have enough free seats for reservation, otherwise FALSE
	Bookable bool `json:"bookable"`
	// Textual information about the first delay on the route
	Delay *string `json:"delay,omitempty"`
	// Textual information about the travel time on the route
	TravelTime *string `json:"travelTime,omitempty"`
}

type _Route Route

// NewRoute instantiates a new Route object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoute(id string, mainSectionId int64, departureStationId int64, departureCityId int64, departureTime time.Time, arrivalStationId int64, arrivalCityId int64, arrivalTime time.Time, freeSeatsCount int32, sections []Section, bookable bool) *Route {
	this := Route{}
	this.Id = id
	this.MainSectionId = mainSectionId
	this.DepartureStationId = departureStationId
	this.DepartureCityId = departureCityId
	this.DepartureTime = departureTime
	this.ArrivalStationId = arrivalStationId
	this.ArrivalCityId = arrivalCityId
	this.ArrivalTime = arrivalTime
	this.FreeSeatsCount = freeSeatsCount
	this.Sections = sections
	this.Bookable = bookable
	return &this
}

// NewRouteWithDefaults instantiates a new Route object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteWithDefaults() *Route {
	this := Route{}
	return &this
}

// GetId returns the Id field value
func (o *Route) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Route) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Route) SetId(v string) {
	o.Id = v
}

// GetMainSectionId returns the MainSectionId field value
func (o *Route) GetMainSectionId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MainSectionId
}

// GetMainSectionIdOk returns a tuple with the MainSectionId field value
// and a boolean to check if the value has been set.
func (o *Route) GetMainSectionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MainSectionId, true
}

// SetMainSectionId sets field value
func (o *Route) SetMainSectionId(v int64) {
	o.MainSectionId = v
}

// GetDepartureStationId returns the DepartureStationId field value
func (o *Route) GetDepartureStationId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DepartureStationId
}

// GetDepartureStationIdOk returns a tuple with the DepartureStationId field value
// and a boolean to check if the value has been set.
func (o *Route) GetDepartureStationIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepartureStationId, true
}

// SetDepartureStationId sets field value
func (o *Route) SetDepartureStationId(v int64) {
	o.DepartureStationId = v
}

// GetDepartureStationName returns the DepartureStationName field value if set, zero value otherwise.
func (o *Route) GetDepartureStationName() string {
	if o == nil || IsNil(o.DepartureStationName) {
		var ret string
		return ret
	}
	return *o.DepartureStationName
}

// GetDepartureStationNameOk returns a tuple with the DepartureStationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetDepartureStationNameOk() (*string, bool) {
	if o == nil || IsNil(o.DepartureStationName) {
		return nil, false
	}
	return o.DepartureStationName, true
}

// HasDepartureStationName returns a boolean if a field has been set.
func (o *Route) HasDepartureStationName() bool {
	if o != nil && !IsNil(o.DepartureStationName) {
		return true
	}

	return false
}

// SetDepartureStationName gets a reference to the given string and assigns it to the DepartureStationName field.
func (o *Route) SetDepartureStationName(v string) {
	o.DepartureStationName = &v
}

// GetDepartureCityId returns the DepartureCityId field value
func (o *Route) GetDepartureCityId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DepartureCityId
}

// GetDepartureCityIdOk returns a tuple with the DepartureCityId field value
// and a boolean to check if the value has been set.
func (o *Route) GetDepartureCityIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepartureCityId, true
}

// SetDepartureCityId sets field value
func (o *Route) SetDepartureCityId(v int64) {
	o.DepartureCityId = v
}

// GetDepartureCityName returns the DepartureCityName field value if set, zero value otherwise.
func (o *Route) GetDepartureCityName() string {
	if o == nil || IsNil(o.DepartureCityName) {
		var ret string
		return ret
	}
	return *o.DepartureCityName
}

// GetDepartureCityNameOk returns a tuple with the DepartureCityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetDepartureCityNameOk() (*string, bool) {
	if o == nil || IsNil(o.DepartureCityName) {
		return nil, false
	}
	return o.DepartureCityName, true
}

// HasDepartureCityName returns a boolean if a field has been set.
func (o *Route) HasDepartureCityName() bool {
	if o != nil && !IsNil(o.DepartureCityName) {
		return true
	}

	return false
}

// SetDepartureCityName gets a reference to the given string and assigns it to the DepartureCityName field.
func (o *Route) SetDepartureCityName(v string) {
	o.DepartureCityName = &v
}

// GetDepartureTime returns the DepartureTime field value
func (o *Route) GetDepartureTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DepartureTime
}

// GetDepartureTimeOk returns a tuple with the DepartureTime field value
// and a boolean to check if the value has been set.
func (o *Route) GetDepartureTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepartureTime, true
}

// SetDepartureTime sets field value
func (o *Route) SetDepartureTime(v time.Time) {
	o.DepartureTime = v
}

// GetArrivalStationId returns the ArrivalStationId field value
func (o *Route) GetArrivalStationId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ArrivalStationId
}

// GetArrivalStationIdOk returns a tuple with the ArrivalStationId field value
// and a boolean to check if the value has been set.
func (o *Route) GetArrivalStationIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArrivalStationId, true
}

// SetArrivalStationId sets field value
func (o *Route) SetArrivalStationId(v int64) {
	o.ArrivalStationId = v
}

// GetArrivalStationName returns the ArrivalStationName field value if set, zero value otherwise.
func (o *Route) GetArrivalStationName() string {
	if o == nil || IsNil(o.ArrivalStationName) {
		var ret string
		return ret
	}
	return *o.ArrivalStationName
}

// GetArrivalStationNameOk returns a tuple with the ArrivalStationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetArrivalStationNameOk() (*string, bool) {
	if o == nil || IsNil(o.ArrivalStationName) {
		return nil, false
	}
	return o.ArrivalStationName, true
}

// HasArrivalStationName returns a boolean if a field has been set.
func (o *Route) HasArrivalStationName() bool {
	if o != nil && !IsNil(o.ArrivalStationName) {
		return true
	}

	return false
}

// SetArrivalStationName gets a reference to the given string and assigns it to the ArrivalStationName field.
func (o *Route) SetArrivalStationName(v string) {
	o.ArrivalStationName = &v
}

// GetArrivalCityId returns the ArrivalCityId field value
func (o *Route) GetArrivalCityId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ArrivalCityId
}

// GetArrivalCityIdOk returns a tuple with the ArrivalCityId field value
// and a boolean to check if the value has been set.
func (o *Route) GetArrivalCityIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArrivalCityId, true
}

// SetArrivalCityId sets field value
func (o *Route) SetArrivalCityId(v int64) {
	o.ArrivalCityId = v
}

// GetArrivalCityName returns the ArrivalCityName field value if set, zero value otherwise.
func (o *Route) GetArrivalCityName() string {
	if o == nil || IsNil(o.ArrivalCityName) {
		var ret string
		return ret
	}
	return *o.ArrivalCityName
}

// GetArrivalCityNameOk returns a tuple with the ArrivalCityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetArrivalCityNameOk() (*string, bool) {
	if o == nil || IsNil(o.ArrivalCityName) {
		return nil, false
	}
	return o.ArrivalCityName, true
}

// HasArrivalCityName returns a boolean if a field has been set.
func (o *Route) HasArrivalCityName() bool {
	if o != nil && !IsNil(o.ArrivalCityName) {
		return true
	}

	return false
}

// SetArrivalCityName gets a reference to the given string and assigns it to the ArrivalCityName field.
func (o *Route) SetArrivalCityName(v string) {
	o.ArrivalCityName = &v
}

// GetArrivalTime returns the ArrivalTime field value
func (o *Route) GetArrivalTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ArrivalTime
}

// GetArrivalTimeOk returns a tuple with the ArrivalTime field value
// and a boolean to check if the value has been set.
func (o *Route) GetArrivalTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArrivalTime, true
}

// SetArrivalTime sets field value
func (o *Route) SetArrivalTime(v time.Time) {
	o.ArrivalTime = v
}

// GetFreeSeatsCount returns the FreeSeatsCount field value
func (o *Route) GetFreeSeatsCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FreeSeatsCount
}

// GetFreeSeatsCountOk returns a tuple with the FreeSeatsCount field value
// and a boolean to check if the value has been set.
func (o *Route) GetFreeSeatsCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FreeSeatsCount, true
}

// SetFreeSeatsCount sets field value
func (o *Route) SetFreeSeatsCount(v int32) {
	o.FreeSeatsCount = v
}

// GetPriceFrom returns the PriceFrom field value if set, zero value otherwise.
func (o *Route) GetPriceFrom() float32 {
	if o == nil || IsNil(o.PriceFrom) {
		var ret float32
		return ret
	}
	return *o.PriceFrom
}

// GetPriceFromOk returns a tuple with the PriceFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetPriceFromOk() (*float32, bool) {
	if o == nil || IsNil(o.PriceFrom) {
		return nil, false
	}
	return o.PriceFrom, true
}

// HasPriceFrom returns a boolean if a field has been set.
func (o *Route) HasPriceFrom() bool {
	if o != nil && !IsNil(o.PriceFrom) {
		return true
	}

	return false
}

// SetPriceFrom gets a reference to the given float32 and assigns it to the PriceFrom field.
func (o *Route) SetPriceFrom(v float32) {
	o.PriceFrom = &v
}

// GetPriceTo returns the PriceTo field value if set, zero value otherwise.
func (o *Route) GetPriceTo() float32 {
	if o == nil || IsNil(o.PriceTo) {
		var ret float32
		return ret
	}
	return *o.PriceTo
}

// GetPriceToOk returns a tuple with the PriceTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetPriceToOk() (*float32, bool) {
	if o == nil || IsNil(o.PriceTo) {
		return nil, false
	}
	return o.PriceTo, true
}

// HasPriceTo returns a boolean if a field has been set.
func (o *Route) HasPriceTo() bool {
	if o != nil && !IsNil(o.PriceTo) {
		return true
	}

	return false
}

// SetPriceTo gets a reference to the given float32 and assigns it to the PriceTo field.
func (o *Route) SetPriceTo(v float32) {
	o.PriceTo = &v
}

// GetCreditPriceFrom returns the CreditPriceFrom field value if set, zero value otherwise.
func (o *Route) GetCreditPriceFrom() float32 {
	if o == nil || IsNil(o.CreditPriceFrom) {
		var ret float32
		return ret
	}
	return *o.CreditPriceFrom
}

// GetCreditPriceFromOk returns a tuple with the CreditPriceFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetCreditPriceFromOk() (*float32, bool) {
	if o == nil || IsNil(o.CreditPriceFrom) {
		return nil, false
	}
	return o.CreditPriceFrom, true
}

// HasCreditPriceFrom returns a boolean if a field has been set.
func (o *Route) HasCreditPriceFrom() bool {
	if o != nil && !IsNil(o.CreditPriceFrom) {
		return true
	}

	return false
}

// SetCreditPriceFrom gets a reference to the given float32 and assigns it to the CreditPriceFrom field.
func (o *Route) SetCreditPriceFrom(v float32) {
	o.CreditPriceFrom = &v
}

// GetCreditPriceTo returns the CreditPriceTo field value if set, zero value otherwise.
func (o *Route) GetCreditPriceTo() float32 {
	if o == nil || IsNil(o.CreditPriceTo) {
		var ret float32
		return ret
	}
	return *o.CreditPriceTo
}

// GetCreditPriceToOk returns a tuple with the CreditPriceTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetCreditPriceToOk() (*float32, bool) {
	if o == nil || IsNil(o.CreditPriceTo) {
		return nil, false
	}
	return o.CreditPriceTo, true
}

// HasCreditPriceTo returns a boolean if a field has been set.
func (o *Route) HasCreditPriceTo() bool {
	if o != nil && !IsNil(o.CreditPriceTo) {
		return true
	}

	return false
}

// SetCreditPriceTo gets a reference to the given float32 and assigns it to the CreditPriceTo field.
func (o *Route) SetCreditPriceTo(v float32) {
	o.CreditPriceTo = &v
}

// GetVehicleTypes returns the VehicleTypes field value if set, zero value otherwise.
func (o *Route) GetVehicleTypes() []VehicleType {
	if o == nil || IsNil(o.VehicleTypes) {
		var ret []VehicleType
		return ret
	}
	return o.VehicleTypes
}

// GetVehicleTypesOk returns a tuple with the VehicleTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetVehicleTypesOk() ([]VehicleType, bool) {
	if o == nil || IsNil(o.VehicleTypes) {
		return nil, false
	}
	return o.VehicleTypes, true
}

// HasVehicleTypes returns a boolean if a field has been set.
func (o *Route) HasVehicleTypes() bool {
	if o != nil && !IsNil(o.VehicleTypes) {
		return true
	}

	return false
}

// SetVehicleTypes gets a reference to the given []VehicleType and assigns it to the VehicleTypes field.
func (o *Route) SetVehicleTypes(v []VehicleType) {
	o.VehicleTypes = v
}

// GetPriceClasses returns the PriceClasses field value if set, zero value otherwise.
func (o *Route) GetPriceClasses() []PriceClass {
	if o == nil || IsNil(o.PriceClasses) {
		var ret []PriceClass
		return ret
	}
	return o.PriceClasses
}

// GetPriceClassesOk returns a tuple with the PriceClasses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetPriceClassesOk() ([]PriceClass, bool) {
	if o == nil || IsNil(o.PriceClasses) {
		return nil, false
	}
	return o.PriceClasses, true
}

// HasPriceClasses returns a boolean if a field has been set.
func (o *Route) HasPriceClasses() bool {
	if o != nil && !IsNil(o.PriceClasses) {
		return true
	}

	return false
}

// SetPriceClasses gets a reference to the given []PriceClass and assigns it to the PriceClasses field.
func (o *Route) SetPriceClasses(v []PriceClass) {
	o.PriceClasses = v
}

// GetSurcharge returns the Surcharge field value if set, zero value otherwise.
func (o *Route) GetSurcharge() Surcharge {
	if o == nil || IsNil(o.Surcharge) {
		var ret Surcharge
		return ret
	}
	return *o.Surcharge
}

// GetSurchargeOk returns a tuple with the Surcharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetSurchargeOk() (*Surcharge, bool) {
	if o == nil || IsNil(o.Surcharge) {
		return nil, false
	}
	return o.Surcharge, true
}

// HasSurcharge returns a boolean if a field has been set.
func (o *Route) HasSurcharge() bool {
	if o != nil && !IsNil(o.Surcharge) {
		return true
	}

	return false
}

// SetSurcharge gets a reference to the given Surcharge and assigns it to the Surcharge field.
func (o *Route) SetSurcharge(v Surcharge) {
	o.Surcharge = &v
}

// GetSections returns the Sections field value
func (o *Route) GetSections() []Section {
	if o == nil {
		var ret []Section
		return ret
	}

	return o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value
// and a boolean to check if the value has been set.
func (o *Route) GetSectionsOk() ([]Section, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sections, true
}

// SetSections sets field value
func (o *Route) SetSections(v []Section) {
	o.Sections = v
}

// GetNotices returns the Notices field value if set, zero value otherwise.
func (o *Route) GetNotices() bool {
	if o == nil || IsNil(o.Notices) {
		var ret bool
		return ret
	}
	return *o.Notices
}

// GetNoticesOk returns a tuple with the Notices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetNoticesOk() (*bool, bool) {
	if o == nil || IsNil(o.Notices) {
		return nil, false
	}
	return o.Notices, true
}

// HasNotices returns a boolean if a field has been set.
func (o *Route) HasNotices() bool {
	if o != nil && !IsNil(o.Notices) {
		return true
	}

	return false
}

// SetNotices gets a reference to the given bool and assigns it to the Notices field.
func (o *Route) SetNotices(v bool) {
	o.Notices = &v
}

// GetTransfersInfo returns the TransfersInfo field value if set, zero value otherwise.
func (o *Route) GetTransfersInfo() TransfersInfo {
	if o == nil || IsNil(o.TransfersInfo) {
		var ret TransfersInfo
		return ret
	}
	return *o.TransfersInfo
}

// GetTransfersInfoOk returns a tuple with the TransfersInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetTransfersInfoOk() (*TransfersInfo, bool) {
	if o == nil || IsNil(o.TransfersInfo) {
		return nil, false
	}
	return o.TransfersInfo, true
}

// HasTransfersInfo returns a boolean if a field has been set.
func (o *Route) HasTransfersInfo() bool {
	if o != nil && !IsNil(o.TransfersInfo) {
		return true
	}

	return false
}

// SetTransfersInfo gets a reference to the given TransfersInfo and assigns it to the TransfersInfo field.
func (o *Route) SetTransfersInfo(v TransfersInfo) {
	o.TransfersInfo = &v
}

// GetNationalTrip returns the NationalTrip field value if set, zero value otherwise.
func (o *Route) GetNationalTrip() bool {
	if o == nil || IsNil(o.NationalTrip) {
		var ret bool
		return ret
	}
	return *o.NationalTrip
}

// GetNationalTripOk returns a tuple with the NationalTrip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetNationalTripOk() (*bool, bool) {
	if o == nil || IsNil(o.NationalTrip) {
		return nil, false
	}
	return o.NationalTrip, true
}

// HasNationalTrip returns a boolean if a field has been set.
func (o *Route) HasNationalTrip() bool {
	if o != nil && !IsNil(o.NationalTrip) {
		return true
	}

	return false
}

// SetNationalTrip gets a reference to the given bool and assigns it to the NationalTrip field.
func (o *Route) SetNationalTrip(v bool) {
	o.NationalTrip = &v
}

// GetBookable returns the Bookable field value
func (o *Route) GetBookable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Bookable
}

// GetBookableOk returns a tuple with the Bookable field value
// and a boolean to check if the value has been set.
func (o *Route) GetBookableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bookable, true
}

// SetBookable sets field value
func (o *Route) SetBookable(v bool) {
	o.Bookable = v
}

// GetDelay returns the Delay field value if set, zero value otherwise.
func (o *Route) GetDelay() string {
	if o == nil || IsNil(o.Delay) {
		var ret string
		return ret
	}
	return *o.Delay
}

// GetDelayOk returns a tuple with the Delay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetDelayOk() (*string, bool) {
	if o == nil || IsNil(o.Delay) {
		return nil, false
	}
	return o.Delay, true
}

// HasDelay returns a boolean if a field has been set.
func (o *Route) HasDelay() bool {
	if o != nil && !IsNil(o.Delay) {
		return true
	}

	return false
}

// SetDelay gets a reference to the given string and assigns it to the Delay field.
func (o *Route) SetDelay(v string) {
	o.Delay = &v
}

// GetTravelTime returns the TravelTime field value if set, zero value otherwise.
func (o *Route) GetTravelTime() string {
	if o == nil || IsNil(o.TravelTime) {
		var ret string
		return ret
	}
	return *o.TravelTime
}

// GetTravelTimeOk returns a tuple with the TravelTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetTravelTimeOk() (*string, bool) {
	if o == nil || IsNil(o.TravelTime) {
		return nil, false
	}
	return o.TravelTime, true
}

// HasTravelTime returns a boolean if a field has been set.
func (o *Route) HasTravelTime() bool {
	if o != nil && !IsNil(o.TravelTime) {
		return true
	}

	return false
}

// SetTravelTime gets a reference to the given string and assigns it to the TravelTime field.
func (o *Route) SetTravelTime(v string) {
	o.TravelTime = &v
}

func (o Route) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Route) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["mainSectionId"] = o.MainSectionId
	toSerialize["departureStationId"] = o.DepartureStationId
	if !IsNil(o.DepartureStationName) {
		toSerialize["departureStationName"] = o.DepartureStationName
	}
	toSerialize["departureCityId"] = o.DepartureCityId
	if !IsNil(o.DepartureCityName) {
		toSerialize["departureCityName"] = o.DepartureCityName
	}
	toSerialize["departureTime"] = o.DepartureTime
	toSerialize["arrivalStationId"] = o.ArrivalStationId
	if !IsNil(o.ArrivalStationName) {
		toSerialize["arrivalStationName"] = o.ArrivalStationName
	}
	toSerialize["arrivalCityId"] = o.ArrivalCityId
	if !IsNil(o.ArrivalCityName) {
		toSerialize["arrivalCityName"] = o.ArrivalCityName
	}
	toSerialize["arrivalTime"] = o.ArrivalTime
	toSerialize["freeSeatsCount"] = o.FreeSeatsCount
	if !IsNil(o.PriceFrom) {
		toSerialize["priceFrom"] = o.PriceFrom
	}
	if !IsNil(o.PriceTo) {
		toSerialize["priceTo"] = o.PriceTo
	}
	if !IsNil(o.CreditPriceFrom) {
		toSerialize["creditPriceFrom"] = o.CreditPriceFrom
	}
	if !IsNil(o.CreditPriceTo) {
		toSerialize["creditPriceTo"] = o.CreditPriceTo
	}
	if !IsNil(o.VehicleTypes) {
		toSerialize["vehicleTypes"] = o.VehicleTypes
	}
	if !IsNil(o.PriceClasses) {
		toSerialize["priceClasses"] = o.PriceClasses
	}
	if !IsNil(o.Surcharge) {
		toSerialize["surcharge"] = o.Surcharge
	}
	toSerialize["sections"] = o.Sections
	if !IsNil(o.Notices) {
		toSerialize["notices"] = o.Notices
	}
	if !IsNil(o.TransfersInfo) {
		toSerialize["transfersInfo"] = o.TransfersInfo
	}
	if !IsNil(o.NationalTrip) {
		toSerialize["nationalTrip"] = o.NationalTrip
	}
	toSerialize["bookable"] = o.Bookable
	if !IsNil(o.Delay) {
		toSerialize["delay"] = o.Delay
	}
	if !IsNil(o.TravelTime) {
		toSerialize["travelTime"] = o.TravelTime
	}
	return toSerialize, nil
}

func (o *Route) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"mainSectionId",
		"departureStationId",
		"departureCityId",
		"departureTime",
		"arrivalStationId",
		"arrivalCityId",
		"arrivalTime",
		"freeSeatsCount",
		"sections",
		"bookable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoute := _Route{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoute)

	if err != nil {
		return err
	}

	*o = Route(varRoute)

	return err
}

type NullableRoute struct {
	value *Route
	isSet bool
}

func (v NullableRoute) Get() *Route {
	return v.value
}

func (v *NullableRoute) Set(val *Route) {
	v.value = val
	v.isSet = true
}

func (v NullableRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoute(val *Route) *NullableRoute {
	return &NullableRoute{value: val, isSet: true}
}

func (v NullableRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
