/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers. 

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RouteSeatsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteSeatsRequest{}

// RouteSeatsRequest struct for RouteSeatsRequest
type RouteSeatsRequest struct {
	Sections []SimpleSection `json:"sections"`
	Tariffs []string `json:"tariffs"`
	SeatClass string `json:"seatClass"`
}

type _RouteSeatsRequest RouteSeatsRequest

// NewRouteSeatsRequest instantiates a new RouteSeatsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteSeatsRequest(sections []SimpleSection, tariffs []string, seatClass string) *RouteSeatsRequest {
	this := RouteSeatsRequest{}
	this.Sections = sections
	this.Tariffs = tariffs
	this.SeatClass = seatClass
	return &this
}

// NewRouteSeatsRequestWithDefaults instantiates a new RouteSeatsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteSeatsRequestWithDefaults() *RouteSeatsRequest {
	this := RouteSeatsRequest{}
	return &this
}

// GetSections returns the Sections field value
func (o *RouteSeatsRequest) GetSections() []SimpleSection {
	if o == nil {
		var ret []SimpleSection
		return ret
	}

	return o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value
// and a boolean to check if the value has been set.
func (o *RouteSeatsRequest) GetSectionsOk() ([]SimpleSection, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sections, true
}

// SetSections sets field value
func (o *RouteSeatsRequest) SetSections(v []SimpleSection) {
	o.Sections = v
}

// GetTariffs returns the Tariffs field value
func (o *RouteSeatsRequest) GetTariffs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tariffs
}

// GetTariffsOk returns a tuple with the Tariffs field value
// and a boolean to check if the value has been set.
func (o *RouteSeatsRequest) GetTariffsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tariffs, true
}

// SetTariffs sets field value
func (o *RouteSeatsRequest) SetTariffs(v []string) {
	o.Tariffs = v
}

// GetSeatClass returns the SeatClass field value
func (o *RouteSeatsRequest) GetSeatClass() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SeatClass
}

// GetSeatClassOk returns a tuple with the SeatClass field value
// and a boolean to check if the value has been set.
func (o *RouteSeatsRequest) GetSeatClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeatClass, true
}

// SetSeatClass sets field value
func (o *RouteSeatsRequest) SetSeatClass(v string) {
	o.SeatClass = v
}

func (o RouteSeatsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteSeatsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sections"] = o.Sections
	toSerialize["tariffs"] = o.Tariffs
	toSerialize["seatClass"] = o.SeatClass
	return toSerialize, nil
}

func (o *RouteSeatsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sections",
		"tariffs",
		"seatClass",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRouteSeatsRequest := _RouteSeatsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRouteSeatsRequest)

	if err != nil {
		return err
	}

	*o = RouteSeatsRequest(varRouteSeatsRequest)

	return err
}

type NullableRouteSeatsRequest struct {
	value *RouteSeatsRequest
	isSet bool
}

func (v NullableRouteSeatsRequest) Get() *RouteSeatsRequest {
	return v.value
}

func (v *NullableRouteSeatsRequest) Set(val *RouteSeatsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteSeatsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteSeatsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteSeatsRequest(val *RouteSeatsRequest) *NullableRouteSeatsRequest {
	return &NullableRouteSeatsRequest{value: val, isSet: true}
}

func (v NullableRouteSeatsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteSeatsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


