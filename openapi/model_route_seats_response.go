/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RouteSeatsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteSeatsResponse{}

// RouteSeatsResponse struct for RouteSeatsResponse
type RouteSeatsResponse struct {
	SectionId int64 `json:"sectionId"`
	// TRUE => seat reservation; FALSE => seat choosed while boarding
	FixedSeatReservation bool           `json:"fixedSeatReservation"`
	Vehicles             []Vehicle      `json:"vehicles,omitempty"`
	SelectedSeats        []SelectedSeat `json:"selectedSeats,omitempty"`
}

type _RouteSeatsResponse RouteSeatsResponse

// NewRouteSeatsResponse instantiates a new RouteSeatsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteSeatsResponse(sectionId int64, fixedSeatReservation bool) *RouteSeatsResponse {
	this := RouteSeatsResponse{}
	this.SectionId = sectionId
	this.FixedSeatReservation = fixedSeatReservation
	return &this
}

// NewRouteSeatsResponseWithDefaults instantiates a new RouteSeatsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteSeatsResponseWithDefaults() *RouteSeatsResponse {
	this := RouteSeatsResponse{}
	return &this
}

// GetSectionId returns the SectionId field value
func (o *RouteSeatsResponse) GetSectionId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SectionId
}

// GetSectionIdOk returns a tuple with the SectionId field value
// and a boolean to check if the value has been set.
func (o *RouteSeatsResponse) GetSectionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SectionId, true
}

// SetSectionId sets field value
func (o *RouteSeatsResponse) SetSectionId(v int64) {
	o.SectionId = v
}

// GetFixedSeatReservation returns the FixedSeatReservation field value
func (o *RouteSeatsResponse) GetFixedSeatReservation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FixedSeatReservation
}

// GetFixedSeatReservationOk returns a tuple with the FixedSeatReservation field value
// and a boolean to check if the value has been set.
func (o *RouteSeatsResponse) GetFixedSeatReservationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FixedSeatReservation, true
}

// SetFixedSeatReservation sets field value
func (o *RouteSeatsResponse) SetFixedSeatReservation(v bool) {
	o.FixedSeatReservation = v
}

// GetVehicles returns the Vehicles field value if set, zero value otherwise.
func (o *RouteSeatsResponse) GetVehicles() []Vehicle {
	if o == nil || IsNil(o.Vehicles) {
		var ret []Vehicle
		return ret
	}
	return o.Vehicles
}

// GetVehiclesOk returns a tuple with the Vehicles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSeatsResponse) GetVehiclesOk() ([]Vehicle, bool) {
	if o == nil || IsNil(o.Vehicles) {
		return nil, false
	}
	return o.Vehicles, true
}

// HasVehicles returns a boolean if a field has been set.
func (o *RouteSeatsResponse) HasVehicles() bool {
	if o != nil && !IsNil(o.Vehicles) {
		return true
	}

	return false
}

// SetVehicles gets a reference to the given []Vehicle and assigns it to the Vehicles field.
func (o *RouteSeatsResponse) SetVehicles(v []Vehicle) {
	o.Vehicles = v
}

// GetSelectedSeats returns the SelectedSeats field value if set, zero value otherwise.
func (o *RouteSeatsResponse) GetSelectedSeats() []SelectedSeat {
	if o == nil || IsNil(o.SelectedSeats) {
		var ret []SelectedSeat
		return ret
	}
	return o.SelectedSeats
}

// GetSelectedSeatsOk returns a tuple with the SelectedSeats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSeatsResponse) GetSelectedSeatsOk() ([]SelectedSeat, bool) {
	if o == nil || IsNil(o.SelectedSeats) {
		return nil, false
	}
	return o.SelectedSeats, true
}

// HasSelectedSeats returns a boolean if a field has been set.
func (o *RouteSeatsResponse) HasSelectedSeats() bool {
	if o != nil && !IsNil(o.SelectedSeats) {
		return true
	}

	return false
}

// SetSelectedSeats gets a reference to the given []SelectedSeat and assigns it to the SelectedSeats field.
func (o *RouteSeatsResponse) SetSelectedSeats(v []SelectedSeat) {
	o.SelectedSeats = v
}

func (o RouteSeatsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteSeatsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sectionId"] = o.SectionId
	toSerialize["fixedSeatReservation"] = o.FixedSeatReservation
	if !IsNil(o.Vehicles) {
		toSerialize["vehicles"] = o.Vehicles
	}
	if !IsNil(o.SelectedSeats) {
		toSerialize["selectedSeats"] = o.SelectedSeats
	}
	return toSerialize, nil
}

func (o *RouteSeatsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sectionId",
		"fixedSeatReservation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRouteSeatsResponse := _RouteSeatsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRouteSeatsResponse)

	if err != nil {
		return err
	}

	*o = RouteSeatsResponse(varRouteSeatsResponse)

	return err
}

type NullableRouteSeatsResponse struct {
	value *RouteSeatsResponse
	isSet bool
}

func (v NullableRouteSeatsResponse) Get() *RouteSeatsResponse {
	return v.value
}

func (v *NullableRouteSeatsResponse) Set(val *RouteSeatsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteSeatsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteSeatsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteSeatsResponse(val *RouteSeatsResponse) *NullableRouteSeatsResponse {
	return &NullableRouteSeatsResponse{value: val, isSet: true}
}

func (v NullableRouteSeatsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteSeatsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
