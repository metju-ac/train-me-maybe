/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers. 

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RouteSeatsResponse110 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteSeatsResponse110{}

// RouteSeatsResponse110 struct for RouteSeatsResponse110
type RouteSeatsResponse110 struct {
	SectionId int64 `json:"sectionId"`
	// TRUE => seat reservation; FALSE => seat choosed while boarding
	FixedSeatReservation bool `json:"fixedSeatReservation"`
	Vehicles []Vehicle110 `json:"vehicles,omitempty"`
	SelectedSeats []SelectedSeat100 `json:"selectedSeats,omitempty"`
}

type _RouteSeatsResponse110 RouteSeatsResponse110

// NewRouteSeatsResponse110 instantiates a new RouteSeatsResponse110 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteSeatsResponse110(sectionId int64, fixedSeatReservation bool) *RouteSeatsResponse110 {
	this := RouteSeatsResponse110{}
	this.SectionId = sectionId
	this.FixedSeatReservation = fixedSeatReservation
	return &this
}

// NewRouteSeatsResponse110WithDefaults instantiates a new RouteSeatsResponse110 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteSeatsResponse110WithDefaults() *RouteSeatsResponse110 {
	this := RouteSeatsResponse110{}
	return &this
}

// GetSectionId returns the SectionId field value
func (o *RouteSeatsResponse110) GetSectionId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SectionId
}

// GetSectionIdOk returns a tuple with the SectionId field value
// and a boolean to check if the value has been set.
func (o *RouteSeatsResponse110) GetSectionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SectionId, true
}

// SetSectionId sets field value
func (o *RouteSeatsResponse110) SetSectionId(v int64) {
	o.SectionId = v
}

// GetFixedSeatReservation returns the FixedSeatReservation field value
func (o *RouteSeatsResponse110) GetFixedSeatReservation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FixedSeatReservation
}

// GetFixedSeatReservationOk returns a tuple with the FixedSeatReservation field value
// and a boolean to check if the value has been set.
func (o *RouteSeatsResponse110) GetFixedSeatReservationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FixedSeatReservation, true
}

// SetFixedSeatReservation sets field value
func (o *RouteSeatsResponse110) SetFixedSeatReservation(v bool) {
	o.FixedSeatReservation = v
}

// GetVehicles returns the Vehicles field value if set, zero value otherwise.
func (o *RouteSeatsResponse110) GetVehicles() []Vehicle110 {
	if o == nil || IsNil(o.Vehicles) {
		var ret []Vehicle110
		return ret
	}
	return o.Vehicles
}

// GetVehiclesOk returns a tuple with the Vehicles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSeatsResponse110) GetVehiclesOk() ([]Vehicle110, bool) {
	if o == nil || IsNil(o.Vehicles) {
		return nil, false
	}
	return o.Vehicles, true
}

// HasVehicles returns a boolean if a field has been set.
func (o *RouteSeatsResponse110) HasVehicles() bool {
	if o != nil && !IsNil(o.Vehicles) {
		return true
	}

	return false
}

// SetVehicles gets a reference to the given []Vehicle110 and assigns it to the Vehicles field.
func (o *RouteSeatsResponse110) SetVehicles(v []Vehicle110) {
	o.Vehicles = v
}

// GetSelectedSeats returns the SelectedSeats field value if set, zero value otherwise.
func (o *RouteSeatsResponse110) GetSelectedSeats() []SelectedSeat100 {
	if o == nil || IsNil(o.SelectedSeats) {
		var ret []SelectedSeat100
		return ret
	}
	return o.SelectedSeats
}

// GetSelectedSeatsOk returns a tuple with the SelectedSeats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSeatsResponse110) GetSelectedSeatsOk() ([]SelectedSeat100, bool) {
	if o == nil || IsNil(o.SelectedSeats) {
		return nil, false
	}
	return o.SelectedSeats, true
}

// HasSelectedSeats returns a boolean if a field has been set.
func (o *RouteSeatsResponse110) HasSelectedSeats() bool {
	if o != nil && !IsNil(o.SelectedSeats) {
		return true
	}

	return false
}

// SetSelectedSeats gets a reference to the given []SelectedSeat100 and assigns it to the SelectedSeats field.
func (o *RouteSeatsResponse110) SetSelectedSeats(v []SelectedSeat100) {
	o.SelectedSeats = v
}

func (o RouteSeatsResponse110) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteSeatsResponse110) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sectionId"] = o.SectionId
	toSerialize["fixedSeatReservation"] = o.FixedSeatReservation
	if !IsNil(o.Vehicles) {
		toSerialize["vehicles"] = o.Vehicles
	}
	if !IsNil(o.SelectedSeats) {
		toSerialize["selectedSeats"] = o.SelectedSeats
	}
	return toSerialize, nil
}

func (o *RouteSeatsResponse110) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sectionId",
		"fixedSeatReservation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRouteSeatsResponse110 := _RouteSeatsResponse110{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRouteSeatsResponse110)

	if err != nil {
		return err
	}

	*o = RouteSeatsResponse110(varRouteSeatsResponse110)

	return err
}

type NullableRouteSeatsResponse110 struct {
	value *RouteSeatsResponse110
	isSet bool
}

func (v NullableRouteSeatsResponse110) Get() *RouteSeatsResponse110 {
	return v.value
}

func (v *NullableRouteSeatsResponse110) Set(val *RouteSeatsResponse110) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteSeatsResponse110) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteSeatsResponse110) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteSeatsResponse110(val *RouteSeatsResponse110) *NullableRouteSeatsResponse110 {
	return &NullableRouteSeatsResponse110{value: val, isSet: true}
}

func (v NullableRouteSeatsResponse110) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteSeatsResponse110) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


