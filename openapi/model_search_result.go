/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers. 

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SearchResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchResult{}

// SearchResult struct for SearchResult
type SearchResult struct {
	Routes []RouteShort `json:"routes,omitempty"`
	// Message describing exceptionally behavior or route search states
	RoutesMessage *string `json:"routesMessage,omitempty"`
	BannerBubbles []BannerBubble `json:"bannerBubbles,omitempty"`
	TextBubbles []TextBubble `json:"textBubbles,omitempty"`
}

// NewSearchResult instantiates a new SearchResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResult() *SearchResult {
	this := SearchResult{}
	return &this
}

// NewSearchResultWithDefaults instantiates a new SearchResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResultWithDefaults() *SearchResult {
	this := SearchResult{}
	return &this
}

// GetRoutes returns the Routes field value if set, zero value otherwise.
func (o *SearchResult) GetRoutes() []RouteShort {
	if o == nil || IsNil(o.Routes) {
		var ret []RouteShort
		return ret
	}
	return o.Routes
}

// GetRoutesOk returns a tuple with the Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResult) GetRoutesOk() ([]RouteShort, bool) {
	if o == nil || IsNil(o.Routes) {
		return nil, false
	}
	return o.Routes, true
}

// HasRoutes returns a boolean if a field has been set.
func (o *SearchResult) HasRoutes() bool {
	if o != nil && !IsNil(o.Routes) {
		return true
	}

	return false
}

// SetRoutes gets a reference to the given []RouteShort and assigns it to the Routes field.
func (o *SearchResult) SetRoutes(v []RouteShort) {
	o.Routes = v
}

// GetRoutesMessage returns the RoutesMessage field value if set, zero value otherwise.
func (o *SearchResult) GetRoutesMessage() string {
	if o == nil || IsNil(o.RoutesMessage) {
		var ret string
		return ret
	}
	return *o.RoutesMessage
}

// GetRoutesMessageOk returns a tuple with the RoutesMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResult) GetRoutesMessageOk() (*string, bool) {
	if o == nil || IsNil(o.RoutesMessage) {
		return nil, false
	}
	return o.RoutesMessage, true
}

// HasRoutesMessage returns a boolean if a field has been set.
func (o *SearchResult) HasRoutesMessage() bool {
	if o != nil && !IsNil(o.RoutesMessage) {
		return true
	}

	return false
}

// SetRoutesMessage gets a reference to the given string and assigns it to the RoutesMessage field.
func (o *SearchResult) SetRoutesMessage(v string) {
	o.RoutesMessage = &v
}

// GetBannerBubbles returns the BannerBubbles field value if set, zero value otherwise.
func (o *SearchResult) GetBannerBubbles() []BannerBubble {
	if o == nil || IsNil(o.BannerBubbles) {
		var ret []BannerBubble
		return ret
	}
	return o.BannerBubbles
}

// GetBannerBubblesOk returns a tuple with the BannerBubbles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResult) GetBannerBubblesOk() ([]BannerBubble, bool) {
	if o == nil || IsNil(o.BannerBubbles) {
		return nil, false
	}
	return o.BannerBubbles, true
}

// HasBannerBubbles returns a boolean if a field has been set.
func (o *SearchResult) HasBannerBubbles() bool {
	if o != nil && !IsNil(o.BannerBubbles) {
		return true
	}

	return false
}

// SetBannerBubbles gets a reference to the given []BannerBubble and assigns it to the BannerBubbles field.
func (o *SearchResult) SetBannerBubbles(v []BannerBubble) {
	o.BannerBubbles = v
}

// GetTextBubbles returns the TextBubbles field value if set, zero value otherwise.
func (o *SearchResult) GetTextBubbles() []TextBubble {
	if o == nil || IsNil(o.TextBubbles) {
		var ret []TextBubble
		return ret
	}
	return o.TextBubbles
}

// GetTextBubblesOk returns a tuple with the TextBubbles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResult) GetTextBubblesOk() ([]TextBubble, bool) {
	if o == nil || IsNil(o.TextBubbles) {
		return nil, false
	}
	return o.TextBubbles, true
}

// HasTextBubbles returns a boolean if a field has been set.
func (o *SearchResult) HasTextBubbles() bool {
	if o != nil && !IsNil(o.TextBubbles) {
		return true
	}

	return false
}

// SetTextBubbles gets a reference to the given []TextBubble and assigns it to the TextBubbles field.
func (o *SearchResult) SetTextBubbles(v []TextBubble) {
	o.TextBubbles = v
}

func (o SearchResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Routes) {
		toSerialize["routes"] = o.Routes
	}
	if !IsNil(o.RoutesMessage) {
		toSerialize["routesMessage"] = o.RoutesMessage
	}
	if !IsNil(o.BannerBubbles) {
		toSerialize["bannerBubbles"] = o.BannerBubbles
	}
	if !IsNil(o.TextBubbles) {
		toSerialize["textBubbles"] = o.TextBubbles
	}
	return toSerialize, nil
}

type NullableSearchResult struct {
	value *SearchResult
	isSet bool
}

func (v NullableSearchResult) Get() *SearchResult {
	return v.value
}

func (v *NullableSearchResult) Set(val *SearchResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResult(val *SearchResult) *NullableSearchResult {
	return &NullableSearchResult{value: val, isSet: true}
}

func (v NullableSearchResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


