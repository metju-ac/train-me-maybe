/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Seat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Seat{}

// Seat struct for Seat
type Seat struct {
	// Number of seat in vehicle
	Index     *int64  `json:"index,omitempty"`
	SeatClass *string `json:"seatClass,omitempty"`
	// Notification which needs to be confirmed by customer before continue in reservation
	SeatConstraint *string `json:"seatConstraint,omitempty"`
	// Supplementary informations which are shown but isnt required to be confirmed
	SeatNotes []string `json:"seatNotes,omitempty"`
}

// NewSeat instantiates a new Seat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeat() *Seat {
	this := Seat{}
	return &this
}

// NewSeatWithDefaults instantiates a new Seat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeatWithDefaults() *Seat {
	this := Seat{}
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *Seat) GetIndex() int64 {
	if o == nil || IsNil(o.Index) {
		var ret int64
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Seat) GetIndexOk() (*int64, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *Seat) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int64 and assigns it to the Index field.
func (o *Seat) SetIndex(v int64) {
	o.Index = &v
}

// GetSeatClass returns the SeatClass field value if set, zero value otherwise.
func (o *Seat) GetSeatClass() string {
	if o == nil || IsNil(o.SeatClass) {
		var ret string
		return ret
	}
	return *o.SeatClass
}

// GetSeatClassOk returns a tuple with the SeatClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Seat) GetSeatClassOk() (*string, bool) {
	if o == nil || IsNil(o.SeatClass) {
		return nil, false
	}
	return o.SeatClass, true
}

// HasSeatClass returns a boolean if a field has been set.
func (o *Seat) HasSeatClass() bool {
	if o != nil && !IsNil(o.SeatClass) {
		return true
	}

	return false
}

// SetSeatClass gets a reference to the given string and assigns it to the SeatClass field.
func (o *Seat) SetSeatClass(v string) {
	o.SeatClass = &v
}

// GetSeatConstraint returns the SeatConstraint field value if set, zero value otherwise.
func (o *Seat) GetSeatConstraint() string {
	if o == nil || IsNil(o.SeatConstraint) {
		var ret string
		return ret
	}
	return *o.SeatConstraint
}

// GetSeatConstraintOk returns a tuple with the SeatConstraint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Seat) GetSeatConstraintOk() (*string, bool) {
	if o == nil || IsNil(o.SeatConstraint) {
		return nil, false
	}
	return o.SeatConstraint, true
}

// HasSeatConstraint returns a boolean if a field has been set.
func (o *Seat) HasSeatConstraint() bool {
	if o != nil && !IsNil(o.SeatConstraint) {
		return true
	}

	return false
}

// SetSeatConstraint gets a reference to the given string and assigns it to the SeatConstraint field.
func (o *Seat) SetSeatConstraint(v string) {
	o.SeatConstraint = &v
}

// GetSeatNotes returns the SeatNotes field value if set, zero value otherwise.
func (o *Seat) GetSeatNotes() []string {
	if o == nil || IsNil(o.SeatNotes) {
		var ret []string
		return ret
	}
	return o.SeatNotes
}

// GetSeatNotesOk returns a tuple with the SeatNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Seat) GetSeatNotesOk() ([]string, bool) {
	if o == nil || IsNil(o.SeatNotes) {
		return nil, false
	}
	return o.SeatNotes, true
}

// HasSeatNotes returns a boolean if a field has been set.
func (o *Seat) HasSeatNotes() bool {
	if o != nil && !IsNil(o.SeatNotes) {
		return true
	}

	return false
}

// SetSeatNotes gets a reference to the given []string and assigns it to the SeatNotes field.
func (o *Seat) SetSeatNotes(v []string) {
	o.SeatNotes = v
}

func (o Seat) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Seat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.SeatClass) {
		toSerialize["seatClass"] = o.SeatClass
	}
	if !IsNil(o.SeatConstraint) {
		toSerialize["seatConstraint"] = o.SeatConstraint
	}
	if !IsNil(o.SeatNotes) {
		toSerialize["seatNotes"] = o.SeatNotes
	}
	return toSerialize, nil
}

type NullableSeat struct {
	value *Seat
	isSet bool
}

func (v NullableSeat) Get() *Seat {
	return v.value
}

func (v *NullableSeat) Set(val *Seat) {
	v.value = val
	v.isSet = true
}

func (v NullableSeat) IsSet() bool {
	return v.isSet
}

func (v *NullableSeat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeat(val *Seat) *NullableSeat {
	return &NullableSeat{value: val, isSet: true}
}

func (v NullableSeat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
