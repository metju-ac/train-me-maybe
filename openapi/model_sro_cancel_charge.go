/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SroCancelCharge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SroCancelCharge{}

// SroCancelCharge struct for SroCancelCharge
type SroCancelCharge struct {
	Message  string  `json:"message"`
	Amount   float32 `json:"amount"`
	Currency string  `json:"currency"`
	Percent  int64   `json:"percent"`
}

type _SroCancelCharge SroCancelCharge

// NewSroCancelCharge instantiates a new SroCancelCharge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSroCancelCharge(message string, amount float32, currency string, percent int64) *SroCancelCharge {
	this := SroCancelCharge{}
	this.Message = message
	this.Amount = amount
	this.Currency = currency
	this.Percent = percent
	return &this
}

// NewSroCancelChargeWithDefaults instantiates a new SroCancelCharge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSroCancelChargeWithDefaults() *SroCancelCharge {
	this := SroCancelCharge{}
	return &this
}

// GetMessage returns the Message field value
func (o *SroCancelCharge) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *SroCancelCharge) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *SroCancelCharge) SetMessage(v string) {
	o.Message = v
}

// GetAmount returns the Amount field value
func (o *SroCancelCharge) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *SroCancelCharge) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *SroCancelCharge) SetAmount(v float32) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *SroCancelCharge) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *SroCancelCharge) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *SroCancelCharge) SetCurrency(v string) {
	o.Currency = v
}

// GetPercent returns the Percent field value
func (o *SroCancelCharge) GetPercent() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Percent
}

// GetPercentOk returns a tuple with the Percent field value
// and a boolean to check if the value has been set.
func (o *SroCancelCharge) GetPercentOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percent, true
}

// SetPercent sets field value
func (o *SroCancelCharge) SetPercent(v int64) {
	o.Percent = v
}

func (o SroCancelCharge) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SroCancelCharge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	toSerialize["amount"] = o.Amount
	toSerialize["currency"] = o.Currency
	toSerialize["percent"] = o.Percent
	return toSerialize, nil
}

func (o *SroCancelCharge) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
		"amount",
		"currency",
		"percent",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSroCancelCharge := _SroCancelCharge{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSroCancelCharge)

	if err != nil {
		return err
	}

	*o = SroCancelCharge(varSroCancelCharge)

	return err
}

type NullableSroCancelCharge struct {
	value *SroCancelCharge
	isSet bool
}

func (v NullableSroCancelCharge) Get() *SroCancelCharge {
	return v.value
}

func (v *NullableSroCancelCharge) Set(val *SroCancelCharge) {
	v.value = val
	v.isSet = true
}

func (v NullableSroCancelCharge) IsSet() bool {
	return v.isSet
}

func (v *NullableSroCancelCharge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSroCancelCharge(val *SroCancelCharge) *NullableSroCancelCharge {
	return &NullableSroCancelCharge{value: val, isSet: true}
}

func (v NullableSroCancelCharge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSroCancelCharge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
