/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the SroConditions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SroConditions{}

// SroConditions struct for SroConditions
type SroConditions struct {
	// CoolingOff Time for sro ticket
	CoolingOff time.Time `json:"coolingOff"`
	// Departure Cancel Time for sro ticket
	DepartureCancel time.Time `json:"departureCancel"`
	// Expiration Time for sro ticket
	Expiration time.Time `json:"expiration"`
	// Cancellation Fee price for sro ticket, addons etc.
	CancellationFee float32 `json:"cancellationFee"`
}

type _SroConditions SroConditions

// NewSroConditions instantiates a new SroConditions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSroConditions(coolingOff time.Time, departureCancel time.Time, expiration time.Time, cancellationFee float32) *SroConditions {
	this := SroConditions{}
	this.CoolingOff = coolingOff
	this.DepartureCancel = departureCancel
	this.Expiration = expiration
	this.CancellationFee = cancellationFee
	return &this
}

// NewSroConditionsWithDefaults instantiates a new SroConditions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSroConditionsWithDefaults() *SroConditions {
	this := SroConditions{}
	return &this
}

// GetCoolingOff returns the CoolingOff field value
func (o *SroConditions) GetCoolingOff() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CoolingOff
}

// GetCoolingOffOk returns a tuple with the CoolingOff field value
// and a boolean to check if the value has been set.
func (o *SroConditions) GetCoolingOffOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CoolingOff, true
}

// SetCoolingOff sets field value
func (o *SroConditions) SetCoolingOff(v time.Time) {
	o.CoolingOff = v
}

// GetDepartureCancel returns the DepartureCancel field value
func (o *SroConditions) GetDepartureCancel() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DepartureCancel
}

// GetDepartureCancelOk returns a tuple with the DepartureCancel field value
// and a boolean to check if the value has been set.
func (o *SroConditions) GetDepartureCancelOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepartureCancel, true
}

// SetDepartureCancel sets field value
func (o *SroConditions) SetDepartureCancel(v time.Time) {
	o.DepartureCancel = v
}

// GetExpiration returns the Expiration field value
func (o *SroConditions) GetExpiration() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value
// and a boolean to check if the value has been set.
func (o *SroConditions) GetExpirationOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expiration, true
}

// SetExpiration sets field value
func (o *SroConditions) SetExpiration(v time.Time) {
	o.Expiration = v
}

// GetCancellationFee returns the CancellationFee field value
func (o *SroConditions) GetCancellationFee() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CancellationFee
}

// GetCancellationFeeOk returns a tuple with the CancellationFee field value
// and a boolean to check if the value has been set.
func (o *SroConditions) GetCancellationFeeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CancellationFee, true
}

// SetCancellationFee sets field value
func (o *SroConditions) SetCancellationFee(v float32) {
	o.CancellationFee = v
}

func (o SroConditions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SroConditions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["coolingOff"] = o.CoolingOff
	toSerialize["departureCancel"] = o.DepartureCancel
	toSerialize["expiration"] = o.Expiration
	toSerialize["cancellationFee"] = o.CancellationFee
	return toSerialize, nil
}

func (o *SroConditions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"coolingOff",
		"departureCancel",
		"expiration",
		"cancellationFee",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSroConditions := _SroConditions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSroConditions)

	if err != nil {
		return err
	}

	*o = SroConditions(varSroConditions)

	return err
}

type NullableSroConditions struct {
	value *SroConditions
	isSet bool
}

func (v NullableSroConditions) Get() *SroConditions {
	return v.value
}

func (v *NullableSroConditions) Set(val *SroConditions) {
	v.value = val
	v.isSet = true
}

func (v NullableSroConditions) IsSet() bool {
	return v.isSet
}

func (v *NullableSroConditions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSroConditions(val *SroConditions) *NullableSroConditions {
	return &NullableSroConditions{value: val, isSet: true}
}

func (v NullableSroConditions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSroConditions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
