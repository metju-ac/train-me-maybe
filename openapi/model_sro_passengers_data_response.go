/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SroPassengersDataResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SroPassengersDataResponse{}

// SroPassengersDataResponse struct for SroPassengersDataResponse
type SroPassengersDataResponse struct {
	Mandatory []PassengersDataResponse `json:"mandatory"`
	Optional  []PassengersDataResponse `json:"optional"`
}

type _SroPassengersDataResponse SroPassengersDataResponse

// NewSroPassengersDataResponse instantiates a new SroPassengersDataResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSroPassengersDataResponse(mandatory []PassengersDataResponse, optional []PassengersDataResponse) *SroPassengersDataResponse {
	this := SroPassengersDataResponse{}
	this.Mandatory = mandatory
	this.Optional = optional
	return &this
}

// NewSroPassengersDataResponseWithDefaults instantiates a new SroPassengersDataResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSroPassengersDataResponseWithDefaults() *SroPassengersDataResponse {
	this := SroPassengersDataResponse{}
	return &this
}

// GetMandatory returns the Mandatory field value
func (o *SroPassengersDataResponse) GetMandatory() []PassengersDataResponse {
	if o == nil {
		var ret []PassengersDataResponse
		return ret
	}

	return o.Mandatory
}

// GetMandatoryOk returns a tuple with the Mandatory field value
// and a boolean to check if the value has been set.
func (o *SroPassengersDataResponse) GetMandatoryOk() ([]PassengersDataResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mandatory, true
}

// SetMandatory sets field value
func (o *SroPassengersDataResponse) SetMandatory(v []PassengersDataResponse) {
	o.Mandatory = v
}

// GetOptional returns the Optional field value
func (o *SroPassengersDataResponse) GetOptional() []PassengersDataResponse {
	if o == nil {
		var ret []PassengersDataResponse
		return ret
	}

	return o.Optional
}

// GetOptionalOk returns a tuple with the Optional field value
// and a boolean to check if the value has been set.
func (o *SroPassengersDataResponse) GetOptionalOk() ([]PassengersDataResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Optional, true
}

// SetOptional sets field value
func (o *SroPassengersDataResponse) SetOptional(v []PassengersDataResponse) {
	o.Optional = v
}

func (o SroPassengersDataResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SroPassengersDataResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mandatory"] = o.Mandatory
	toSerialize["optional"] = o.Optional
	return toSerialize, nil
}

func (o *SroPassengersDataResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mandatory",
		"optional",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSroPassengersDataResponse := _SroPassengersDataResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSroPassengersDataResponse)

	if err != nil {
		return err
	}

	*o = SroPassengersDataResponse(varSroPassengersDataResponse)

	return err
}

type NullableSroPassengersDataResponse struct {
	value *SroPassengersDataResponse
	isSet bool
}

func (v NullableSroPassengersDataResponse) Get() *SroPassengersDataResponse {
	return v.value
}

func (v *NullableSroPassengersDataResponse) Set(val *SroPassengersDataResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSroPassengersDataResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSroPassengersDataResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSroPassengersDataResponse(val *SroPassengersDataResponse) *NullableSroPassengersDataResponse {
	return &NullableSroPassengersDataResponse{value: val, isSet: true}
}

func (v NullableSroPassengersDataResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSroPassengersDataResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
