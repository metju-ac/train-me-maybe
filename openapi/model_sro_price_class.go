/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SroPriceClass type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SroPriceClass{}

// SroPriceClass struct for SroPriceClass
type SroPriceClass struct {
	// Seat class code.
	SeatClassKey       string             `json:"seatClassKey"`
	FreeSeatsCount     int64              `json:"freeSeatsCount"`
	Price              float32            `json:"price"`
	PriceSource        string             `json:"priceSource"`
	NumberOfPassengers int64              `json:"numberOfPassengers"`
	Conditions         SroPriceConditions `json:"conditions"`
}

type _SroPriceClass SroPriceClass

// NewSroPriceClass instantiates a new SroPriceClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSroPriceClass(seatClassKey string, freeSeatsCount int64, price float32, priceSource string, numberOfPassengers int64, conditions SroPriceConditions) *SroPriceClass {
	this := SroPriceClass{}
	this.SeatClassKey = seatClassKey
	this.FreeSeatsCount = freeSeatsCount
	this.Price = price
	this.PriceSource = priceSource
	this.NumberOfPassengers = numberOfPassengers
	this.Conditions = conditions
	return &this
}

// NewSroPriceClassWithDefaults instantiates a new SroPriceClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSroPriceClassWithDefaults() *SroPriceClass {
	this := SroPriceClass{}
	return &this
}

// GetSeatClassKey returns the SeatClassKey field value
func (o *SroPriceClass) GetSeatClassKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SeatClassKey
}

// GetSeatClassKeyOk returns a tuple with the SeatClassKey field value
// and a boolean to check if the value has been set.
func (o *SroPriceClass) GetSeatClassKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeatClassKey, true
}

// SetSeatClassKey sets field value
func (o *SroPriceClass) SetSeatClassKey(v string) {
	o.SeatClassKey = v
}

// GetFreeSeatsCount returns the FreeSeatsCount field value
func (o *SroPriceClass) GetFreeSeatsCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FreeSeatsCount
}

// GetFreeSeatsCountOk returns a tuple with the FreeSeatsCount field value
// and a boolean to check if the value has been set.
func (o *SroPriceClass) GetFreeSeatsCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FreeSeatsCount, true
}

// SetFreeSeatsCount sets field value
func (o *SroPriceClass) SetFreeSeatsCount(v int64) {
	o.FreeSeatsCount = v
}

// GetPrice returns the Price field value
func (o *SroPriceClass) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *SroPriceClass) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *SroPriceClass) SetPrice(v float32) {
	o.Price = v
}

// GetPriceSource returns the PriceSource field value
func (o *SroPriceClass) GetPriceSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PriceSource
}

// GetPriceSourceOk returns a tuple with the PriceSource field value
// and a boolean to check if the value has been set.
func (o *SroPriceClass) GetPriceSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceSource, true
}

// SetPriceSource sets field value
func (o *SroPriceClass) SetPriceSource(v string) {
	o.PriceSource = v
}

// GetNumberOfPassengers returns the NumberOfPassengers field value
func (o *SroPriceClass) GetNumberOfPassengers() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NumberOfPassengers
}

// GetNumberOfPassengersOk returns a tuple with the NumberOfPassengers field value
// and a boolean to check if the value has been set.
func (o *SroPriceClass) GetNumberOfPassengersOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberOfPassengers, true
}

// SetNumberOfPassengers sets field value
func (o *SroPriceClass) SetNumberOfPassengers(v int64) {
	o.NumberOfPassengers = v
}

// GetConditions returns the Conditions field value
func (o *SroPriceClass) GetConditions() SroPriceConditions {
	if o == nil {
		var ret SroPriceConditions
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *SroPriceClass) GetConditionsOk() (*SroPriceConditions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Conditions, true
}

// SetConditions sets field value
func (o *SroPriceClass) SetConditions(v SroPriceConditions) {
	o.Conditions = v
}

func (o SroPriceClass) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SroPriceClass) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["seatClassKey"] = o.SeatClassKey
	toSerialize["freeSeatsCount"] = o.FreeSeatsCount
	toSerialize["price"] = o.Price
	toSerialize["priceSource"] = o.PriceSource
	toSerialize["numberOfPassengers"] = o.NumberOfPassengers
	toSerialize["conditions"] = o.Conditions
	return toSerialize, nil
}

func (o *SroPriceClass) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"seatClassKey",
		"freeSeatsCount",
		"price",
		"priceSource",
		"numberOfPassengers",
		"conditions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSroPriceClass := _SroPriceClass{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSroPriceClass)

	if err != nil {
		return err
	}

	*o = SroPriceClass(varSroPriceClass)

	return err
}

type NullableSroPriceClass struct {
	value *SroPriceClass
	isSet bool
}

func (v NullableSroPriceClass) Get() *SroPriceClass {
	return v.value
}

func (v *NullableSroPriceClass) Set(val *SroPriceClass) {
	v.value = val
	v.isSet = true
}

func (v NullableSroPriceClass) IsSet() bool {
	return v.isSet
}

func (v *NullableSroPriceClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSroPriceClass(val *SroPriceClass) *NullableSroPriceClass {
	return &NullableSroPriceClass{value: val, isSet: true}
}

func (v NullableSroPriceClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSroPriceClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
