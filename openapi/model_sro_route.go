/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the SroRoute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SroRoute{}

// SroRoute struct for SroRoute
type SroRoute struct {
	// Comma-separated list of route section identifiers.
	Id string `json:"id"`
	// Connection code, as recognized by an external entity (e.g. OneTicket), not bound to any format.
	ConnectionCode string `json:"connectionCode"`
	// Numeric and unique representation of the departure station.
	DepartureStationId int64 `json:"departureStationId"`
	// Departure time in the ISO 8601 format.
	DepartureTime time.Time `json:"departureTime"`
	// Numeric and unique representation of the arrival station.
	ArrivalStationId *int64 `json:"arrivalStationId,omitempty"`
	// Arrival time in the ISO 8601 format.
	ArrivalTime time.Time `json:"arrivalTime"`
	// Array of vehicle types.
	VehicleTypes []VehicleType `json:"vehicleTypes"`
	// Number of transfers.
	TransfersCount *int32 `json:"transfersCount,omitempty"`
	// Price of the least expensive route.
	PriceFrom float32 `json:"priceFrom"`
	// Price of the most expensive route.
	PriceTo *float32 `json:"priceTo,omitempty"`
	// Number of returned prices.
	PricesCount int32 `json:"pricesCount"`
	// Are there any traffic limitations or extraordinary events on the route?
	Notices bool `json:"notices"`
	// Does this line have a support connection?
	Support bool `json:"support"`
	// Is this trip international?
	NationalTrip *bool `json:"nationalTrip,omitempty"`
	// Information about the first delay on the route in the 'HH:MM \\h' format.
	Delay *string `json:"delay,omitempty"`
	// Travel time in the 'HH:MM \\h' format.
	TravelTime *string `json:"travelTime,omitempty"`
	// Vehicle standard code.
	VehicleStandardKey *string `json:"vehicleStandardKey,omitempty"`
}

type _SroRoute SroRoute

// NewSroRoute instantiates a new SroRoute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSroRoute(id string, connectionCode string, departureStationId int64, departureTime time.Time, arrivalTime time.Time, vehicleTypes []VehicleType, priceFrom float32, pricesCount int32, notices bool, support bool) *SroRoute {
	this := SroRoute{}
	this.Id = id
	this.ConnectionCode = connectionCode
	this.DepartureStationId = departureStationId
	this.DepartureTime = departureTime
	this.ArrivalTime = arrivalTime
	this.VehicleTypes = vehicleTypes
	this.PriceFrom = priceFrom
	this.PricesCount = pricesCount
	this.Notices = notices
	this.Support = support
	return &this
}

// NewSroRouteWithDefaults instantiates a new SroRoute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSroRouteWithDefaults() *SroRoute {
	this := SroRoute{}
	return &this
}

// GetId returns the Id field value
func (o *SroRoute) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SroRoute) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SroRoute) SetId(v string) {
	o.Id = v
}

// GetConnectionCode returns the ConnectionCode field value
func (o *SroRoute) GetConnectionCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionCode
}

// GetConnectionCodeOk returns a tuple with the ConnectionCode field value
// and a boolean to check if the value has been set.
func (o *SroRoute) GetConnectionCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionCode, true
}

// SetConnectionCode sets field value
func (o *SroRoute) SetConnectionCode(v string) {
	o.ConnectionCode = v
}

// GetDepartureStationId returns the DepartureStationId field value
func (o *SroRoute) GetDepartureStationId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DepartureStationId
}

// GetDepartureStationIdOk returns a tuple with the DepartureStationId field value
// and a boolean to check if the value has been set.
func (o *SroRoute) GetDepartureStationIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepartureStationId, true
}

// SetDepartureStationId sets field value
func (o *SroRoute) SetDepartureStationId(v int64) {
	o.DepartureStationId = v
}

// GetDepartureTime returns the DepartureTime field value
func (o *SroRoute) GetDepartureTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DepartureTime
}

// GetDepartureTimeOk returns a tuple with the DepartureTime field value
// and a boolean to check if the value has been set.
func (o *SroRoute) GetDepartureTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepartureTime, true
}

// SetDepartureTime sets field value
func (o *SroRoute) SetDepartureTime(v time.Time) {
	o.DepartureTime = v
}

// GetArrivalStationId returns the ArrivalStationId field value if set, zero value otherwise.
func (o *SroRoute) GetArrivalStationId() int64 {
	if o == nil || IsNil(o.ArrivalStationId) {
		var ret int64
		return ret
	}
	return *o.ArrivalStationId
}

// GetArrivalStationIdOk returns a tuple with the ArrivalStationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SroRoute) GetArrivalStationIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ArrivalStationId) {
		return nil, false
	}
	return o.ArrivalStationId, true
}

// HasArrivalStationId returns a boolean if a field has been set.
func (o *SroRoute) HasArrivalStationId() bool {
	if o != nil && !IsNil(o.ArrivalStationId) {
		return true
	}

	return false
}

// SetArrivalStationId gets a reference to the given int64 and assigns it to the ArrivalStationId field.
func (o *SroRoute) SetArrivalStationId(v int64) {
	o.ArrivalStationId = &v
}

// GetArrivalTime returns the ArrivalTime field value
func (o *SroRoute) GetArrivalTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ArrivalTime
}

// GetArrivalTimeOk returns a tuple with the ArrivalTime field value
// and a boolean to check if the value has been set.
func (o *SroRoute) GetArrivalTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArrivalTime, true
}

// SetArrivalTime sets field value
func (o *SroRoute) SetArrivalTime(v time.Time) {
	o.ArrivalTime = v
}

// GetVehicleTypes returns the VehicleTypes field value
func (o *SroRoute) GetVehicleTypes() []VehicleType {
	if o == nil {
		var ret []VehicleType
		return ret
	}

	return o.VehicleTypes
}

// GetVehicleTypesOk returns a tuple with the VehicleTypes field value
// and a boolean to check if the value has been set.
func (o *SroRoute) GetVehicleTypesOk() ([]VehicleType, bool) {
	if o == nil {
		return nil, false
	}
	return o.VehicleTypes, true
}

// SetVehicleTypes sets field value
func (o *SroRoute) SetVehicleTypes(v []VehicleType) {
	o.VehicleTypes = v
}

// GetTransfersCount returns the TransfersCount field value if set, zero value otherwise.
func (o *SroRoute) GetTransfersCount() int32 {
	if o == nil || IsNil(o.TransfersCount) {
		var ret int32
		return ret
	}
	return *o.TransfersCount
}

// GetTransfersCountOk returns a tuple with the TransfersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SroRoute) GetTransfersCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TransfersCount) {
		return nil, false
	}
	return o.TransfersCount, true
}

// HasTransfersCount returns a boolean if a field has been set.
func (o *SroRoute) HasTransfersCount() bool {
	if o != nil && !IsNil(o.TransfersCount) {
		return true
	}

	return false
}

// SetTransfersCount gets a reference to the given int32 and assigns it to the TransfersCount field.
func (o *SroRoute) SetTransfersCount(v int32) {
	o.TransfersCount = &v
}

// GetPriceFrom returns the PriceFrom field value
func (o *SroRoute) GetPriceFrom() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PriceFrom
}

// GetPriceFromOk returns a tuple with the PriceFrom field value
// and a boolean to check if the value has been set.
func (o *SroRoute) GetPriceFromOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceFrom, true
}

// SetPriceFrom sets field value
func (o *SroRoute) SetPriceFrom(v float32) {
	o.PriceFrom = v
}

// GetPriceTo returns the PriceTo field value if set, zero value otherwise.
func (o *SroRoute) GetPriceTo() float32 {
	if o == nil || IsNil(o.PriceTo) {
		var ret float32
		return ret
	}
	return *o.PriceTo
}

// GetPriceToOk returns a tuple with the PriceTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SroRoute) GetPriceToOk() (*float32, bool) {
	if o == nil || IsNil(o.PriceTo) {
		return nil, false
	}
	return o.PriceTo, true
}

// HasPriceTo returns a boolean if a field has been set.
func (o *SroRoute) HasPriceTo() bool {
	if o != nil && !IsNil(o.PriceTo) {
		return true
	}

	return false
}

// SetPriceTo gets a reference to the given float32 and assigns it to the PriceTo field.
func (o *SroRoute) SetPriceTo(v float32) {
	o.PriceTo = &v
}

// GetPricesCount returns the PricesCount field value
func (o *SroRoute) GetPricesCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PricesCount
}

// GetPricesCountOk returns a tuple with the PricesCount field value
// and a boolean to check if the value has been set.
func (o *SroRoute) GetPricesCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PricesCount, true
}

// SetPricesCount sets field value
func (o *SroRoute) SetPricesCount(v int32) {
	o.PricesCount = v
}

// GetNotices returns the Notices field value
func (o *SroRoute) GetNotices() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Notices
}

// GetNoticesOk returns a tuple with the Notices field value
// and a boolean to check if the value has been set.
func (o *SroRoute) GetNoticesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Notices, true
}

// SetNotices sets field value
func (o *SroRoute) SetNotices(v bool) {
	o.Notices = v
}

// GetSupport returns the Support field value
func (o *SroRoute) GetSupport() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Support
}

// GetSupportOk returns a tuple with the Support field value
// and a boolean to check if the value has been set.
func (o *SroRoute) GetSupportOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Support, true
}

// SetSupport sets field value
func (o *SroRoute) SetSupport(v bool) {
	o.Support = v
}

// GetNationalTrip returns the NationalTrip field value if set, zero value otherwise.
func (o *SroRoute) GetNationalTrip() bool {
	if o == nil || IsNil(o.NationalTrip) {
		var ret bool
		return ret
	}
	return *o.NationalTrip
}

// GetNationalTripOk returns a tuple with the NationalTrip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SroRoute) GetNationalTripOk() (*bool, bool) {
	if o == nil || IsNil(o.NationalTrip) {
		return nil, false
	}
	return o.NationalTrip, true
}

// HasNationalTrip returns a boolean if a field has been set.
func (o *SroRoute) HasNationalTrip() bool {
	if o != nil && !IsNil(o.NationalTrip) {
		return true
	}

	return false
}

// SetNationalTrip gets a reference to the given bool and assigns it to the NationalTrip field.
func (o *SroRoute) SetNationalTrip(v bool) {
	o.NationalTrip = &v
}

// GetDelay returns the Delay field value if set, zero value otherwise.
func (o *SroRoute) GetDelay() string {
	if o == nil || IsNil(o.Delay) {
		var ret string
		return ret
	}
	return *o.Delay
}

// GetDelayOk returns a tuple with the Delay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SroRoute) GetDelayOk() (*string, bool) {
	if o == nil || IsNil(o.Delay) {
		return nil, false
	}
	return o.Delay, true
}

// HasDelay returns a boolean if a field has been set.
func (o *SroRoute) HasDelay() bool {
	if o != nil && !IsNil(o.Delay) {
		return true
	}

	return false
}

// SetDelay gets a reference to the given string and assigns it to the Delay field.
func (o *SroRoute) SetDelay(v string) {
	o.Delay = &v
}

// GetTravelTime returns the TravelTime field value if set, zero value otherwise.
func (o *SroRoute) GetTravelTime() string {
	if o == nil || IsNil(o.TravelTime) {
		var ret string
		return ret
	}
	return *o.TravelTime
}

// GetTravelTimeOk returns a tuple with the TravelTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SroRoute) GetTravelTimeOk() (*string, bool) {
	if o == nil || IsNil(o.TravelTime) {
		return nil, false
	}
	return o.TravelTime, true
}

// HasTravelTime returns a boolean if a field has been set.
func (o *SroRoute) HasTravelTime() bool {
	if o != nil && !IsNil(o.TravelTime) {
		return true
	}

	return false
}

// SetTravelTime gets a reference to the given string and assigns it to the TravelTime field.
func (o *SroRoute) SetTravelTime(v string) {
	o.TravelTime = &v
}

// GetVehicleStandardKey returns the VehicleStandardKey field value if set, zero value otherwise.
func (o *SroRoute) GetVehicleStandardKey() string {
	if o == nil || IsNil(o.VehicleStandardKey) {
		var ret string
		return ret
	}
	return *o.VehicleStandardKey
}

// GetVehicleStandardKeyOk returns a tuple with the VehicleStandardKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SroRoute) GetVehicleStandardKeyOk() (*string, bool) {
	if o == nil || IsNil(o.VehicleStandardKey) {
		return nil, false
	}
	return o.VehicleStandardKey, true
}

// HasVehicleStandardKey returns a boolean if a field has been set.
func (o *SroRoute) HasVehicleStandardKey() bool {
	if o != nil && !IsNil(o.VehicleStandardKey) {
		return true
	}

	return false
}

// SetVehicleStandardKey gets a reference to the given string and assigns it to the VehicleStandardKey field.
func (o *SroRoute) SetVehicleStandardKey(v string) {
	o.VehicleStandardKey = &v
}

func (o SroRoute) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SroRoute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["connectionCode"] = o.ConnectionCode
	toSerialize["departureStationId"] = o.DepartureStationId
	toSerialize["departureTime"] = o.DepartureTime
	if !IsNil(o.ArrivalStationId) {
		toSerialize["arrivalStationId"] = o.ArrivalStationId
	}
	toSerialize["arrivalTime"] = o.ArrivalTime
	toSerialize["vehicleTypes"] = o.VehicleTypes
	if !IsNil(o.TransfersCount) {
		toSerialize["transfersCount"] = o.TransfersCount
	}
	toSerialize["priceFrom"] = o.PriceFrom
	if !IsNil(o.PriceTo) {
		toSerialize["priceTo"] = o.PriceTo
	}
	toSerialize["pricesCount"] = o.PricesCount
	toSerialize["notices"] = o.Notices
	toSerialize["support"] = o.Support
	if !IsNil(o.NationalTrip) {
		toSerialize["nationalTrip"] = o.NationalTrip
	}
	if !IsNil(o.Delay) {
		toSerialize["delay"] = o.Delay
	}
	if !IsNil(o.TravelTime) {
		toSerialize["travelTime"] = o.TravelTime
	}
	if !IsNil(o.VehicleStandardKey) {
		toSerialize["vehicleStandardKey"] = o.VehicleStandardKey
	}
	return toSerialize, nil
}

func (o *SroRoute) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"connectionCode",
		"departureStationId",
		"departureTime",
		"arrivalTime",
		"vehicleTypes",
		"priceFrom",
		"pricesCount",
		"notices",
		"support",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSroRoute := _SroRoute{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSroRoute)

	if err != nil {
		return err
	}

	*o = SroRoute(varSroRoute)

	return err
}

type NullableSroRoute struct {
	value *SroRoute
	isSet bool
}

func (v NullableSroRoute) Get() *SroRoute {
	return v.value
}

func (v *NullableSroRoute) Set(val *SroRoute) {
	v.value = val
	v.isSet = true
}

func (v NullableSroRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableSroRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSroRoute(val *SroRoute) *NullableSroRoute {
	return &NullableSroRoute{value: val, isSet: true}
}

func (v NullableSroRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSroRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
