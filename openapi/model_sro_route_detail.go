/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers. 

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SroRouteDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SroRouteDetail{}

// SroRouteDetail struct for SroRouteDetail
type SroRouteDetail struct {
	// {section0.id},{section1.id}, ...
	Id string `json:"id"`
	PriceClasses []SroPriceClass `json:"priceClasses"`
}

type _SroRouteDetail SroRouteDetail

// NewSroRouteDetail instantiates a new SroRouteDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSroRouteDetail(id string, priceClasses []SroPriceClass) *SroRouteDetail {
	this := SroRouteDetail{}
	this.Id = id
	this.PriceClasses = priceClasses
	return &this
}

// NewSroRouteDetailWithDefaults instantiates a new SroRouteDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSroRouteDetailWithDefaults() *SroRouteDetail {
	this := SroRouteDetail{}
	return &this
}

// GetId returns the Id field value
func (o *SroRouteDetail) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SroRouteDetail) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SroRouteDetail) SetId(v string) {
	o.Id = v
}

// GetPriceClasses returns the PriceClasses field value
func (o *SroRouteDetail) GetPriceClasses() []SroPriceClass {
	if o == nil {
		var ret []SroPriceClass
		return ret
	}

	return o.PriceClasses
}

// GetPriceClassesOk returns a tuple with the PriceClasses field value
// and a boolean to check if the value has been set.
func (o *SroRouteDetail) GetPriceClassesOk() ([]SroPriceClass, bool) {
	if o == nil {
		return nil, false
	}
	return o.PriceClasses, true
}

// SetPriceClasses sets field value
func (o *SroRouteDetail) SetPriceClasses(v []SroPriceClass) {
	o.PriceClasses = v
}

func (o SroRouteDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SroRouteDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["priceClasses"] = o.PriceClasses
	return toSerialize, nil
}

func (o *SroRouteDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"priceClasses",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSroRouteDetail := _SroRouteDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSroRouteDetail)

	if err != nil {
		return err
	}

	*o = SroRouteDetail(varSroRouteDetail)

	return err
}

type NullableSroRouteDetail struct {
	value *SroRouteDetail
	isSet bool
}

func (v NullableSroRouteDetail) Get() *SroRouteDetail {
	return v.value
}

func (v *NullableSroRouteDetail) Set(val *SroRouteDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableSroRouteDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableSroRouteDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSroRouteDetail(val *SroRouteDetail) *NullableSroRouteDetail {
	return &NullableSroRouteDetail{value: val, isSet: true}
}

func (v NullableSroRouteDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSroRouteDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


