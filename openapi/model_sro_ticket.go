/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the SroTicket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SroTicket{}

// SroTicket struct for SroTicket
type SroTicket struct {
	SroTicketId int64 `json:"sroTicketId"`
	// Final price for ticket, addons etc.
	Price float32 `json:"price"`
	// Final price to be paid
	Unpaid          float32           `json:"unpaid"`
	Currency        Currency          `json:"currency"`
	State           TicketState       `json:"state"`
	SeatClassKey    string            `json:"seatClassKey"`
	Conditions      SroConditions     `json:"conditions"`
	CustomerActions CustomerActions   `json:"customerActions"`
	RouteSections   []TicketSection   `json:"routeSections"`
	PaymentId       int64             `json:"paymentId"`
	Bills           []TicketBill      `json:"bills"`
	PassengersInfo  SroPassengersInfo `json:"passengersInfo"`
	// Textual information about the first delay on the route.
	Delay string `json:"delay"`
	// Textual information about the travel time on a given section.
	TravelTime           string    `json:"travelTime"`
	EstimatedArrivalTime time.Time `json:"estimatedArrivalTime"`
	// Was the ticket created by an affiliate partner?
	AffiliateTicket bool `json:"affiliateTicket"`
}

type _SroTicket SroTicket

// NewSroTicket instantiates a new SroTicket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSroTicket(sroTicketId int64, price float32, unpaid float32, currency Currency, state TicketState, seatClassKey string, conditions SroConditions, customerActions CustomerActions, routeSections []TicketSection, paymentId int64, bills []TicketBill, passengersInfo SroPassengersInfo, delay string, travelTime string, estimatedArrivalTime time.Time, affiliateTicket bool) *SroTicket {
	this := SroTicket{}
	this.SroTicketId = sroTicketId
	this.Price = price
	this.Unpaid = unpaid
	this.Currency = currency
	this.State = state
	this.SeatClassKey = seatClassKey
	this.Conditions = conditions
	this.CustomerActions = customerActions
	this.RouteSections = routeSections
	this.PaymentId = paymentId
	this.Bills = bills
	this.PassengersInfo = passengersInfo
	this.Delay = delay
	this.TravelTime = travelTime
	this.EstimatedArrivalTime = estimatedArrivalTime
	this.AffiliateTicket = affiliateTicket
	return &this
}

// NewSroTicketWithDefaults instantiates a new SroTicket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSroTicketWithDefaults() *SroTicket {
	this := SroTicket{}
	var currency Currency = EUR
	this.Currency = currency
	return &this
}

// GetSroTicketId returns the SroTicketId field value
func (o *SroTicket) GetSroTicketId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SroTicketId
}

// GetSroTicketIdOk returns a tuple with the SroTicketId field value
// and a boolean to check if the value has been set.
func (o *SroTicket) GetSroTicketIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SroTicketId, true
}

// SetSroTicketId sets field value
func (o *SroTicket) SetSroTicketId(v int64) {
	o.SroTicketId = v
}

// GetPrice returns the Price field value
func (o *SroTicket) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *SroTicket) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *SroTicket) SetPrice(v float32) {
	o.Price = v
}

// GetUnpaid returns the Unpaid field value
func (o *SroTicket) GetUnpaid() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Unpaid
}

// GetUnpaidOk returns a tuple with the Unpaid field value
// and a boolean to check if the value has been set.
func (o *SroTicket) GetUnpaidOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unpaid, true
}

// SetUnpaid sets field value
func (o *SroTicket) SetUnpaid(v float32) {
	o.Unpaid = v
}

// GetCurrency returns the Currency field value
func (o *SroTicket) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *SroTicket) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *SroTicket) SetCurrency(v Currency) {
	o.Currency = v
}

// GetState returns the State field value
func (o *SroTicket) GetState() TicketState {
	if o == nil {
		var ret TicketState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *SroTicket) GetStateOk() (*TicketState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *SroTicket) SetState(v TicketState) {
	o.State = v
}

// GetSeatClassKey returns the SeatClassKey field value
func (o *SroTicket) GetSeatClassKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SeatClassKey
}

// GetSeatClassKeyOk returns a tuple with the SeatClassKey field value
// and a boolean to check if the value has been set.
func (o *SroTicket) GetSeatClassKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeatClassKey, true
}

// SetSeatClassKey sets field value
func (o *SroTicket) SetSeatClassKey(v string) {
	o.SeatClassKey = v
}

// GetConditions returns the Conditions field value
func (o *SroTicket) GetConditions() SroConditions {
	if o == nil {
		var ret SroConditions
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *SroTicket) GetConditionsOk() (*SroConditions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Conditions, true
}

// SetConditions sets field value
func (o *SroTicket) SetConditions(v SroConditions) {
	o.Conditions = v
}

// GetCustomerActions returns the CustomerActions field value
func (o *SroTicket) GetCustomerActions() CustomerActions {
	if o == nil {
		var ret CustomerActions
		return ret
	}

	return o.CustomerActions
}

// GetCustomerActionsOk returns a tuple with the CustomerActions field value
// and a boolean to check if the value has been set.
func (o *SroTicket) GetCustomerActionsOk() (*CustomerActions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerActions, true
}

// SetCustomerActions sets field value
func (o *SroTicket) SetCustomerActions(v CustomerActions) {
	o.CustomerActions = v
}

// GetRouteSections returns the RouteSections field value
func (o *SroTicket) GetRouteSections() []TicketSection {
	if o == nil {
		var ret []TicketSection
		return ret
	}

	return o.RouteSections
}

// GetRouteSectionsOk returns a tuple with the RouteSections field value
// and a boolean to check if the value has been set.
func (o *SroTicket) GetRouteSectionsOk() ([]TicketSection, bool) {
	if o == nil {
		return nil, false
	}
	return o.RouteSections, true
}

// SetRouteSections sets field value
func (o *SroTicket) SetRouteSections(v []TicketSection) {
	o.RouteSections = v
}

// GetPaymentId returns the PaymentId field value
func (o *SroTicket) GetPaymentId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PaymentId
}

// GetPaymentIdOk returns a tuple with the PaymentId field value
// and a boolean to check if the value has been set.
func (o *SroTicket) GetPaymentIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentId, true
}

// SetPaymentId sets field value
func (o *SroTicket) SetPaymentId(v int64) {
	o.PaymentId = v
}

// GetBills returns the Bills field value
func (o *SroTicket) GetBills() []TicketBill {
	if o == nil {
		var ret []TicketBill
		return ret
	}

	return o.Bills
}

// GetBillsOk returns a tuple with the Bills field value
// and a boolean to check if the value has been set.
func (o *SroTicket) GetBillsOk() ([]TicketBill, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bills, true
}

// SetBills sets field value
func (o *SroTicket) SetBills(v []TicketBill) {
	o.Bills = v
}

// GetPassengersInfo returns the PassengersInfo field value
func (o *SroTicket) GetPassengersInfo() SroPassengersInfo {
	if o == nil {
		var ret SroPassengersInfo
		return ret
	}

	return o.PassengersInfo
}

// GetPassengersInfoOk returns a tuple with the PassengersInfo field value
// and a boolean to check if the value has been set.
func (o *SroTicket) GetPassengersInfoOk() (*SroPassengersInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PassengersInfo, true
}

// SetPassengersInfo sets field value
func (o *SroTicket) SetPassengersInfo(v SroPassengersInfo) {
	o.PassengersInfo = v
}

// GetDelay returns the Delay field value
func (o *SroTicket) GetDelay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Delay
}

// GetDelayOk returns a tuple with the Delay field value
// and a boolean to check if the value has been set.
func (o *SroTicket) GetDelayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Delay, true
}

// SetDelay sets field value
func (o *SroTicket) SetDelay(v string) {
	o.Delay = v
}

// GetTravelTime returns the TravelTime field value
func (o *SroTicket) GetTravelTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TravelTime
}

// GetTravelTimeOk returns a tuple with the TravelTime field value
// and a boolean to check if the value has been set.
func (o *SroTicket) GetTravelTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TravelTime, true
}

// SetTravelTime sets field value
func (o *SroTicket) SetTravelTime(v string) {
	o.TravelTime = v
}

// GetEstimatedArrivalTime returns the EstimatedArrivalTime field value
func (o *SroTicket) GetEstimatedArrivalTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EstimatedArrivalTime
}

// GetEstimatedArrivalTimeOk returns a tuple with the EstimatedArrivalTime field value
// and a boolean to check if the value has been set.
func (o *SroTicket) GetEstimatedArrivalTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EstimatedArrivalTime, true
}

// SetEstimatedArrivalTime sets field value
func (o *SroTicket) SetEstimatedArrivalTime(v time.Time) {
	o.EstimatedArrivalTime = v
}

// GetAffiliateTicket returns the AffiliateTicket field value
func (o *SroTicket) GetAffiliateTicket() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AffiliateTicket
}

// GetAffiliateTicketOk returns a tuple with the AffiliateTicket field value
// and a boolean to check if the value has been set.
func (o *SroTicket) GetAffiliateTicketOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AffiliateTicket, true
}

// SetAffiliateTicket sets field value
func (o *SroTicket) SetAffiliateTicket(v bool) {
	o.AffiliateTicket = v
}

func (o SroTicket) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SroTicket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sroTicketId"] = o.SroTicketId
	toSerialize["price"] = o.Price
	toSerialize["unpaid"] = o.Unpaid
	toSerialize["currency"] = o.Currency
	toSerialize["state"] = o.State
	toSerialize["seatClassKey"] = o.SeatClassKey
	toSerialize["conditions"] = o.Conditions
	toSerialize["customerActions"] = o.CustomerActions
	toSerialize["routeSections"] = o.RouteSections
	toSerialize["paymentId"] = o.PaymentId
	toSerialize["bills"] = o.Bills
	toSerialize["passengersInfo"] = o.PassengersInfo
	toSerialize["delay"] = o.Delay
	toSerialize["travelTime"] = o.TravelTime
	toSerialize["estimatedArrivalTime"] = o.EstimatedArrivalTime
	toSerialize["affiliateTicket"] = o.AffiliateTicket
	return toSerialize, nil
}

func (o *SroTicket) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sroTicketId",
		"price",
		"unpaid",
		"currency",
		"state",
		"seatClassKey",
		"conditions",
		"customerActions",
		"routeSections",
		"paymentId",
		"bills",
		"passengersInfo",
		"delay",
		"travelTime",
		"estimatedArrivalTime",
		"affiliateTicket",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSroTicket := _SroTicket{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSroTicket)

	if err != nil {
		return err
	}

	*o = SroTicket(varSroTicket)

	return err
}

type NullableSroTicket struct {
	value *SroTicket
	isSet bool
}

func (v NullableSroTicket) Get() *SroTicket {
	return v.value
}

func (v *NullableSroTicket) Set(val *SroTicket) {
	v.value = val
	v.isSet = true
}

func (v NullableSroTicket) IsSet() bool {
	return v.isSet
}

func (v *NullableSroTicket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSroTicket(val *SroTicket) *NullableSroTicket {
	return &NullableSroTicket{value: val, isSet: true}
}

func (v NullableSroTicket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSroTicket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
