/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SroTicketPassenger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SroTicketPassenger{}

// SroTicketPassenger struct for SroTicketPassenger
type SroTicketPassenger struct {
	Id          int64  `json:"id"`
	FirstName   string `json:"firstName"`
	LastName    string `json:"lastName"`
	Phone       string `json:"phone"`
	Email       string `json:"email"`
	DateOfBirth string `json:"dateOfBirth"`
	Address     string `json:"address"`
	PersonalId  string `json:"personalId"`
	Amount      string `json:"amount"`
	MoneyBack   string `json:"moneyBack"`
}

type _SroTicketPassenger SroTicketPassenger

// NewSroTicketPassenger instantiates a new SroTicketPassenger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSroTicketPassenger(id int64, firstName string, lastName string, phone string, email string, dateOfBirth string, address string, personalId string, amount string, moneyBack string) *SroTicketPassenger {
	this := SroTicketPassenger{}
	this.Id = id
	this.FirstName = firstName
	this.LastName = lastName
	this.Phone = phone
	this.Email = email
	this.DateOfBirth = dateOfBirth
	this.Address = address
	this.PersonalId = personalId
	this.Amount = amount
	this.MoneyBack = moneyBack
	return &this
}

// NewSroTicketPassengerWithDefaults instantiates a new SroTicketPassenger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSroTicketPassengerWithDefaults() *SroTicketPassenger {
	this := SroTicketPassenger{}
	return &this
}

// GetId returns the Id field value
func (o *SroTicketPassenger) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SroTicketPassenger) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SroTicketPassenger) SetId(v int64) {
	o.Id = v
}

// GetFirstName returns the FirstName field value
func (o *SroTicketPassenger) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *SroTicketPassenger) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *SroTicketPassenger) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *SroTicketPassenger) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *SroTicketPassenger) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *SroTicketPassenger) SetLastName(v string) {
	o.LastName = v
}

// GetPhone returns the Phone field value
func (o *SroTicketPassenger) GetPhone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value
// and a boolean to check if the value has been set.
func (o *SroTicketPassenger) GetPhoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Phone, true
}

// SetPhone sets field value
func (o *SroTicketPassenger) SetPhone(v string) {
	o.Phone = v
}

// GetEmail returns the Email field value
func (o *SroTicketPassenger) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *SroTicketPassenger) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *SroTicketPassenger) SetEmail(v string) {
	o.Email = v
}

// GetDateOfBirth returns the DateOfBirth field value
func (o *SroTicketPassenger) GetDateOfBirth() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value
// and a boolean to check if the value has been set.
func (o *SroTicketPassenger) GetDateOfBirthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateOfBirth, true
}

// SetDateOfBirth sets field value
func (o *SroTicketPassenger) SetDateOfBirth(v string) {
	o.DateOfBirth = v
}

// GetAddress returns the Address field value
func (o *SroTicketPassenger) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *SroTicketPassenger) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *SroTicketPassenger) SetAddress(v string) {
	o.Address = v
}

// GetPersonalId returns the PersonalId field value
func (o *SroTicketPassenger) GetPersonalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PersonalId
}

// GetPersonalIdOk returns a tuple with the PersonalId field value
// and a boolean to check if the value has been set.
func (o *SroTicketPassenger) GetPersonalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PersonalId, true
}

// SetPersonalId sets field value
func (o *SroTicketPassenger) SetPersonalId(v string) {
	o.PersonalId = v
}

// GetAmount returns the Amount field value
func (o *SroTicketPassenger) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *SroTicketPassenger) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *SroTicketPassenger) SetAmount(v string) {
	o.Amount = v
}

// GetMoneyBack returns the MoneyBack field value
func (o *SroTicketPassenger) GetMoneyBack() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MoneyBack
}

// GetMoneyBackOk returns a tuple with the MoneyBack field value
// and a boolean to check if the value has been set.
func (o *SroTicketPassenger) GetMoneyBackOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MoneyBack, true
}

// SetMoneyBack sets field value
func (o *SroTicketPassenger) SetMoneyBack(v string) {
	o.MoneyBack = v
}

func (o SroTicketPassenger) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SroTicketPassenger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["firstName"] = o.FirstName
	toSerialize["lastName"] = o.LastName
	toSerialize["phone"] = o.Phone
	toSerialize["email"] = o.Email
	toSerialize["dateOfBirth"] = o.DateOfBirth
	toSerialize["address"] = o.Address
	toSerialize["personalId"] = o.PersonalId
	toSerialize["amount"] = o.Amount
	toSerialize["moneyBack"] = o.MoneyBack
	return toSerialize, nil
}

func (o *SroTicketPassenger) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"firstName",
		"lastName",
		"phone",
		"email",
		"dateOfBirth",
		"address",
		"personalId",
		"amount",
		"moneyBack",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSroTicketPassenger := _SroTicketPassenger{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSroTicketPassenger)

	if err != nil {
		return err
	}

	*o = SroTicketPassenger(varSroTicketPassenger)

	return err
}

type NullableSroTicketPassenger struct {
	value *SroTicketPassenger
	isSet bool
}

func (v NullableSroTicketPassenger) Get() *SroTicketPassenger {
	return v.value
}

func (v *NullableSroTicketPassenger) Set(val *SroTicketPassenger) {
	v.value = val
	v.isSet = true
}

func (v NullableSroTicketPassenger) IsSet() bool {
	return v.isSet
}

func (v *NullableSroTicketPassenger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSroTicketPassenger(val *SroTicketPassenger) *NullableSroTicketPassenger {
	return &NullableSroTicketPassenger{value: val, isSet: true}
}

func (v NullableSroTicketPassenger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSroTicketPassenger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
