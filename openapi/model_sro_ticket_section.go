/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers. 

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SroTicketSection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SroTicketSection{}

// SroTicketSection struct for SroTicketSection
type SroTicketSection struct {
	SectionId int64 `json:"sectionId"`
	FromStationId int64 `json:"fromStationId"`
	ToStationId int64 `json:"toStationId"`
}

type _SroTicketSection SroTicketSection

// NewSroTicketSection instantiates a new SroTicketSection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSroTicketSection(sectionId int64, fromStationId int64, toStationId int64) *SroTicketSection {
	this := SroTicketSection{}
	this.SectionId = sectionId
	this.FromStationId = fromStationId
	this.ToStationId = toStationId
	return &this
}

// NewSroTicketSectionWithDefaults instantiates a new SroTicketSection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSroTicketSectionWithDefaults() *SroTicketSection {
	this := SroTicketSection{}
	return &this
}

// GetSectionId returns the SectionId field value
func (o *SroTicketSection) GetSectionId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SectionId
}

// GetSectionIdOk returns a tuple with the SectionId field value
// and a boolean to check if the value has been set.
func (o *SroTicketSection) GetSectionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SectionId, true
}

// SetSectionId sets field value
func (o *SroTicketSection) SetSectionId(v int64) {
	o.SectionId = v
}

// GetFromStationId returns the FromStationId field value
func (o *SroTicketSection) GetFromStationId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FromStationId
}

// GetFromStationIdOk returns a tuple with the FromStationId field value
// and a boolean to check if the value has been set.
func (o *SroTicketSection) GetFromStationIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromStationId, true
}

// SetFromStationId sets field value
func (o *SroTicketSection) SetFromStationId(v int64) {
	o.FromStationId = v
}

// GetToStationId returns the ToStationId field value
func (o *SroTicketSection) GetToStationId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ToStationId
}

// GetToStationIdOk returns a tuple with the ToStationId field value
// and a boolean to check if the value has been set.
func (o *SroTicketSection) GetToStationIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToStationId, true
}

// SetToStationId sets field value
func (o *SroTicketSection) SetToStationId(v int64) {
	o.ToStationId = v
}

func (o SroTicketSection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SroTicketSection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sectionId"] = o.SectionId
	toSerialize["fromStationId"] = o.FromStationId
	toSerialize["toStationId"] = o.ToStationId
	return toSerialize, nil
}

func (o *SroTicketSection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sectionId",
		"fromStationId",
		"toStationId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSroTicketSection := _SroTicketSection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSroTicketSection)

	if err != nil {
		return err
	}

	*o = SroTicketSection(varSroTicketSection)

	return err
}

type NullableSroTicketSection struct {
	value *SroTicketSection
	isSet bool
}

func (v NullableSroTicketSection) Get() *SroTicketSection {
	return v.value
}

func (v *NullableSroTicketSection) Set(val *SroTicketSection) {
	v.value = val
	v.isSet = true
}

func (v NullableSroTicketSection) IsSet() bool {
	return v.isSet
}

func (v *NullableSroTicketSection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSroTicketSection(val *SroTicketSection) *NullableSroTicketSection {
	return &NullableSroTicketSection{value: val, isSet: true}
}

func (v NullableSroTicketSection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSroTicketSection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


