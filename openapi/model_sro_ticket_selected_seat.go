/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SroTicketSelectedSeat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SroTicketSelectedSeat{}

// SroTicketSelectedSeat struct for SroTicketSelectedSeat
type SroTicketSelectedSeat struct {
	SectionId     int64 `json:"sectionId"`
	VehicleNumber int32 `json:"vehicleNumber"`
	SeatIndex     int32 `json:"seatIndex"`
}

type _SroTicketSelectedSeat SroTicketSelectedSeat

// NewSroTicketSelectedSeat instantiates a new SroTicketSelectedSeat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSroTicketSelectedSeat(sectionId int64, vehicleNumber int32, seatIndex int32) *SroTicketSelectedSeat {
	this := SroTicketSelectedSeat{}
	this.SectionId = sectionId
	this.VehicleNumber = vehicleNumber
	this.SeatIndex = seatIndex
	return &this
}

// NewSroTicketSelectedSeatWithDefaults instantiates a new SroTicketSelectedSeat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSroTicketSelectedSeatWithDefaults() *SroTicketSelectedSeat {
	this := SroTicketSelectedSeat{}
	return &this
}

// GetSectionId returns the SectionId field value
func (o *SroTicketSelectedSeat) GetSectionId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SectionId
}

// GetSectionIdOk returns a tuple with the SectionId field value
// and a boolean to check if the value has been set.
func (o *SroTicketSelectedSeat) GetSectionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SectionId, true
}

// SetSectionId sets field value
func (o *SroTicketSelectedSeat) SetSectionId(v int64) {
	o.SectionId = v
}

// GetVehicleNumber returns the VehicleNumber field value
func (o *SroTicketSelectedSeat) GetVehicleNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VehicleNumber
}

// GetVehicleNumberOk returns a tuple with the VehicleNumber field value
// and a boolean to check if the value has been set.
func (o *SroTicketSelectedSeat) GetVehicleNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VehicleNumber, true
}

// SetVehicleNumber sets field value
func (o *SroTicketSelectedSeat) SetVehicleNumber(v int32) {
	o.VehicleNumber = v
}

// GetSeatIndex returns the SeatIndex field value
func (o *SroTicketSelectedSeat) GetSeatIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SeatIndex
}

// GetSeatIndexOk returns a tuple with the SeatIndex field value
// and a boolean to check if the value has been set.
func (o *SroTicketSelectedSeat) GetSeatIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeatIndex, true
}

// SetSeatIndex sets field value
func (o *SroTicketSelectedSeat) SetSeatIndex(v int32) {
	o.SeatIndex = v
}

func (o SroTicketSelectedSeat) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SroTicketSelectedSeat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sectionId"] = o.SectionId
	toSerialize["vehicleNumber"] = o.VehicleNumber
	toSerialize["seatIndex"] = o.SeatIndex
	return toSerialize, nil
}

func (o *SroTicketSelectedSeat) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sectionId",
		"vehicleNumber",
		"seatIndex",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSroTicketSelectedSeat := _SroTicketSelectedSeat{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSroTicketSelectedSeat)

	if err != nil {
		return err
	}

	*o = SroTicketSelectedSeat(varSroTicketSelectedSeat)

	return err
}

type NullableSroTicketSelectedSeat struct {
	value *SroTicketSelectedSeat
	isSet bool
}

func (v NullableSroTicketSelectedSeat) Get() *SroTicketSelectedSeat {
	return v.value
}

func (v *NullableSroTicketSelectedSeat) Set(val *SroTicketSelectedSeat) {
	v.value = val
	v.isSet = true
}

func (v NullableSroTicketSelectedSeat) IsSet() bool {
	return v.isSet
}

func (v *NullableSroTicketSelectedSeat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSroTicketSelectedSeat(val *SroTicketSelectedSeat) *NullableSroTicketSelectedSeat {
	return &NullableSroTicketSelectedSeat{value: val, isSet: true}
}

func (v NullableSroTicketSelectedSeat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSroTicketSelectedSeat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
