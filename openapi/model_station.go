/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Station type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Station{}

// Station struct for Station
type Station struct {
	// Unique identifier for the station.
	Id int64 `json:"id"`
	// Station name.
	Name string `json:"name"`
	// Station full name.
	Fullname string `json:"fullname"`
	// Station nicknames or aliases.
	Aliases []string `json:"aliases,omitempty"`
	// Station address.
	Address *string `json:"address,omitempty"`
	// Station type.
	StationsTypes []string `json:"stationsTypes,omitempty"`
	// A three-letter from [IATA airport code](https://en.wikipedia.org/wiki/IATA_airport_code).
	IataCode *string `json:"iataCode,omitempty"`
	// Publicly accessible station URL.
	StationUrl *string `json:"stationUrl,omitempty"`
	// [TZ database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) time zone name in which station is located.
	StationTimeZoneCode *string `json:"stationTimeZoneCode,omitempty"`
	// \"Name of wheelchair platform provider (if available).\"  Possible providers:    | Provider name | Provider code |   |---------------|---------------|   | České dráhy   | CD            |   | RegioJet      | RJ            |
	WheelChairPlatform *string `json:"wheelChairPlatform,omitempty"`
	// Station's significance within the city. (e.g. for the city of Brno, Brno main railway station is more significant than Brno - Královo Pole railway station.)
	Significance int64 `json:"significance"`
	// The geographic longitude where station is located.
	Longitude *float32 `json:"longitude,omitempty"`
	// The geographic latitude where station is located.
	Latitude *float32 `json:"latitude,omitempty"`
	// URL to station's picture (if available).
	ImageUrl   *string `json:"imageUrl,omitempty"`
	CisNumber  *int64  `json:"cisNumber,omitempty"`
	Sr70Number *int64  `json:"sr70Number,omitempty"`
}

type _Station Station

// NewStation instantiates a new Station object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStation(id int64, name string, fullname string, significance int64) *Station {
	this := Station{}
	this.Id = id
	this.Name = name
	this.Fullname = fullname
	this.Significance = significance
	return &this
}

// NewStationWithDefaults instantiates a new Station object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStationWithDefaults() *Station {
	this := Station{}
	return &this
}

// GetId returns the Id field value
func (o *Station) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Station) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Station) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Station) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Station) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Station) SetName(v string) {
	o.Name = v
}

// GetFullname returns the Fullname field value
func (o *Station) GetFullname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fullname
}

// GetFullnameOk returns a tuple with the Fullname field value
// and a boolean to check if the value has been set.
func (o *Station) GetFullnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fullname, true
}

// SetFullname sets field value
func (o *Station) SetFullname(v string) {
	o.Fullname = v
}

// GetAliases returns the Aliases field value if set, zero value otherwise.
func (o *Station) GetAliases() []string {
	if o == nil || IsNil(o.Aliases) {
		var ret []string
		return ret
	}
	return o.Aliases
}

// GetAliasesOk returns a tuple with the Aliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Station) GetAliasesOk() ([]string, bool) {
	if o == nil || IsNil(o.Aliases) {
		return nil, false
	}
	return o.Aliases, true
}

// HasAliases returns a boolean if a field has been set.
func (o *Station) HasAliases() bool {
	if o != nil && !IsNil(o.Aliases) {
		return true
	}

	return false
}

// SetAliases gets a reference to the given []string and assigns it to the Aliases field.
func (o *Station) SetAliases(v []string) {
	o.Aliases = v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *Station) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Station) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *Station) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *Station) SetAddress(v string) {
	o.Address = &v
}

// GetStationsTypes returns the StationsTypes field value if set, zero value otherwise.
func (o *Station) GetStationsTypes() []string {
	if o == nil || IsNil(o.StationsTypes) {
		var ret []string
		return ret
	}
	return o.StationsTypes
}

// GetStationsTypesOk returns a tuple with the StationsTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Station) GetStationsTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.StationsTypes) {
		return nil, false
	}
	return o.StationsTypes, true
}

// HasStationsTypes returns a boolean if a field has been set.
func (o *Station) HasStationsTypes() bool {
	if o != nil && !IsNil(o.StationsTypes) {
		return true
	}

	return false
}

// SetStationsTypes gets a reference to the given []string and assigns it to the StationsTypes field.
func (o *Station) SetStationsTypes(v []string) {
	o.StationsTypes = v
}

// GetIataCode returns the IataCode field value if set, zero value otherwise.
func (o *Station) GetIataCode() string {
	if o == nil || IsNil(o.IataCode) {
		var ret string
		return ret
	}
	return *o.IataCode
}

// GetIataCodeOk returns a tuple with the IataCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Station) GetIataCodeOk() (*string, bool) {
	if o == nil || IsNil(o.IataCode) {
		return nil, false
	}
	return o.IataCode, true
}

// HasIataCode returns a boolean if a field has been set.
func (o *Station) HasIataCode() bool {
	if o != nil && !IsNil(o.IataCode) {
		return true
	}

	return false
}

// SetIataCode gets a reference to the given string and assigns it to the IataCode field.
func (o *Station) SetIataCode(v string) {
	o.IataCode = &v
}

// GetStationUrl returns the StationUrl field value if set, zero value otherwise.
func (o *Station) GetStationUrl() string {
	if o == nil || IsNil(o.StationUrl) {
		var ret string
		return ret
	}
	return *o.StationUrl
}

// GetStationUrlOk returns a tuple with the StationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Station) GetStationUrlOk() (*string, bool) {
	if o == nil || IsNil(o.StationUrl) {
		return nil, false
	}
	return o.StationUrl, true
}

// HasStationUrl returns a boolean if a field has been set.
func (o *Station) HasStationUrl() bool {
	if o != nil && !IsNil(o.StationUrl) {
		return true
	}

	return false
}

// SetStationUrl gets a reference to the given string and assigns it to the StationUrl field.
func (o *Station) SetStationUrl(v string) {
	o.StationUrl = &v
}

// GetStationTimeZoneCode returns the StationTimeZoneCode field value if set, zero value otherwise.
func (o *Station) GetStationTimeZoneCode() string {
	if o == nil || IsNil(o.StationTimeZoneCode) {
		var ret string
		return ret
	}
	return *o.StationTimeZoneCode
}

// GetStationTimeZoneCodeOk returns a tuple with the StationTimeZoneCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Station) GetStationTimeZoneCodeOk() (*string, bool) {
	if o == nil || IsNil(o.StationTimeZoneCode) {
		return nil, false
	}
	return o.StationTimeZoneCode, true
}

// HasStationTimeZoneCode returns a boolean if a field has been set.
func (o *Station) HasStationTimeZoneCode() bool {
	if o != nil && !IsNil(o.StationTimeZoneCode) {
		return true
	}

	return false
}

// SetStationTimeZoneCode gets a reference to the given string and assigns it to the StationTimeZoneCode field.
func (o *Station) SetStationTimeZoneCode(v string) {
	o.StationTimeZoneCode = &v
}

// GetWheelChairPlatform returns the WheelChairPlatform field value if set, zero value otherwise.
func (o *Station) GetWheelChairPlatform() string {
	if o == nil || IsNil(o.WheelChairPlatform) {
		var ret string
		return ret
	}
	return *o.WheelChairPlatform
}

// GetWheelChairPlatformOk returns a tuple with the WheelChairPlatform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Station) GetWheelChairPlatformOk() (*string, bool) {
	if o == nil || IsNil(o.WheelChairPlatform) {
		return nil, false
	}
	return o.WheelChairPlatform, true
}

// HasWheelChairPlatform returns a boolean if a field has been set.
func (o *Station) HasWheelChairPlatform() bool {
	if o != nil && !IsNil(o.WheelChairPlatform) {
		return true
	}

	return false
}

// SetWheelChairPlatform gets a reference to the given string and assigns it to the WheelChairPlatform field.
func (o *Station) SetWheelChairPlatform(v string) {
	o.WheelChairPlatform = &v
}

// GetSignificance returns the Significance field value
func (o *Station) GetSignificance() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Significance
}

// GetSignificanceOk returns a tuple with the Significance field value
// and a boolean to check if the value has been set.
func (o *Station) GetSignificanceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Significance, true
}

// SetSignificance sets field value
func (o *Station) SetSignificance(v int64) {
	o.Significance = v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *Station) GetLongitude() float32 {
	if o == nil || IsNil(o.Longitude) {
		var ret float32
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Station) GetLongitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.Longitude) {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *Station) HasLongitude() bool {
	if o != nil && !IsNil(o.Longitude) {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float32 and assigns it to the Longitude field.
func (o *Station) SetLongitude(v float32) {
	o.Longitude = &v
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *Station) GetLatitude() float32 {
	if o == nil || IsNil(o.Latitude) {
		var ret float32
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Station) GetLatitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.Latitude) {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *Station) HasLatitude() bool {
	if o != nil && !IsNil(o.Latitude) {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float32 and assigns it to the Latitude field.
func (o *Station) SetLatitude(v float32) {
	o.Latitude = &v
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise.
func (o *Station) GetImageUrl() string {
	if o == nil || IsNil(o.ImageUrl) {
		var ret string
		return ret
	}
	return *o.ImageUrl
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Station) GetImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ImageUrl) {
		return nil, false
	}
	return o.ImageUrl, true
}

// HasImageUrl returns a boolean if a field has been set.
func (o *Station) HasImageUrl() bool {
	if o != nil && !IsNil(o.ImageUrl) {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given string and assigns it to the ImageUrl field.
func (o *Station) SetImageUrl(v string) {
	o.ImageUrl = &v
}

func (o Station) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Station) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["fullname"] = o.Fullname
	if !IsNil(o.Aliases) {
		toSerialize["aliases"] = o.Aliases
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.StationsTypes) {
		toSerialize["stationsTypes"] = o.StationsTypes
	}
	if !IsNil(o.IataCode) {
		toSerialize["iataCode"] = o.IataCode
	}
	if !IsNil(o.StationUrl) {
		toSerialize["stationUrl"] = o.StationUrl
	}
	if !IsNil(o.StationTimeZoneCode) {
		toSerialize["stationTimeZoneCode"] = o.StationTimeZoneCode
	}
	if !IsNil(o.WheelChairPlatform) {
		toSerialize["wheelChairPlatform"] = o.WheelChairPlatform
	}
	toSerialize["significance"] = o.Significance
	if !IsNil(o.Longitude) {
		toSerialize["longitude"] = o.Longitude
	}
	if !IsNil(o.Latitude) {
		toSerialize["latitude"] = o.Latitude
	}
	if !IsNil(o.ImageUrl) {
		toSerialize["imageUrl"] = o.ImageUrl
	}
	return toSerialize, nil
}

func (o *Station) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"fullname",
		"significance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStation := _Station{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStation)

	if err != nil {
		return err
	}

	*o = Station(varStation)

	return err
}

type NullableStation struct {
	value *Station
	isSet bool
}

func (v NullableStation) Get() *Station {
	return v.value
}

func (v *NullableStation) Set(val *Station) {
	v.value = val
	v.isSet = true
}

func (v NullableStation) IsSet() bool {
	return v.isSet
}

func (v *NullableStation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStation(val *Station) *NullableStation {
	return &NullableStation{value: val, isSet: true}
}

func (v NullableStation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
