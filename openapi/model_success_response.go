/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers. 

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SuccessResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuccessResponse{}

// SuccessResponse struct for SuccessResponse
type SuccessResponse struct {
	Message *string `json:"message,omitempty"`
	MessageFields []MessageField `json:"messageFields,omitempty"`
}

// NewSuccessResponse instantiates a new SuccessResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuccessResponse() *SuccessResponse {
	this := SuccessResponse{}
	return &this
}

// NewSuccessResponseWithDefaults instantiates a new SuccessResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuccessResponseWithDefaults() *SuccessResponse {
	this := SuccessResponse{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *SuccessResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *SuccessResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *SuccessResponse) SetMessage(v string) {
	o.Message = &v
}

// GetMessageFields returns the MessageFields field value if set, zero value otherwise.
func (o *SuccessResponse) GetMessageFields() []MessageField {
	if o == nil || IsNil(o.MessageFields) {
		var ret []MessageField
		return ret
	}
	return o.MessageFields
}

// GetMessageFieldsOk returns a tuple with the MessageFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessResponse) GetMessageFieldsOk() ([]MessageField, bool) {
	if o == nil || IsNil(o.MessageFields) {
		return nil, false
	}
	return o.MessageFields, true
}

// HasMessageFields returns a boolean if a field has been set.
func (o *SuccessResponse) HasMessageFields() bool {
	if o != nil && !IsNil(o.MessageFields) {
		return true
	}

	return false
}

// SetMessageFields gets a reference to the given []MessageField and assigns it to the MessageFields field.
func (o *SuccessResponse) SetMessageFields(v []MessageField) {
	o.MessageFields = v
}

func (o SuccessResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuccessResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.MessageFields) {
		toSerialize["messageFields"] = o.MessageFields
	}
	return toSerialize, nil
}

type NullableSuccessResponse struct {
	value *SuccessResponse
	isSet bool
}

func (v NullableSuccessResponse) Get() *SuccessResponse {
	return v.value
}

func (v *NullableSuccessResponse) Set(val *SuccessResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSuccessResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSuccessResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuccessResponse(val *SuccessResponse) *NullableSuccessResponse {
	return &NullableSuccessResponse{value: val, isSet: true}
}

func (v NullableSuccessResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuccessResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


