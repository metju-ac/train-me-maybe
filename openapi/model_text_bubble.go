/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers. 

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TextBubble type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TextBubble{}

// TextBubble struct for TextBubble
type TextBubble struct {
	Id *int64 `json:"id,omitempty"`
	Text *string `json:"text,omitempty"`
}

// NewTextBubble instantiates a new TextBubble object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextBubble() *TextBubble {
	this := TextBubble{}
	return &this
}

// NewTextBubbleWithDefaults instantiates a new TextBubble object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextBubbleWithDefaults() *TextBubble {
	this := TextBubble{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TextBubble) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextBubble) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TextBubble) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *TextBubble) SetId(v int64) {
	o.Id = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *TextBubble) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextBubble) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *TextBubble) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *TextBubble) SetText(v string) {
	o.Text = &v
}

func (o TextBubble) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextBubble) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	return toSerialize, nil
}

type NullableTextBubble struct {
	value *TextBubble
	isSet bool
}

func (v NullableTextBubble) Get() *TextBubble {
	return v.value
}

func (v *NullableTextBubble) Set(val *TextBubble) {
	v.value = val
	v.isSet = true
}

func (v NullableTextBubble) IsSet() bool {
	return v.isSet
}

func (v *NullableTextBubble) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextBubble(val *TextBubble) *NullableTextBubble {
	return &NullableTextBubble{value: val, isSet: true}
}

func (v NullableTextBubble) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextBubble) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


