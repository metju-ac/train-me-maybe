/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Ticket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ticket{}

// Ticket expirationDate is date-time value states when ticket expires. ExpiresAt states how many days, hours and minutes left to ticket expiration.
type Ticket struct {
	// manually added
	TicketCode string `json:"ticketCode,omitempty"`
	ActionName string `json:"actionName,omitempty"`
	WheelChairPlatformOrderPossible bool `json:"wheelChairPlatformOrderPossible,omitempty"`
	WheelChairPlatformOrdered bool `json:"wheelChairPlatformOrdered,omitempty"`
	CarbonOffset float32 `json:"carbonOffset,omitempty"`
	AffiliateTicket bool `json:"affiliateTicket,omitempty"`

	// ID of the ticket
	Id int64 `json:"id"`
	// route id (section0.id,section1.id, ... sectionx.id)
	RouteId string `json:"routeId"`
	// Final price for ticket, addons etc.
	Price float32 `json:"price"`
	// Final price to be paid
	Unpaid                float32         `json:"unpaid"`
	Currency              Currency        `json:"currency"`
	State                 TicketState     `json:"state"`
	SeatClassKey          string          `json:"seatClassKey"`
	Conditions            PriceConditions `json:"conditions"`
	ExpirationDate        *time.Time      `json:"expirationDate,omitempty"`
	ExpirateAt            *TimePeriod     `json:"expirateAt,omitempty"`
	CustomerNotifications []string        `json:"customerNotifications,omitempty"`
	CustomerActions       CustomerActions `json:"customerActions"`
	RouteSections         []TicketSection `json:"routeSections"`
	Addons                []OrderedAddon  `json:"addons,omitempty"`
	// Payment ID (groupTransactionID). Available only with paid ticket. Necessary for further action with ticket (for example: print invoice)
	PaymentId        *int64        `json:"paymentId,omitempty"`
	Bills            []TicketBill  `json:"bills,omitempty"`
	UsedCodeDiscount *CodeDiscount `json:"usedCodeDiscount,omitempty"`
	// Applied procentual discounts
	UsedPercentualDiscounts []PercentualDiscount `json:"usedPercentualDiscounts,omitempty"`
	TransfersInfo           *TransfersInfo       `json:"transfersInfo,omitempty"`
	// Total count of all irreversible surcharges in current currency
	Surcharge *float32 `json:"surcharge,omitempty"`
	// Total count of all charges and surcharge
	CancelChargeSum *float32 `json:"cancelChargeSum,omitempty"`
	// Total count of reversible amounts
	CancelMoneyBackSum *float32       `json:"cancelMoneyBackSum,omitempty"`
	PassengersInfo     PassengersInfo `json:"passengersInfo,omitempty"`
	// Textual information about the first delay on the route
	Delay *string `json:"delay,omitempty"`
	// Textual information about the travel time on a given section
	TravelTime *string `json:"travelTime,omitempty"`
	// Estimated arrival date time (arrival + delay)
	EstimatedArrivalTime *time.Time `json:"estimatedArrivalTime,omitempty"`
}

type _Ticket Ticket

// NewTicket instantiates a new Ticket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicket(id int64, routeId string, price float32, unpaid float32, currency Currency, state TicketState, seatClassKey string, conditions PriceConditions, customerActions CustomerActions, routeSections []TicketSection, passengersInfo PassengersInfo) *Ticket {
	this := Ticket{}
	this.Id = id
	this.RouteId = routeId
	this.Price = price
	this.Unpaid = unpaid
	this.Currency = currency
	this.State = state
	this.SeatClassKey = seatClassKey
	this.Conditions = conditions
	this.CustomerActions = customerActions
	this.RouteSections = routeSections
	this.PassengersInfo = passengersInfo
	return &this
}

// NewTicketWithDefaults instantiates a new Ticket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicketWithDefaults() *Ticket {
	this := Ticket{}
	var currency Currency = EUR
	this.Currency = currency
	return &this
}

// GetId returns the Id field value
func (o *Ticket) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Ticket) SetId(v int64) {
	o.Id = v
}

// GetRouteId returns the RouteId field value
func (o *Ticket) GetRouteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RouteId
}

// GetRouteIdOk returns a tuple with the RouteId field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetRouteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RouteId, true
}

// SetRouteId sets field value
func (o *Ticket) SetRouteId(v string) {
	o.RouteId = v
}

// GetPrice returns the Price field value
func (o *Ticket) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *Ticket) SetPrice(v float32) {
	o.Price = v
}

// GetUnpaid returns the Unpaid field value
func (o *Ticket) GetUnpaid() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Unpaid
}

// GetUnpaidOk returns a tuple with the Unpaid field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetUnpaidOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unpaid, true
}

// SetUnpaid sets field value
func (o *Ticket) SetUnpaid(v float32) {
	o.Unpaid = v
}

// GetCurrency returns the Currency field value
func (o *Ticket) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *Ticket) SetCurrency(v Currency) {
	o.Currency = v
}

// GetState returns the State field value
func (o *Ticket) GetState() TicketState {
	if o == nil {
		var ret TicketState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetStateOk() (*TicketState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Ticket) SetState(v TicketState) {
	o.State = v
}

// GetSeatClassKey returns the SeatClassKey field value
func (o *Ticket) GetSeatClassKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SeatClassKey
}

// GetSeatClassKeyOk returns a tuple with the SeatClassKey field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetSeatClassKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeatClassKey, true
}

// SetSeatClassKey sets field value
func (o *Ticket) SetSeatClassKey(v string) {
	o.SeatClassKey = v
}

// GetConditions returns the Conditions field value
func (o *Ticket) GetConditions() PriceConditions {
	if o == nil {
		var ret PriceConditions
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetConditionsOk() (*PriceConditions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Conditions, true
}

// SetConditions sets field value
func (o *Ticket) SetConditions(v PriceConditions) {
	o.Conditions = v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *Ticket) GetExpirationDate() time.Time {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *Ticket) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *Ticket) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetExpirateAt returns the ExpirateAt field value if set, zero value otherwise.
func (o *Ticket) GetExpirateAt() TimePeriod {
	if o == nil || IsNil(o.ExpirateAt) {
		var ret TimePeriod
		return ret
	}
	return *o.ExpirateAt
}

// GetExpirateAtOk returns a tuple with the ExpirateAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetExpirateAtOk() (*TimePeriod, bool) {
	if o == nil || IsNil(o.ExpirateAt) {
		return nil, false
	}
	return o.ExpirateAt, true
}

// HasExpirateAt returns a boolean if a field has been set.
func (o *Ticket) HasExpirateAt() bool {
	if o != nil && !IsNil(o.ExpirateAt) {
		return true
	}

	return false
}

// SetExpirateAt gets a reference to the given TimePeriod and assigns it to the ExpirateAt field.
func (o *Ticket) SetExpirateAt(v TimePeriod) {
	o.ExpirateAt = &v
}

// GetCustomerNotifications returns the CustomerNotifications field value if set, zero value otherwise.
func (o *Ticket) GetCustomerNotifications() []string {
	if o == nil || IsNil(o.CustomerNotifications) {
		var ret []string
		return ret
	}
	return o.CustomerNotifications
}

// GetCustomerNotificationsOk returns a tuple with the CustomerNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetCustomerNotificationsOk() ([]string, bool) {
	if o == nil || IsNil(o.CustomerNotifications) {
		return nil, false
	}
	return o.CustomerNotifications, true
}

// HasCustomerNotifications returns a boolean if a field has been set.
func (o *Ticket) HasCustomerNotifications() bool {
	if o != nil && !IsNil(o.CustomerNotifications) {
		return true
	}

	return false
}

// SetCustomerNotifications gets a reference to the given []string and assigns it to the CustomerNotifications field.
func (o *Ticket) SetCustomerNotifications(v []string) {
	o.CustomerNotifications = v
}

// GetCustomerActions returns the CustomerActions field value
func (o *Ticket) GetCustomerActions() CustomerActions {
	if o == nil {
		var ret CustomerActions
		return ret
	}

	return o.CustomerActions
}

// GetCustomerActionsOk returns a tuple with the CustomerActions field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetCustomerActionsOk() (*CustomerActions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerActions, true
}

// SetCustomerActions sets field value
func (o *Ticket) SetCustomerActions(v CustomerActions) {
	o.CustomerActions = v
}

// GetRouteSections returns the RouteSections field value
func (o *Ticket) GetRouteSections() []TicketSection {
	if o == nil {
		var ret []TicketSection
		return ret
	}

	return o.RouteSections
}

// GetRouteSectionsOk returns a tuple with the RouteSections field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetRouteSectionsOk() ([]TicketSection, bool) {
	if o == nil {
		return nil, false
	}
	return o.RouteSections, true
}

// SetRouteSections sets field value
func (o *Ticket) SetRouteSections(v []TicketSection) {
	o.RouteSections = v
}

// GetAddons returns the Addons field value if set, zero value otherwise.
func (o *Ticket) GetAddons() []OrderedAddon {
	if o == nil || IsNil(o.Addons) {
		var ret []OrderedAddon
		return ret
	}
	return o.Addons
}

// GetAddonsOk returns a tuple with the Addons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetAddonsOk() ([]OrderedAddon, bool) {
	if o == nil || IsNil(o.Addons) {
		return nil, false
	}
	return o.Addons, true
}

// HasAddons returns a boolean if a field has been set.
func (o *Ticket) HasAddons() bool {
	if o != nil && !IsNil(o.Addons) {
		return true
	}

	return false
}

// SetAddons gets a reference to the given []OrderedAddon and assigns it to the Addons field.
func (o *Ticket) SetAddons(v []OrderedAddon) {
	o.Addons = v
}

// GetPaymentId returns the PaymentId field value if set, zero value otherwise.
func (o *Ticket) GetPaymentId() int64 {
	if o == nil || IsNil(o.PaymentId) {
		var ret int64
		return ret
	}
	return *o.PaymentId
}

// GetPaymentIdOk returns a tuple with the PaymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetPaymentIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PaymentId) {
		return nil, false
	}
	return o.PaymentId, true
}

// HasPaymentId returns a boolean if a field has been set.
func (o *Ticket) HasPaymentId() bool {
	if o != nil && !IsNil(o.PaymentId) {
		return true
	}

	return false
}

// SetPaymentId gets a reference to the given int64 and assigns it to the PaymentId field.
func (o *Ticket) SetPaymentId(v int64) {
	o.PaymentId = &v
}

// GetBills returns the Bills field value if set, zero value otherwise.
func (o *Ticket) GetBills() []TicketBill {
	if o == nil || IsNil(o.Bills) {
		var ret []TicketBill
		return ret
	}
	return o.Bills
}

// GetBillsOk returns a tuple with the Bills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetBillsOk() ([]TicketBill, bool) {
	if o == nil || IsNil(o.Bills) {
		return nil, false
	}
	return o.Bills, true
}

// HasBills returns a boolean if a field has been set.
func (o *Ticket) HasBills() bool {
	if o != nil && !IsNil(o.Bills) {
		return true
	}

	return false
}

// SetBills gets a reference to the given []TicketBill and assigns it to the Bills field.
func (o *Ticket) SetBills(v []TicketBill) {
	o.Bills = v
}

// GetUsedCodeDiscount returns the UsedCodeDiscount field value if set, zero value otherwise.
func (o *Ticket) GetUsedCodeDiscount() CodeDiscount {
	if o == nil || IsNil(o.UsedCodeDiscount) {
		var ret CodeDiscount
		return ret
	}
	return *o.UsedCodeDiscount
}

// GetUsedCodeDiscountOk returns a tuple with the UsedCodeDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetUsedCodeDiscountOk() (*CodeDiscount, bool) {
	if o == nil || IsNil(o.UsedCodeDiscount) {
		return nil, false
	}
	return o.UsedCodeDiscount, true
}

// HasUsedCodeDiscount returns a boolean if a field has been set.
func (o *Ticket) HasUsedCodeDiscount() bool {
	if o != nil && !IsNil(o.UsedCodeDiscount) {
		return true
	}

	return false
}

// SetUsedCodeDiscount gets a reference to the given CodeDiscount and assigns it to the UsedCodeDiscount field.
func (o *Ticket) SetUsedCodeDiscount(v CodeDiscount) {
	o.UsedCodeDiscount = &v
}

// GetUsedPercentualDiscounts returns the UsedPercentualDiscounts field value if set, zero value otherwise.
func (o *Ticket) GetUsedPercentualDiscounts() []PercentualDiscount {
	if o == nil || IsNil(o.UsedPercentualDiscounts) {
		var ret []PercentualDiscount
		return ret
	}
	return o.UsedPercentualDiscounts
}

// GetUsedPercentualDiscountsOk returns a tuple with the UsedPercentualDiscounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetUsedPercentualDiscountsOk() ([]PercentualDiscount, bool) {
	if o == nil || IsNil(o.UsedPercentualDiscounts) {
		return nil, false
	}
	return o.UsedPercentualDiscounts, true
}

// HasUsedPercentualDiscounts returns a boolean if a field has been set.
func (o *Ticket) HasUsedPercentualDiscounts() bool {
	if o != nil && !IsNil(o.UsedPercentualDiscounts) {
		return true
	}

	return false
}

// SetUsedPercentualDiscounts gets a reference to the given []PercentualDiscount and assigns it to the UsedPercentualDiscounts field.
func (o *Ticket) SetUsedPercentualDiscounts(v []PercentualDiscount) {
	o.UsedPercentualDiscounts = v
}

// GetTransfersInfo returns the TransfersInfo field value if set, zero value otherwise.
func (o *Ticket) GetTransfersInfo() TransfersInfo {
	if o == nil || IsNil(o.TransfersInfo) {
		var ret TransfersInfo
		return ret
	}
	return *o.TransfersInfo
}

// GetTransfersInfoOk returns a tuple with the TransfersInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetTransfersInfoOk() (*TransfersInfo, bool) {
	if o == nil || IsNil(o.TransfersInfo) {
		return nil, false
	}
	return o.TransfersInfo, true
}

// HasTransfersInfo returns a boolean if a field has been set.
func (o *Ticket) HasTransfersInfo() bool {
	if o != nil && !IsNil(o.TransfersInfo) {
		return true
	}

	return false
}

// SetTransfersInfo gets a reference to the given TransfersInfo and assigns it to the TransfersInfo field.
func (o *Ticket) SetTransfersInfo(v TransfersInfo) {
	o.TransfersInfo = &v
}

// GetSurcharge returns the Surcharge field value if set, zero value otherwise.
func (o *Ticket) GetSurcharge() float32 {
	if o == nil || IsNil(o.Surcharge) {
		var ret float32
		return ret
	}
	return *o.Surcharge
}

// GetSurchargeOk returns a tuple with the Surcharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetSurchargeOk() (*float32, bool) {
	if o == nil || IsNil(o.Surcharge) {
		return nil, false
	}
	return o.Surcharge, true
}

// HasSurcharge returns a boolean if a field has been set.
func (o *Ticket) HasSurcharge() bool {
	if o != nil && !IsNil(o.Surcharge) {
		return true
	}

	return false
}

// SetSurcharge gets a reference to the given float32 and assigns it to the Surcharge field.
func (o *Ticket) SetSurcharge(v float32) {
	o.Surcharge = &v
}

// GetCancelChargeSum returns the CancelChargeSum field value if set, zero value otherwise.
func (o *Ticket) GetCancelChargeSum() float32 {
	if o == nil || IsNil(o.CancelChargeSum) {
		var ret float32
		return ret
	}
	return *o.CancelChargeSum
}

// GetCancelChargeSumOk returns a tuple with the CancelChargeSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetCancelChargeSumOk() (*float32, bool) {
	if o == nil || IsNil(o.CancelChargeSum) {
		return nil, false
	}
	return o.CancelChargeSum, true
}

// HasCancelChargeSum returns a boolean if a field has been set.
func (o *Ticket) HasCancelChargeSum() bool {
	if o != nil && !IsNil(o.CancelChargeSum) {
		return true
	}

	return false
}

// SetCancelChargeSum gets a reference to the given float32 and assigns it to the CancelChargeSum field.
func (o *Ticket) SetCancelChargeSum(v float32) {
	o.CancelChargeSum = &v
}

// GetCancelMoneyBackSum returns the CancelMoneyBackSum field value if set, zero value otherwise.
func (o *Ticket) GetCancelMoneyBackSum() float32 {
	if o == nil || IsNil(o.CancelMoneyBackSum) {
		var ret float32
		return ret
	}
	return *o.CancelMoneyBackSum
}

// GetCancelMoneyBackSumOk returns a tuple with the CancelMoneyBackSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetCancelMoneyBackSumOk() (*float32, bool) {
	if o == nil || IsNil(o.CancelMoneyBackSum) {
		return nil, false
	}
	return o.CancelMoneyBackSum, true
}

// HasCancelMoneyBackSum returns a boolean if a field has been set.
func (o *Ticket) HasCancelMoneyBackSum() bool {
	if o != nil && !IsNil(o.CancelMoneyBackSum) {
		return true
	}

	return false
}

// SetCancelMoneyBackSum gets a reference to the given float32 and assigns it to the CancelMoneyBackSum field.
func (o *Ticket) SetCancelMoneyBackSum(v float32) {
	o.CancelMoneyBackSum = &v
}

// GetPassengersInfo returns the PassengersInfo field value
func (o *Ticket) GetPassengersInfo() PassengersInfo {
	if o == nil {
		var ret PassengersInfo
		return ret
	}

	return o.PassengersInfo
}

// GetPassengersInfoOk returns a tuple with the PassengersInfo field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetPassengersInfoOk() (*PassengersInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PassengersInfo, true
}

// SetPassengersInfo sets field value
func (o *Ticket) SetPassengersInfo(v PassengersInfo) {
	o.PassengersInfo = v
}

// GetDelay returns the Delay field value if set, zero value otherwise.
func (o *Ticket) GetDelay() string {
	if o == nil || IsNil(o.Delay) {
		var ret string
		return ret
	}
	return *o.Delay
}

// GetDelayOk returns a tuple with the Delay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetDelayOk() (*string, bool) {
	if o == nil || IsNil(o.Delay) {
		return nil, false
	}
	return o.Delay, true
}

// HasDelay returns a boolean if a field has been set.
func (o *Ticket) HasDelay() bool {
	if o != nil && !IsNil(o.Delay) {
		return true
	}

	return false
}

// SetDelay gets a reference to the given string and assigns it to the Delay field.
func (o *Ticket) SetDelay(v string) {
	o.Delay = &v
}

// GetTravelTime returns the TravelTime field value if set, zero value otherwise.
func (o *Ticket) GetTravelTime() string {
	if o == nil || IsNil(o.TravelTime) {
		var ret string
		return ret
	}
	return *o.TravelTime
}

// GetTravelTimeOk returns a tuple with the TravelTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetTravelTimeOk() (*string, bool) {
	if o == nil || IsNil(o.TravelTime) {
		return nil, false
	}
	return o.TravelTime, true
}

// HasTravelTime returns a boolean if a field has been set.
func (o *Ticket) HasTravelTime() bool {
	if o != nil && !IsNil(o.TravelTime) {
		return true
	}

	return false
}

// SetTravelTime gets a reference to the given string and assigns it to the TravelTime field.
func (o *Ticket) SetTravelTime(v string) {
	o.TravelTime = &v
}

// GetEstimatedArrivalTime returns the EstimatedArrivalTime field value if set, zero value otherwise.
func (o *Ticket) GetEstimatedArrivalTime() time.Time {
	if o == nil || IsNil(o.EstimatedArrivalTime) {
		var ret time.Time
		return ret
	}
	return *o.EstimatedArrivalTime
}

// GetEstimatedArrivalTimeOk returns a tuple with the EstimatedArrivalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetEstimatedArrivalTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EstimatedArrivalTime) {
		return nil, false
	}
	return o.EstimatedArrivalTime, true
}

// HasEstimatedArrivalTime returns a boolean if a field has been set.
func (o *Ticket) HasEstimatedArrivalTime() bool {
	if o != nil && !IsNil(o.EstimatedArrivalTime) {
		return true
	}

	return false
}

// SetEstimatedArrivalTime gets a reference to the given time.Time and assigns it to the EstimatedArrivalTime field.
func (o *Ticket) SetEstimatedArrivalTime(v time.Time) {
	o.EstimatedArrivalTime = &v
}

func (o Ticket) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ticket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["routeId"] = o.RouteId
	toSerialize["price"] = o.Price
	toSerialize["unpaid"] = o.Unpaid
	toSerialize["currency"] = o.Currency
	toSerialize["state"] = o.State
	toSerialize["seatClassKey"] = o.SeatClassKey
	toSerialize["conditions"] = o.Conditions
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.ExpirateAt) {
		toSerialize["expirateAt"] = o.ExpirateAt
	}
	if !IsNil(o.CustomerNotifications) {
		toSerialize["customerNotifications"] = o.CustomerNotifications
	}
	toSerialize["customerActions"] = o.CustomerActions
	toSerialize["routeSections"] = o.RouteSections
	if !IsNil(o.Addons) {
		toSerialize["addons"] = o.Addons
	}
	if !IsNil(o.PaymentId) {
		toSerialize["paymentId"] = o.PaymentId
	}
	if !IsNil(o.Bills) {
		toSerialize["bills"] = o.Bills
	}
	if !IsNil(o.UsedCodeDiscount) {
		toSerialize["usedCodeDiscount"] = o.UsedCodeDiscount
	}
	if !IsNil(o.UsedPercentualDiscounts) {
		toSerialize["usedPercentualDiscounts"] = o.UsedPercentualDiscounts
	}
	if !IsNil(o.TransfersInfo) {
		toSerialize["transfersInfo"] = o.TransfersInfo
	}
	if !IsNil(o.Surcharge) {
		toSerialize["surcharge"] = o.Surcharge
	}
	if !IsNil(o.CancelChargeSum) {
		toSerialize["cancelChargeSum"] = o.CancelChargeSum
	}
	if !IsNil(o.CancelMoneyBackSum) {
		toSerialize["cancelMoneyBackSum"] = o.CancelMoneyBackSum
	}
	toSerialize["passengersInfo"] = o.PassengersInfo
	if !IsNil(o.Delay) {
		toSerialize["delay"] = o.Delay
	}
	if !IsNil(o.TravelTime) {
		toSerialize["travelTime"] = o.TravelTime
	}
	if !IsNil(o.EstimatedArrivalTime) {
		toSerialize["estimatedArrivalTime"] = o.EstimatedArrivalTime
	}
	return toSerialize, nil
}

func (o *Ticket) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"routeId",
		"price",
		"unpaid",
		"currency",
		"state",
		"seatClassKey",
		"conditions",
		"customerActions",
		"routeSections",
		"passengersInfo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTicket := _Ticket{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTicket)

	if err != nil {
		return err
	}

	*o = Ticket(varTicket)

	return err
}

type NullableTicket struct {
	value *Ticket
	isSet bool
}

func (v NullableTicket) Get() *Ticket {
	return v.value
}

func (v *NullableTicket) Set(val *Ticket) {
	v.value = val
	v.isSet = true
}

func (v NullableTicket) IsSet() bool {
	return v.isSet
}

func (v *NullableTicket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicket(val *Ticket) *NullableTicket {
	return &NullableTicket{value: val, isSet: true}
}

func (v NullableTicket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
