/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers. 

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TicketBill type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TicketBill{}

// TicketBill struct for TicketBill
type TicketBill struct {
	Amount float32 `json:"amount"`
	Currency Currency `json:"currency"`
	Label string `json:"label"`
}

type _TicketBill TicketBill

// NewTicketBill instantiates a new TicketBill object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicketBill(amount float32, currency Currency, label string) *TicketBill {
	this := TicketBill{}
	this.Amount = amount
	this.Currency = currency
	this.Label = label
	return &this
}

// NewTicketBillWithDefaults instantiates a new TicketBill object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicketBillWithDefaults() *TicketBill {
	this := TicketBill{}
	var currency Currency = EUR
	this.Currency = currency
	return &this
}

// GetAmount returns the Amount field value
func (o *TicketBill) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TicketBill) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TicketBill) SetAmount(v float32) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *TicketBill) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *TicketBill) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *TicketBill) SetCurrency(v Currency) {
	o.Currency = v
}

// GetLabel returns the Label field value
func (o *TicketBill) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *TicketBill) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *TicketBill) SetLabel(v string) {
	o.Label = v
}

func (o TicketBill) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TicketBill) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["currency"] = o.Currency
	toSerialize["label"] = o.Label
	return toSerialize, nil
}

func (o *TicketBill) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"currency",
		"label",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTicketBill := _TicketBill{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTicketBill)

	if err != nil {
		return err
	}

	*o = TicketBill(varTicketBill)

	return err
}

type NullableTicketBill struct {
	value *TicketBill
	isSet bool
}

func (v NullableTicketBill) Get() *TicketBill {
	return v.value
}

func (v *NullableTicketBill) Set(val *TicketBill) {
	v.value = val
	v.isSet = true
}

func (v NullableTicketBill) IsSet() bool {
	return v.isSet
}

func (v *NullableTicketBill) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicketBill(val *TicketBill) *NullableTicketBill {
	return &NullableTicketBill{value: val, isSet: true}
}

func (v NullableTicketBill) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicketBill) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


