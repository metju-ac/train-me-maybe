/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Transfer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transfer{}

// Transfer Informations about individual transfers (transfer order coincides with individual section order => 1st transfer is between 1st and 2nd section...). calculatedTransferTime is calculated tranfer time in minutes (departure time - arrival time), determinedTransferTime is used time in minutes needed for transfer.
type Transfer struct {
	// Station ID from which customer needs to transfer
	FromStationId int64 `json:"fromStationId"`
	// Station ID to which customer needs to transfer
	ToStationId            int64        `json:"toStationId"`
	Type                   TransferType `json:"type"`
	CalculatedTransferTime TimePeriod   `json:"calculatedTransferTime"`
	DeterminedTransferTime *TimePeriod  `json:"determinedTransferTime,omitempty"`
	// Transfer specification
	Description *string `json:"description,omitempty"`
}

type _Transfer Transfer

// NewTransfer instantiates a new Transfer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransfer(fromStationId int64, toStationId int64, type_ TransferType, calculatedTransferTime TimePeriod) *Transfer {
	this := Transfer{}
	this.FromStationId = fromStationId
	this.ToStationId = toStationId
	this.Type = type_
	this.CalculatedTransferTime = calculatedTransferTime
	return &this
}

// NewTransferWithDefaults instantiates a new Transfer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferWithDefaults() *Transfer {
	this := Transfer{}
	return &this
}

// GetFromStationId returns the FromStationId field value
func (o *Transfer) GetFromStationId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FromStationId
}

// GetFromStationIdOk returns a tuple with the FromStationId field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetFromStationIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromStationId, true
}

// SetFromStationId sets field value
func (o *Transfer) SetFromStationId(v int64) {
	o.FromStationId = v
}

// GetToStationId returns the ToStationId field value
func (o *Transfer) GetToStationId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ToStationId
}

// GetToStationIdOk returns a tuple with the ToStationId field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetToStationIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToStationId, true
}

// SetToStationId sets field value
func (o *Transfer) SetToStationId(v int64) {
	o.ToStationId = v
}

// GetType returns the Type field value
func (o *Transfer) GetType() TransferType {
	if o == nil {
		var ret TransferType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetTypeOk() (*TransferType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Transfer) SetType(v TransferType) {
	o.Type = v
}

// GetCalculatedTransferTime returns the CalculatedTransferTime field value
func (o *Transfer) GetCalculatedTransferTime() TimePeriod {
	if o == nil {
		var ret TimePeriod
		return ret
	}

	return o.CalculatedTransferTime
}

// GetCalculatedTransferTimeOk returns a tuple with the CalculatedTransferTime field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetCalculatedTransferTimeOk() (*TimePeriod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CalculatedTransferTime, true
}

// SetCalculatedTransferTime sets field value
func (o *Transfer) SetCalculatedTransferTime(v TimePeriod) {
	o.CalculatedTransferTime = v
}

// GetDeterminedTransferTime returns the DeterminedTransferTime field value if set, zero value otherwise.
func (o *Transfer) GetDeterminedTransferTime() TimePeriod {
	if o == nil || IsNil(o.DeterminedTransferTime) {
		var ret TimePeriod
		return ret
	}
	return *o.DeterminedTransferTime
}

// GetDeterminedTransferTimeOk returns a tuple with the DeterminedTransferTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfer) GetDeterminedTransferTimeOk() (*TimePeriod, bool) {
	if o == nil || IsNil(o.DeterminedTransferTime) {
		return nil, false
	}
	return o.DeterminedTransferTime, true
}

// HasDeterminedTransferTime returns a boolean if a field has been set.
func (o *Transfer) HasDeterminedTransferTime() bool {
	if o != nil && !IsNil(o.DeterminedTransferTime) {
		return true
	}

	return false
}

// SetDeterminedTransferTime gets a reference to the given TimePeriod and assigns it to the DeterminedTransferTime field.
func (o *Transfer) SetDeterminedTransferTime(v TimePeriod) {
	o.DeterminedTransferTime = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Transfer) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfer) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Transfer) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Transfer) SetDescription(v string) {
	o.Description = &v
}

func (o Transfer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transfer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fromStationId"] = o.FromStationId
	toSerialize["toStationId"] = o.ToStationId
	toSerialize["type"] = o.Type
	toSerialize["calculatedTransferTime"] = o.CalculatedTransferTime
	if !IsNil(o.DeterminedTransferTime) {
		toSerialize["determinedTransferTime"] = o.DeterminedTransferTime
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

func (o *Transfer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fromStationId",
		"toStationId",
		"type",
		"calculatedTransferTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransfer := _Transfer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransfer)

	if err != nil {
		return err
	}

	*o = Transfer(varTransfer)

	return err
}

type NullableTransfer struct {
	value *Transfer
	isSet bool
}

func (v NullableTransfer) Get() *Transfer {
	return v.value
}

func (v *NullableTransfer) Set(val *Transfer) {
	v.value = val
	v.isSet = true
}

func (v NullableTransfer) IsSet() bool {
	return v.isSet
}

func (v *NullableTransfer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransfer(val *Transfer) *NullableTransfer {
	return &NullableTransfer{value: val, isSet: true}
}

func (v NullableTransfer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransfer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
