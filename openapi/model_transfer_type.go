/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TransferType * `NONE` - Transfer between platforms within one station * `WALKING` - Transfer by walk * `PUBLIC_TRANSPORT` - Public transportation transfer
type TransferType string

// List of TransferType
const (
	NONE             TransferType = "NONE"
	WALKING          TransferType = "WALKING"
	PUBLIC_TRANSPORT TransferType = "PUBLIC_TRANSPORT"
)

// All allowed values of TransferType enum
var AllowedTransferTypeEnumValues = []TransferType{
	"NONE",
	"WALKING",
	"PUBLIC_TRANSPORT",
}

func (v *TransferType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransferType(value)
	for _, existing := range AllowedTransferTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransferType", value)
}

// NewTransferTypeFromValue returns a pointer to a valid TransferType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransferTypeFromValue(v string) (*TransferType, error) {
	ev := TransferType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransferType: valid values are %v", v, AllowedTransferTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransferType) IsValid() bool {
	for _, existing := range AllowedTransferTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransferType value
func (v TransferType) Ptr() *TransferType {
	return &v
}

type NullableTransferType struct {
	value *TransferType
	isSet bool
}

func (v NullableTransferType) Get() *TransferType {
	return v.value
}

func (v *NullableTransferType) Set(val *TransferType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferType(val *TransferType) *NullableTransferType {
	return &NullableTransferType{value: val, isSet: true}
}

func (v NullableTransferType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
