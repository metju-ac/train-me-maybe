/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Vehicle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Vehicle{}

// Vehicle struct for Vehicle
type Vehicle struct {
	Id int64 `json:"id"`
	// Vehicle code tag (BUS => SPZ, VAGON => code)
	Code   *string      `json:"code,omitempty"`
	Type   *VehicleType `json:"type,omitempty"`
	Number int64        `json:"number"`
	// Available services in this vehicle
	SeatClasses []VehicleSeatClass `json:"seatClasses,omitempty"`
	// Vehicle standard code tag
	Standard string `json:"standard"`
	// Additional informations relating to whole vehicle. These informations are visible, but wont requiring confirmation.
	Notifications []string `json:"notifications,omitempty"`
	// Indicates if catering is enabled in current vehicle (i.e. it is possible for a customer to place catering order).
	CateringEnabled *bool         `json:"cateringEnabled,omitempty"`
	Decks           []VehicleDeck `json:"decks"`
}

type _Vehicle Vehicle

// NewVehicle instantiates a new Vehicle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVehicle(id int64, number int64, seatClasses []VehicleSeatClass, standard string, decks []VehicleDeck) *Vehicle {
	this := Vehicle{}
	this.Id = id
	this.Number = number
	this.SeatClasses = seatClasses
	this.Standard = standard
	this.Decks = decks
	return &this
}

// NewVehicleWithDefaults instantiates a new Vehicle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVehicleWithDefaults() *Vehicle {
	this := Vehicle{}
	return &this
}

// GetId returns the Id field value
func (o *Vehicle) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Vehicle) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Vehicle) SetId(v int64) {
	o.Id = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Vehicle) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Vehicle) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Vehicle) SetCode(v string) {
	o.Code = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Vehicle) GetType() VehicleType {
	if o == nil || IsNil(o.Type) {
		var ret VehicleType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetTypeOk() (*VehicleType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Vehicle) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given VehicleType and assigns it to the Type field.
func (o *Vehicle) SetType(v VehicleType) {
	o.Type = &v
}

// GetNumber returns the Number field value
func (o *Vehicle) GetNumber() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *Vehicle) GetNumberOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *Vehicle) SetNumber(v int64) {
	o.Number = v
}

// GetSeatClasses returns the SeatClasses field value
func (o *Vehicle) GetSeatClasses() []VehicleSeatClass {
	if o == nil {
		var ret []VehicleSeatClass
		return ret
	}

	return o.SeatClasses
}

// GetSeatClassesOk returns a tuple with the SeatClasses field value
// and a boolean to check if the value has been set.
func (o *Vehicle) GetSeatClassesOk() ([]VehicleSeatClass, bool) {
	if o == nil {
		return nil, false
	}
	return o.SeatClasses, true
}

// SetSeatClasses sets field value
func (o *Vehicle) SetSeatClasses(v []VehicleSeatClass) {
	o.SeatClasses = v
}

// GetStandard returns the Standard field value
func (o *Vehicle) GetStandard() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Standard
}

// GetStandardOk returns a tuple with the Standard field value
// and a boolean to check if the value has been set.
func (o *Vehicle) GetStandardOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Standard, true
}

// SetStandard sets field value
func (o *Vehicle) SetStandard(v string) {
	o.Standard = v
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *Vehicle) GetNotifications() []string {
	if o == nil || IsNil(o.Notifications) {
		var ret []string
		return ret
	}
	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetNotificationsOk() ([]string, bool) {
	if o == nil || IsNil(o.Notifications) {
		return nil, false
	}
	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *Vehicle) HasNotifications() bool {
	if o != nil && !IsNil(o.Notifications) {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given []string and assigns it to the Notifications field.
func (o *Vehicle) SetNotifications(v []string) {
	o.Notifications = v
}

// GetCateringEnabled returns the CateringEnabled field value if set, zero value otherwise.
func (o *Vehicle) GetCateringEnabled() bool {
	if o == nil || IsNil(o.CateringEnabled) {
		var ret bool
		return ret
	}
	return *o.CateringEnabled
}

// GetCateringEnabledOk returns a tuple with the CateringEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetCateringEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CateringEnabled) {
		return nil, false
	}
	return o.CateringEnabled, true
}

// HasCateringEnabled returns a boolean if a field has been set.
func (o *Vehicle) HasCateringEnabled() bool {
	if o != nil && !IsNil(o.CateringEnabled) {
		return true
	}

	return false
}

// SetCateringEnabled gets a reference to the given bool and assigns it to the CateringEnabled field.
func (o *Vehicle) SetCateringEnabled(v bool) {
	o.CateringEnabled = &v
}

// GetDecks returns the Decks field value
func (o *Vehicle) GetDecks() []VehicleDeck {
	if o == nil {
		var ret []VehicleDeck
		return ret
	}

	return o.Decks
}

// GetDecksOk returns a tuple with the Decks field value
// and a boolean to check if the value has been set.
func (o *Vehicle) GetDecksOk() ([]VehicleDeck, bool) {
	if o == nil {
		return nil, false
	}
	return o.Decks, true
}

// SetDecks sets field value
func (o *Vehicle) SetDecks(v []VehicleDeck) {
	o.Decks = v
}

func (o Vehicle) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Vehicle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["number"] = o.Number
	toSerialize["seatClasses"] = o.SeatClasses
	toSerialize["standard"] = o.Standard
	if !IsNil(o.Notifications) {
		toSerialize["notifications"] = o.Notifications
	}
	if !IsNil(o.CateringEnabled) {
		toSerialize["cateringEnabled"] = o.CateringEnabled
	}
	toSerialize["decks"] = o.Decks
	return toSerialize, nil
}

func (o *Vehicle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"number",
		"standard",
		"decks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVehicle := _Vehicle{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVehicle)

	if err != nil {
		return err
	}

	*o = Vehicle(varVehicle)

	return err
}

type NullableVehicle struct {
	value *Vehicle
	isSet bool
}

func (v NullableVehicle) Get() *Vehicle {
	return v.value
}

func (v *NullableVehicle) Set(val *Vehicle) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicle) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicle(val *Vehicle) *NullableVehicle {
	return &NullableVehicle{value: val, isSet: true}
}

func (v NullableVehicle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
