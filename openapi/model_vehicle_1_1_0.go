/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Vehicle110 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Vehicle110{}

// Vehicle110 struct for Vehicle110
type Vehicle110 struct {
	VehicleId int64 `json:"vehicleId"`
	// Vehicle code tag (BUS => SPZ, VAGON => code)
	Code                *string      `json:"code,omitempty"`
	LayoutURL           *string      `json:"layoutURL,omitempty"`
	HorizontalLayoutURL *string      `json:"horizontalLayoutURL,omitempty"`
	Type                *VehicleType `json:"type,omitempty"`
	// Vehicle standard code tag
	VehicleStandardKey string `json:"vehicleStandardKey"`
	// Supported services icons (wifi, etc.)
	Services      []string `json:"services,omitempty"`
	VehicleNumber int64    `json:"vehicleNumber"`
	// Available classes in this vehicle
	SeatClasses []string `json:"seatClasses,omitempty"`
	// Additional informations relating to whole vehicle. These informations are visible, but wont requiring confirmation.
	Notifications []string `json:"notifications,omitempty"`
	FreeSeats     []Seat   `json:"freeSeats"`
	OccupiedSeats     []Seat   `json:"occupiedSeats,omitempty"`
	CateringEnabled bool `json:"cateringEnabled,omitempty"`
	VehicleSeatClasses []VehicleSeatClass `json:"vehicleSeatClasses,omitempty"`
}

type _Vehicle110 Vehicle110

// NewVehicle110 instantiates a new Vehicle110 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVehicle110(vehicleId int64, vehicleStandardKey string, vehicleNumber int64, seatClasses []string, freeSeats []Seat) *Vehicle110 {
	this := Vehicle110{}
	this.VehicleId = vehicleId
	this.VehicleStandardKey = vehicleStandardKey
	this.VehicleNumber = vehicleNumber
	this.SeatClasses = seatClasses
	this.FreeSeats = freeSeats
	return &this
}

// NewVehicle110WithDefaults instantiates a new Vehicle110 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVehicle110WithDefaults() *Vehicle110 {
	this := Vehicle110{}
	return &this
}

// GetVehicleId returns the VehicleId field value
func (o *Vehicle110) GetVehicleId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.VehicleId
}

// GetVehicleIdOk returns a tuple with the VehicleId field value
// and a boolean to check if the value has been set.
func (o *Vehicle110) GetVehicleIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VehicleId, true
}

// SetVehicleId sets field value
func (o *Vehicle110) SetVehicleId(v int64) {
	o.VehicleId = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Vehicle110) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle110) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Vehicle110) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Vehicle110) SetCode(v string) {
	o.Code = &v
}

// GetLayoutURL returns the LayoutURL field value if set, zero value otherwise.
func (o *Vehicle110) GetLayoutURL() string {
	if o == nil || IsNil(o.LayoutURL) {
		var ret string
		return ret
	}
	return *o.LayoutURL
}

// GetLayoutURLOk returns a tuple with the LayoutURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle110) GetLayoutURLOk() (*string, bool) {
	if o == nil || IsNil(o.LayoutURL) {
		return nil, false
	}
	return o.LayoutURL, true
}

// HasLayoutURL returns a boolean if a field has been set.
func (o *Vehicle110) HasLayoutURL() bool {
	if o != nil && !IsNil(o.LayoutURL) {
		return true
	}

	return false
}

// SetLayoutURL gets a reference to the given string and assigns it to the LayoutURL field.
func (o *Vehicle110) SetLayoutURL(v string) {
	o.LayoutURL = &v
}

// GetHorizontalLayoutURL returns the HorizontalLayoutURL field value if set, zero value otherwise.
func (o *Vehicle110) GetHorizontalLayoutURL() string {
	if o == nil || IsNil(o.HorizontalLayoutURL) {
		var ret string
		return ret
	}
	return *o.HorizontalLayoutURL
}

// GetHorizontalLayoutURLOk returns a tuple with the HorizontalLayoutURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle110) GetHorizontalLayoutURLOk() (*string, bool) {
	if o == nil || IsNil(o.HorizontalLayoutURL) {
		return nil, false
	}
	return o.HorizontalLayoutURL, true
}

// HasHorizontalLayoutURL returns a boolean if a field has been set.
func (o *Vehicle110) HasHorizontalLayoutURL() bool {
	if o != nil && !IsNil(o.HorizontalLayoutURL) {
		return true
	}

	return false
}

// SetHorizontalLayoutURL gets a reference to the given string and assigns it to the HorizontalLayoutURL field.
func (o *Vehicle110) SetHorizontalLayoutURL(v string) {
	o.HorizontalLayoutURL = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Vehicle110) GetType() VehicleType {
	if o == nil || IsNil(o.Type) {
		var ret VehicleType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle110) GetTypeOk() (*VehicleType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Vehicle110) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given VehicleType and assigns it to the Type field.
func (o *Vehicle110) SetType(v VehicleType) {
	o.Type = &v
}

// GetVehicleStandardKey returns the VehicleStandardKey field value
func (o *Vehicle110) GetVehicleStandardKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VehicleStandardKey
}

// GetVehicleStandardKeyOk returns a tuple with the VehicleStandardKey field value
// and a boolean to check if the value has been set.
func (o *Vehicle110) GetVehicleStandardKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VehicleStandardKey, true
}

// SetVehicleStandardKey sets field value
func (o *Vehicle110) SetVehicleStandardKey(v string) {
	o.VehicleStandardKey = v
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *Vehicle110) GetServices() []string {
	if o == nil || IsNil(o.Services) {
		var ret []string
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle110) GetServicesOk() ([]string, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *Vehicle110) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []string and assigns it to the Services field.
func (o *Vehicle110) SetServices(v []string) {
	o.Services = v
}

// GetVehicleNumber returns the VehicleNumber field value
func (o *Vehicle110) GetVehicleNumber() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.VehicleNumber
}

// GetVehicleNumberOk returns a tuple with the VehicleNumber field value
// and a boolean to check if the value has been set.
func (o *Vehicle110) GetVehicleNumberOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VehicleNumber, true
}

// SetVehicleNumber sets field value
func (o *Vehicle110) SetVehicleNumber(v int64) {
	o.VehicleNumber = v
}

// GetSeatClasses returns the SeatClasses field value
func (o *Vehicle110) GetSeatClasses() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SeatClasses
}

// GetSeatClassesOk returns a tuple with the SeatClasses field value
// and a boolean to check if the value has been set.
func (o *Vehicle110) GetSeatClassesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SeatClasses, true
}

// SetSeatClasses sets field value
func (o *Vehicle110) SetSeatClasses(v []string) {
	o.SeatClasses = v
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *Vehicle110) GetNotifications() []string {
	if o == nil || IsNil(o.Notifications) {
		var ret []string
		return ret
	}
	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle110) GetNotificationsOk() ([]string, bool) {
	if o == nil || IsNil(o.Notifications) {
		return nil, false
	}
	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *Vehicle110) HasNotifications() bool {
	if o != nil && !IsNil(o.Notifications) {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given []string and assigns it to the Notifications field.
func (o *Vehicle110) SetNotifications(v []string) {
	o.Notifications = v
}

// GetFreeSeats returns the FreeSeats field value
func (o *Vehicle110) GetFreeSeats() []Seat {
	if o == nil {
		var ret []Seat
		return ret
	}

	return o.FreeSeats
}

// GetFreeSeatsOk returns a tuple with the FreeSeats field value
// and a boolean to check if the value has been set.
func (o *Vehicle110) GetFreeSeatsOk() ([]Seat, bool) {
	if o == nil {
		return nil, false
	}
	return o.FreeSeats, true
}

// SetFreeSeats sets field value
func (o *Vehicle110) SetFreeSeats(v []Seat) {
	o.FreeSeats = v
}

func (o Vehicle110) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Vehicle110) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vehicleId"] = o.VehicleId
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.LayoutURL) {
		toSerialize["layoutURL"] = o.LayoutURL
	}
	if !IsNil(o.HorizontalLayoutURL) {
		toSerialize["horizontalLayoutURL"] = o.HorizontalLayoutURL
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["vehicleStandardKey"] = o.VehicleStandardKey
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	toSerialize["vehicleNumber"] = o.VehicleNumber
	toSerialize["seatClasses"] = o.SeatClasses
	if !IsNil(o.Notifications) {
		toSerialize["notifications"] = o.Notifications
	}
	toSerialize["freeSeats"] = o.FreeSeats
	return toSerialize, nil
}

func (o *Vehicle110) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vehicleId",
		"vehicleStandardKey",
		"vehicleNumber",
		"freeSeats",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVehicle110 := _Vehicle110{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVehicle110)

	if err != nil {
		return err
	}

	*o = Vehicle110(varVehicle110)

	return err
}

type NullableVehicle110 struct {
	value *Vehicle110
	isSet bool
}

func (v NullableVehicle110) Get() *Vehicle110 {
	return v.value
}

func (v *NullableVehicle110) Set(val *Vehicle110) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicle110) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicle110) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicle110(val *Vehicle110) *NullableVehicle110 {
	return &NullableVehicle110{value: val, isSet: true}
}

func (v NullableVehicle110) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicle110) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
