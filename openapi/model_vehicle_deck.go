/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers. 

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VehicleDeck type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VehicleDeck{}

// VehicleDeck struct for VehicleDeck
type VehicleDeck struct {
	Number int32 `json:"number"`
	Name string `json:"name"`
	LayoutURL *string `json:"layoutURL,omitempty"`
	HorizontalLayoutURL *string `json:"horizontalLayoutURL,omitempty"`
	FreeSeats []Seat `json:"freeSeats"`
	OccupiedSeats []Seat `json:"occupiedSeats"`
}

type _VehicleDeck VehicleDeck

// NewVehicleDeck instantiates a new VehicleDeck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVehicleDeck(number int32, name string, freeSeats []Seat, occupiedSeats []Seat) *VehicleDeck {
	this := VehicleDeck{}
	this.Number = number
	this.Name = name
	this.FreeSeats = freeSeats
	this.OccupiedSeats = occupiedSeats
	return &this
}

// NewVehicleDeckWithDefaults instantiates a new VehicleDeck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVehicleDeckWithDefaults() *VehicleDeck {
	this := VehicleDeck{}
	return &this
}

// GetNumber returns the Number field value
func (o *VehicleDeck) GetNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *VehicleDeck) GetNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *VehicleDeck) SetNumber(v int32) {
	o.Number = v
}

// GetName returns the Name field value
func (o *VehicleDeck) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VehicleDeck) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VehicleDeck) SetName(v string) {
	o.Name = v
}

// GetLayoutURL returns the LayoutURL field value if set, zero value otherwise.
func (o *VehicleDeck) GetLayoutURL() string {
	if o == nil || IsNil(o.LayoutURL) {
		var ret string
		return ret
	}
	return *o.LayoutURL
}

// GetLayoutURLOk returns a tuple with the LayoutURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleDeck) GetLayoutURLOk() (*string, bool) {
	if o == nil || IsNil(o.LayoutURL) {
		return nil, false
	}
	return o.LayoutURL, true
}

// HasLayoutURL returns a boolean if a field has been set.
func (o *VehicleDeck) HasLayoutURL() bool {
	if o != nil && !IsNil(o.LayoutURL) {
		return true
	}

	return false
}

// SetLayoutURL gets a reference to the given string and assigns it to the LayoutURL field.
func (o *VehicleDeck) SetLayoutURL(v string) {
	o.LayoutURL = &v
}

// GetHorizontalLayoutURL returns the HorizontalLayoutURL field value if set, zero value otherwise.
func (o *VehicleDeck) GetHorizontalLayoutURL() string {
	if o == nil || IsNil(o.HorizontalLayoutURL) {
		var ret string
		return ret
	}
	return *o.HorizontalLayoutURL
}

// GetHorizontalLayoutURLOk returns a tuple with the HorizontalLayoutURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleDeck) GetHorizontalLayoutURLOk() (*string, bool) {
	if o == nil || IsNil(o.HorizontalLayoutURL) {
		return nil, false
	}
	return o.HorizontalLayoutURL, true
}

// HasHorizontalLayoutURL returns a boolean if a field has been set.
func (o *VehicleDeck) HasHorizontalLayoutURL() bool {
	if o != nil && !IsNil(o.HorizontalLayoutURL) {
		return true
	}

	return false
}

// SetHorizontalLayoutURL gets a reference to the given string and assigns it to the HorizontalLayoutURL field.
func (o *VehicleDeck) SetHorizontalLayoutURL(v string) {
	o.HorizontalLayoutURL = &v
}

// GetFreeSeats returns the FreeSeats field value
func (o *VehicleDeck) GetFreeSeats() []Seat {
	if o == nil {
		var ret []Seat
		return ret
	}

	return o.FreeSeats
}

// GetFreeSeatsOk returns a tuple with the FreeSeats field value
// and a boolean to check if the value has been set.
func (o *VehicleDeck) GetFreeSeatsOk() ([]Seat, bool) {
	if o == nil {
		return nil, false
	}
	return o.FreeSeats, true
}

// SetFreeSeats sets field value
func (o *VehicleDeck) SetFreeSeats(v []Seat) {
	o.FreeSeats = v
}

// GetOccupiedSeats returns the OccupiedSeats field value
func (o *VehicleDeck) GetOccupiedSeats() []Seat {
	if o == nil {
		var ret []Seat
		return ret
	}

	return o.OccupiedSeats
}

// GetOccupiedSeatsOk returns a tuple with the OccupiedSeats field value
// and a boolean to check if the value has been set.
func (o *VehicleDeck) GetOccupiedSeatsOk() ([]Seat, bool) {
	if o == nil {
		return nil, false
	}
	return o.OccupiedSeats, true
}

// SetOccupiedSeats sets field value
func (o *VehicleDeck) SetOccupiedSeats(v []Seat) {
	o.OccupiedSeats = v
}

func (o VehicleDeck) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VehicleDeck) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["number"] = o.Number
	toSerialize["name"] = o.Name
	if !IsNil(o.LayoutURL) {
		toSerialize["layoutURL"] = o.LayoutURL
	}
	if !IsNil(o.HorizontalLayoutURL) {
		toSerialize["horizontalLayoutURL"] = o.HorizontalLayoutURL
	}
	toSerialize["freeSeats"] = o.FreeSeats
	toSerialize["occupiedSeats"] = o.OccupiedSeats
	return toSerialize, nil
}

func (o *VehicleDeck) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"number",
		"name",
		"freeSeats",
		"occupiedSeats",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVehicleDeck := _VehicleDeck{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVehicleDeck)

	if err != nil {
		return err
	}

	*o = VehicleDeck(varVehicleDeck)

	return err
}

type NullableVehicleDeck struct {
	value *VehicleDeck
	isSet bool
}

func (v NullableVehicleDeck) Get() *VehicleDeck {
	return v.value
}

func (v *NullableVehicleDeck) Set(val *VehicleDeck) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicleDeck) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicleDeck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicleDeck(val *VehicleDeck) *NullableVehicleDeck {
	return &NullableVehicleDeck{value: val, isSet: true}
}

func (v NullableVehicleDeck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicleDeck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


