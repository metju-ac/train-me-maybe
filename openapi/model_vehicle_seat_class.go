/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VehicleSeatClass type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VehicleSeatClass{}

// VehicleSeatClass struct for VehicleSeatClass
type VehicleSeatClass struct {
	Name     string             `json:"name"`
	Services []SeatClassService `json:"services"`
}

type _VehicleSeatClass VehicleSeatClass

// NewVehicleSeatClass instantiates a new VehicleSeatClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVehicleSeatClass(name string, services []SeatClassService) *VehicleSeatClass {
	this := VehicleSeatClass{}
	this.Name = name
	this.Services = services
	return &this
}

// NewVehicleSeatClassWithDefaults instantiates a new VehicleSeatClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVehicleSeatClassWithDefaults() *VehicleSeatClass {
	this := VehicleSeatClass{}
	return &this
}

// GetName returns the Name field value
func (o *VehicleSeatClass) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VehicleSeatClass) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VehicleSeatClass) SetName(v string) {
	o.Name = v
}

// GetServices returns the Services field value
func (o *VehicleSeatClass) GetServices() []SeatClassService {
	if o == nil {
		var ret []SeatClassService
		return ret
	}

	return o.Services
}

// GetServicesOk returns a tuple with the Services field value
// and a boolean to check if the value has been set.
func (o *VehicleSeatClass) GetServicesOk() ([]SeatClassService, bool) {
	if o == nil {
		return nil, false
	}
	return o.Services, true
}

// SetServices sets field value
func (o *VehicleSeatClass) SetServices(v []SeatClassService) {
	o.Services = v
}

func (o VehicleSeatClass) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VehicleSeatClass) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["services"] = o.Services
	return toSerialize, nil
}

func (o *VehicleSeatClass) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"services",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVehicleSeatClass := _VehicleSeatClass{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVehicleSeatClass)

	if err != nil {
		return err
	}

	*o = VehicleSeatClass(varVehicleSeatClass)

	return err
}

type NullableVehicleSeatClass struct {
	value *VehicleSeatClass
	isSet bool
}

func (v NullableVehicleSeatClass) Get() *VehicleSeatClass {
	return v.value
}

func (v *NullableVehicleSeatClass) Set(val *VehicleSeatClass) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicleSeatClass) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicleSeatClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicleSeatClass(val *VehicleSeatClass) *NullableVehicleSeatClass {
	return &NullableVehicleSeatClass{value: val, isSet: true}
}

func (v NullableVehicleSeatClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicleSeatClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
