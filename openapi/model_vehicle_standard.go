/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers.

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VehicleStandard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VehicleStandard{}

// VehicleStandard struct for VehicleStandard
type VehicleStandard struct {
	// Vehicle standard key that will be used in responses from other endpoints.
	Key string `json:"key"`
	// Vehicle standard name.
	Name string `json:"name"`
	// Vehicle standard description.
	Description string `json:"description"`
	// URL to vehicle standard thumbnail image.
	ImageUrl string `json:"imageUrl"`
	// URL to support vehicle thumbnail image.
	SupportImageUrl string `json:"supportImageUrl"`
	// URL to publicly available information about vehicle standard.
	GalleryUrl *string `json:"galleryUrl,omitempty"`
}

type _VehicleStandard VehicleStandard

// NewVehicleStandard instantiates a new VehicleStandard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVehicleStandard(key string, name string, description string, imageUrl string, supportImageUrl string) *VehicleStandard {
	this := VehicleStandard{}
	this.Key = key
	this.Name = name
	this.Description = description
	this.ImageUrl = imageUrl
	this.SupportImageUrl = supportImageUrl
	return &this
}

// NewVehicleStandardWithDefaults instantiates a new VehicleStandard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVehicleStandardWithDefaults() *VehicleStandard {
	this := VehicleStandard{}
	return &this
}

// GetKey returns the Key field value
func (o *VehicleStandard) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *VehicleStandard) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *VehicleStandard) SetKey(v string) {
	o.Key = v
}

// GetName returns the Name field value
func (o *VehicleStandard) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VehicleStandard) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VehicleStandard) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *VehicleStandard) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *VehicleStandard) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *VehicleStandard) SetDescription(v string) {
	o.Description = v
}

// GetImageUrl returns the ImageUrl field value
func (o *VehicleStandard) GetImageUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageUrl
}

// GetImageUrlOk returns a tuple with the ImageUrl field value
// and a boolean to check if the value has been set.
func (o *VehicleStandard) GetImageUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageUrl, true
}

// SetImageUrl sets field value
func (o *VehicleStandard) SetImageUrl(v string) {
	o.ImageUrl = v
}

// GetSupportImageUrl returns the SupportImageUrl field value
func (o *VehicleStandard) GetSupportImageUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SupportImageUrl
}

// GetSupportImageUrlOk returns a tuple with the SupportImageUrl field value
// and a boolean to check if the value has been set.
func (o *VehicleStandard) GetSupportImageUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SupportImageUrl, true
}

// SetSupportImageUrl sets field value
func (o *VehicleStandard) SetSupportImageUrl(v string) {
	o.SupportImageUrl = v
}

// GetGalleryUrl returns the GalleryUrl field value if set, zero value otherwise.
func (o *VehicleStandard) GetGalleryUrl() string {
	if o == nil || IsNil(o.GalleryUrl) {
		var ret string
		return ret
	}
	return *o.GalleryUrl
}

// GetGalleryUrlOk returns a tuple with the GalleryUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleStandard) GetGalleryUrlOk() (*string, bool) {
	if o == nil || IsNil(o.GalleryUrl) {
		return nil, false
	}
	return o.GalleryUrl, true
}

// HasGalleryUrl returns a boolean if a field has been set.
func (o *VehicleStandard) HasGalleryUrl() bool {
	if o != nil && !IsNil(o.GalleryUrl) {
		return true
	}

	return false
}

// SetGalleryUrl gets a reference to the given string and assigns it to the GalleryUrl field.
func (o *VehicleStandard) SetGalleryUrl(v string) {
	o.GalleryUrl = &v
}

func (o VehicleStandard) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VehicleStandard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["imageUrl"] = o.ImageUrl
	toSerialize["supportImageUrl"] = o.SupportImageUrl
	if !IsNil(o.GalleryUrl) {
		toSerialize["galleryUrl"] = o.GalleryUrl
	}
	return toSerialize, nil
}

func (o *VehicleStandard) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"name",
		"description",
		"imageUrl",
		"supportImageUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVehicleStandard := _VehicleStandard{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVehicleStandard)

	if err != nil {
		return err
	}

	*o = VehicleStandard(varVehicleStandard)

	return err
}

type NullableVehicleStandard struct {
	value *VehicleStandard
	isSet bool
}

func (v NullableVehicleStandard) Get() *VehicleStandard {
	return v.value
}

func (v *NullableVehicleStandard) Set(val *VehicleStandard) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicleStandard) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicleStandard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicleStandard(val *VehicleStandard) *NullableVehicleStandard {
	return &NullableVehicleStandard{value: val, isSet: true}
}

func (v NullableVehicleStandard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicleStandard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
