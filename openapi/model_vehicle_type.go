/*
RegioJet's Affiliate API Reference

The RegioJet\\'s Affiliate API is a set of endpoints that help your application integrate with RegioJet.  The API is organized arount [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API uses standard HTTP methods, authentication, and status codes.  # Authentication Authentication to the API is performed via [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) for all endpoints listed in this documentation with the exception of `/users/authenticate`, which uses bearer token.  API requests without authentication will fail.  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS).  # Errors  RegioJet uses conventional HTTP status codes in responses to indicate the success or failure of an API request.  In general:   * `2xx` codes indicate success;   * `4xx` codes indicate an error that failed given the information provided in request.   * `5xx` codes indicate an error with RegioJet's servers. 

API version: 1.1.0
Contact: developers@studentagency.cz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VehicleType the model 'VehicleType'
type VehicleType string

// List of VehicleType
const (
	BUS VehicleType = "BUS"
	TRAIN VehicleType = "TRAIN"
)

// All allowed values of VehicleType enum
var AllowedVehicleTypeEnumValues = []VehicleType{
	"BUS",
	"TRAIN",
}

func (v *VehicleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VehicleType(value)
	for _, existing := range AllowedVehicleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VehicleType", value)
}

// NewVehicleTypeFromValue returns a pointer to a valid VehicleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVehicleTypeFromValue(v string) (*VehicleType, error) {
	ev := VehicleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VehicleType: valid values are %v", v, AllowedVehicleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VehicleType) IsValid() bool {
	for _, existing := range AllowedVehicleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VehicleType value
func (v VehicleType) Ptr() *VehicleType {
	return &v
}

type NullableVehicleType struct {
	value *VehicleType
	isSet bool
}

func (v NullableVehicleType) Get() *VehicleType {
	return v.value
}

func (v *NullableVehicleType) Set(val *VehicleType) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicleType) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicleType(val *VehicleType) *NullableVehicleType {
	return &NullableVehicleType{value: val, isSet: true}
}

func (v NullableVehicleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

