/*
RegioJet's Affiliate API Reference

Testing RoutesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/metju-ac/train-me-maybe/openapi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_RoutesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RoutesAPIService GetPassengersData", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var routeId string

		resp, httpRes, err := apiClient.RoutesAPI.GetPassengersData(context.Background(), routeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoutesAPIService GetRouteFreeSeats", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RoutesAPI.GetRouteFreeSeats(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoutesAPIService GetRouteFreeSeats110", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var routeId string

		resp, httpRes, err := apiClient.RoutesAPI.GetRouteFreeSeats110(context.Background(), routeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoutesAPIService GetSimpleRouteDetail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var routeId string

		resp, httpRes, err := apiClient.RoutesAPI.GetSimpleRouteDetail(context.Background(), routeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoutesAPIService GetSroPassengersData", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var routeId string

		resp, httpRes, err := apiClient.RoutesAPI.GetSroPassengersData(context.Background(), routeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoutesAPIService GetSroRoutePrices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var routeId string

		resp, httpRes, err := apiClient.RoutesAPI.GetSroRoutePrices(context.Background(), routeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoutesAPIService SearchRoutes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RoutesAPI.SearchRoutes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoutesAPIService SearchSR70Routes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var connection int64
		var fromLocation int64
		var toLocation string
		var ticketType string

		resp, httpRes, err := apiClient.RoutesAPI.SearchSR70Routes(context.Background(), connection, fromLocation, toLocation, ticketType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoutesAPIService SimpleSearchRoutes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RoutesAPI.SimpleSearchRoutes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
